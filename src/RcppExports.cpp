// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distance_matrix_cpp
NumericMatrix distance_matrix_cpp(NumericMatrix a, NumericMatrix b, Function f);
RcppExport SEXP _distantia_distance_matrix_cpp(SEXP aSEXP, SEXP bSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_matrix_cpp(a, b, f));
    return rcpp_result_gen;
END_RCPP
}
// distance_manhattan_cpp
double distance_manhattan_cpp(NumericVector x, NumericVector y);
RcppExport SEXP _distantia_distance_manhattan_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(distance_manhattan_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// distance_euclidean_cpp
double distance_euclidean_cpp(NumericVector x, NumericVector y);
RcppExport SEXP _distantia_distance_euclidean_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(distance_euclidean_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// distance_hellinger_cpp
double distance_hellinger_cpp(NumericVector x, NumericVector y);
RcppExport SEXP _distantia_distance_hellinger_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(distance_hellinger_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// distance_chi_cpp
double distance_chi_cpp(NumericVector x, NumericVector y);
RcppExport SEXP _distantia_distance_chi_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(distance_chi_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_distantia_distance_matrix_cpp", (DL_FUNC) &_distantia_distance_matrix_cpp, 3},
    {"_distantia_distance_manhattan_cpp", (DL_FUNC) &_distantia_distance_manhattan_cpp, 2},
    {"_distantia_distance_euclidean_cpp", (DL_FUNC) &_distantia_distance_euclidean_cpp, 2},
    {"_distantia_distance_hellinger_cpp", (DL_FUNC) &_distantia_distance_hellinger_cpp, 2},
    {"_distantia_distance_chi_cpp", (DL_FUNC) &_distantia_distance_chi_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_distantia(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
