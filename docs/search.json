[{"path":"https://blasbenito.github.io/distantia/articles/psi_dissimilarity_metric.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"The Psi Dissimilarity Metric","text":"article, based Benito Birks 2020, describes step--step computation dissimilarity metric used distantia compare pairs time series.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/psi_dissimilarity_metric.html","id":"the-psi-dissimilarity-metric","dir":"Articles","previous_headings":"","what":"The Psi Dissimilarity Metric","title":"The Psi Dissimilarity Metric","text":"Psi Dissimilarity Metric (ψ\\psi hereafter) measures distance two time series range [0,∞)[0, \\infty), 0 represents identical time series. first described Birks Gordon 1985 later extended implemented R package distantia Benito Birks 2020. essence, ψ\\psi computed sum distances relevant pairs samples two time series, normalized sum distances consecutive samples within time series. normalization allows comparing ψ\\psi pairs time series varying numbers samples. general expression compute ψ\\psi : ψ=ABbetween−ABwithinABwithin\\psi = \\frac{AB_{} - AB_{within}}{AB_{within}} AA BB matrices number columns representing two time series, ABbetweenAB_{} distance time series samples, ABwithinAB_{within} normalization factor. Going deeper math notation, ABbetweenAB_{} expressed : ABbetween=2×∑=1m=nD(Ai,Bi)AB_{\\text{}} = 2 \\times \\sum_{=1}^{m=n} D(A_i, B_i) mm nn number samples AA BB, ii relevant sample index, nn total number sample pairs, DD distance function (e.g., Euclidean, Manhattan, relevant distance metric values AA BB). hand, ABwithinAB_{within} represented : ABwithin=∑=2mD(Ai−1,Ai)+∑=2nD(Bi−1,Bi)AB_{\\text{within}} = \\sum_{=2}^{m} D(A_{-1}, A_i) + \\sum_{=2}^{n} D(B_{-1}, B_i)  D(Ai−1,Ai)D(A_{-1}, A_i) D(Bi−1,Bi)D(B_{-1}, B_i) represent sum distances consecutive samples within AA BB, respectively.","code":""},{"path":"https://blasbenito.github.io/distantia/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Blas M. Benito. Author, maintainer, copyright holder.","code":""},{"path":"https://blasbenito.github.io/distantia/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benito B, Birks H (2020). “distantia: open-source toolset quantify dissimilarity multivariate ecological time-series.” Ecography, 43(5), 660-667. doi:10.1111/ecog.04895, https://nsojournals.onlinelibrary.wiley.com/doi/pdf/10.1111/ecog.04895, https://nsojournals.onlinelibrary.wiley.com/doi/abs/10.1111/ecog.04895. Benito B (2024). distantia: Toolset Time Series Dissimilarity Analysis. R package version 2.0.0, https://blasbenito.github.io/distantia/.","code":"@Article{,   author = {Blas M. Benito and H. John B. Birks},   title = {distantia: an open-source toolset to quantify dissimilarity between multivariate ecological time-series},   journal = {Ecography},   volume = {43},   number = {5},   pages = {660-667},   doi = {https://doi.org/10.1111/ecog.04895},   url = {https://nsojournals.onlinelibrary.wiley.com/doi/abs/10.1111/ecog.04895},   eprint = {https://nsojournals.onlinelibrary.wiley.com/doi/pdf/10.1111/ecog.04895},   year = {2020}, } @Manual{,   title = {distantia: A Toolset for Time Series Dissimilarity Analysis},   author = {Blas M. Benito},   year = {2024},   note = {R package version 2.0.0},   url = {https://blasbenito.github.io/distantia/}, }"},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":null,"dir":"Reference","previous_headings":"","what":"Flight Path Time Series of Albatrosses in The Pacific — albatross","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"Data frame id, time, latitude, longitude, ground speed, heading, (uncalibrated) temperature flight paths 5 individuals Waved Albatross (Phoebastria irrorata) captured via GPS summer 2008. Please visit data source (DOI: https://doi.org/10.5441/001/1.3hp3s250) learn dataset.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"","code":"data(albatross)"},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"","code":"#load as tsl #scale al variables #aggregate to daily resolution #align all time series to same temporal span tsl <- tsl_initialize(   x = albatross,   id_column = \"id\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale   ) |>   tsl_aggregate(     new_time = \"days\"   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 5     ) }"},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"Computes cumulative sum distances consecutive samples univariate multivariate time series. NA values removed using function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"","code":"auto_distance_cpp(x, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"x (required, numeric matrix) univariate multivariate time series. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"","code":"#simulate a time series x <- zoo_simulate()  #compute auto distance auto_distance_cpp(   x = x,   distance = \"euclidean\"   ) #> [1] 10.61317"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"Sum auto-distances two time series. function switches auto_sum_full_cpp() auto_sum_path_cpp() depending value argument ignore_blocks.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"","code":"auto_sum_cpp(x, y, path, distance = \"euclidean\", ignore_blocks = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) number columns 'x'. path (required, data frame) output cost_path_orthogonal_cpp(). distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\" ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  nrow(cost_path) #> [1] 199  #remove blocks from least-cost path cost_path_trimmed <- cost_path_trim_cpp(   path = cost_path )  nrow(cost_path_trimmed) #> [1] 29  #auto sum auto_sum_cpp(   x = x,   y = y,   path = cost_path_trimmed,   distance = \"euclidean\",   ignore_blocks = FALSE ) #> [1] 17.12273"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"Computes cumulative auto sum autodistances two time series. output value used normalization factor computing dissimilarity scores.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"","code":"auto_sum_full_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #auto sum auto_sum_full_cpp(   x = x,   y = y,   distance = \"euclidean\" ) #> [1] 17.12273"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"Computes cumulative auto sum auto-distances two time series coordinates trimmed least cost path. output value used normalization factor computing dissimilarity scores.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"","code":"auto_sum_path_cpp(x, y, path, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns 'x'. path (required, data frame) least-cost path produced cost_path_orthogonal_cpp(). Default: NULL distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  nrow(cost_path) #> [1] 199  #remove blocks from least-cost path cost_path_trimmed <- cost_path_trim_cpp(   path = cost_path )  nrow(cost_path_trimmed) #> [1] 29  #auto sum auto_sum_path_cpp(   x = x,   y = y,   path = cost_path_trimmed,   distance = \"euclidean\" ) #> [1] 5.289003"},{"path":"https://blasbenito.github.io/distantia/reference/cities_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinates of 100 Major Cities — cities_coordinates","title":"Coordinates of 100 Major Cities — cities_coordinates","text":"City coordinates dataset cities_temperature.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cities_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinates of 100 Major Cities — cities_coordinates","text":"","code":"data(cities_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/cities_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coordinates of 100 Major Cities — cities_coordinates","text":"sf data frame 5 columns 100 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":null,"dir":"Reference","previous_headings":"","what":"Long Term Monthly Temperature in 100 Major Cities — cities_temperature","title":"Long Term Monthly Temperature in 100 Major Cities — cities_temperature","text":"Average temperatures 1975 2010 100 major cities world. Source. Site coordinates dataset cities_coordinates.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Long Term Monthly Temperature in 100 Major Cities — cities_temperature","text":"","code":"data(cities_temperature)"},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Long Term Monthly Temperature in 100 Major Cities — cities_temperature","text":"data frame 3 columns 52100 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Long Term Monthly Temperature in 100 Major Cities — cities_temperature","text":"","code":"data(\"cities_temperature\")  #to time series list cities <- tsl_initialize(   x = cities_temperature,   id_column = \"city\",   time_column = \"date\" )  #time series plot if(interactive()){   #only four cities are shown  tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:4     ),   guide = FALSE   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_cpp","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_cpp","text":"Computes least cost matrix distance matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_cpp","text":"","code":"cost_matrix_cpp(dist_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_cpp","text":"dist_matrix (required, distance matrix). Output distance_matrix_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_cpp","text":"Least cost matrix.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diag_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diag_cpp","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diag_cpp","text":"Computes least cost matrix distance matrix. Considers diagonals computation least-costs.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diag_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diag_cpp","text":"","code":"cost_matrix_diag_cpp(dist_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diag_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diag_cpp","text":"dist_matrix (required, distance matrix). Square distance matrix, output distance_matrix_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diag_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diag_cpp","text":"Least cost matrix.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_weighted_diag_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_weighted_diag_cpp","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_weighted_diag_cpp","text":"Computes least cost matrix distance matrix. Weights diagonals factor 1.414214 respect orthogonal paths.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_weighted_diag_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_weighted_diag_cpp","text":"","code":"cost_matrix_weighted_diag_cpp(dist_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_weighted_diag_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_weighted_diag_cpp","text":"dist_matrix (required, distance matrix). Distance matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_weighted_diag_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_weighted_diag_cpp","text":"Least cost matrix.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Least Cost Path within a Least Cost Matrix — cost_path_cpp","title":"Find Least Cost Path within a Least Cost Matrix — cost_path_cpp","text":"Least cost path two time series x y. NA values must removed x y using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Least Cost Path within a Least Cost Matrix — cost_path_cpp","text":"","code":"cost_path_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Least Cost Path within a Least Cost Matrix — cost_path_cpp","text":"x (required, numeric matrix) multivariate time series. y (required, numeric matrix) multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted y factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Least Cost Path within a Least Cost Matrix — cost_path_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Find Orthogonal And Diagonal Least Cost Path within a Least Cost Matrix — cost_path_diagonal_cpp","title":"(C++) Find Orthogonal And Diagonal Least Cost Path within a Least Cost Matrix — cost_path_diagonal_cpp","text":"Computes least cost matrix distance matrix. Considers diagonals computation least-costs. case ties, diagonals favored.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Find Orthogonal And Diagonal Least Cost Path within a Least Cost Matrix — cost_path_diagonal_cpp","text":"","code":"cost_path_diagonal_cpp(dist_matrix, cost_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Find Orthogonal And Diagonal Least Cost Path within a Least Cost Matrix — cost_path_diagonal_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Cost matrix generated dist_matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Find Orthogonal And Diagonal Least Cost Path within a Least Cost Matrix — cost_path_diagonal_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Find Orthogonal And Diagonal Least Cost Path within a Least Cost Matrix — cost_path_diagonal_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_diagonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2    99  99 0.7648549 65.0343113 #> 3    98  98 0.6320462 63.5887700 #> 4    97  97 0.6777913 62.5184229 #> 5    96  96 0.6215667 61.2049937 #> 6    95  95 0.5904734 60.0198369 #> 7    94  94 0.5674837 58.8738118 #> 8    93  93 0.5636236 57.9576445 #> 9    92  92 0.5285802 56.9145449 #> 10   91  92 0.5443292 56.3859647 #> 11   90  92 0.4135332 55.8416355 #> 12   89  92 0.5039765 55.4281023 #> 13   88  92 0.5108834 54.9241258 #> 14   87  92 0.5230073 54.4132424 #> 15   86  91 0.5478903 53.8710065 #> 16   85  90 0.5387814 52.8671347 #> 17   84  89 0.6283737 51.9734536 #> 18   83  88 0.5491395 50.7950872 #> 19   82  87 0.5427198 50.1626329 #> 20   81  86 0.4458249 49.5607198 #> 21   80  86 0.4561570 49.1148949 #> 22   79  86 0.6058592 48.6587378 #> 23   78  85 0.5548788 48.0424610 #> 24   77  85 0.5108495 47.4875822 #> 25   76  84 0.5278081 46.9328961 #> 26   75  83 0.2749964 46.1840836 #> 27   74  82 0.3362982 45.8501683 #> 28   73  82 0.2755243 45.5138701 #> 29   72  82 0.2580913 45.2383457 #> 30   71  82 0.2466212 44.9802545 #> 31   70  82 0.2101682 44.7336333 #> 32   69  82 0.2373155 44.5234652 #> 33   68  82 0.2261700 44.2861497 #> 34   67  82 0.2031087 44.0599797 #> 35   66  82 0.1502621 43.8568710 #> 36   65  82 0.1305400 43.7066088 #> 37   64  82 0.1506714 43.5760688 #> 38   63  82 0.1762334 43.4253974 #> 39   62  82 0.1629928 43.2491640 #> 40   61  82 0.1612566 43.0861712 #> 41   60  82 0.1526246 42.9249147 #> 42   59  82 0.1434672 42.7722900 #> 43   58  82 0.1726055 42.6288228 #> 44   57  82 0.1296162 42.4562173 #> 45   56  82 0.2352345 42.3266012 #> 46   55  82 0.1600529 42.0913666 #> 47   54  82 0.1674942 41.9313137 #> 48   53  82 0.1540136 41.7638195 #> 49   52  82 0.1344377 41.6098058 #> 50   51  82 0.1418574 41.4753681 #> 51   50  82 0.1646179 41.3335107 #> 52   49  82 0.1936073 41.1688929 #> 53   48  82 0.1593103 40.9752856 #> 54   47  81 0.2380341 40.7828032 #> 55   46  80 0.2603981 40.3623305 #> 56   45  79 0.2337894 39.9922269 #> 57   44  78 0.2522322 39.5952233 #> 58   43  77 0.1743998 39.1583134 #> 59   42  76 0.2114731 38.9504137 #> 60   41  75 0.3089992 38.6840963 #> 61   40  74 0.3313175 38.1237119 #> 62   39  73 0.3631816 37.5619956 #> 63   38  72 0.3045351 36.9818444 #> 64   37  71 0.2396572 36.4507223 #> 65   36  70 0.1722297 36.0914306 #> 66   35  69 0.1440328 35.8244977 #> 67   35  68 0.1674252 35.6804649 #> 68   35  67 0.1786501 35.5130397 #> 69   35  66 0.1855774 35.3343896 #> 70   34  65 0.2061691 35.1081678 #> 71   33  64 0.1756490 34.7420115 #> 72   32  63 0.2995759 34.5006863 #> 73   31  62 0.2687903 33.9213091 #> 74   30  61 0.3267435 33.4793163 #> 75   29  60 0.2318210 32.8600078 #> 76   28  59 0.2170579 32.4780512 #> 77   28  58 0.2000520 32.2609933 #> 78   28  57 0.1736652 32.0609413 #> 79   28  56 0.2224500 31.8872762 #> 80   28  55 0.2671070 31.6648262 #> 81   28  54 0.2832049 31.3977192 #> 82   28  53 0.2639180 31.1145142 #> 83   28  52 0.2259958 30.8505963 #> 84   28  51 0.2121769 30.6246004 #> 85   28  50 0.1981827 30.4124235 #> 86   28  49 0.2011492 30.2142408 #> 87   28  48 0.2321620 30.0130917 #> 88   28  47 0.2843064 29.7809297 #> 89   28  46 0.2752997 29.4966233 #> 90   28  45 0.2724771 29.2213236 #> 91   28  44 0.2632239 28.9488465 #> 92   28  43 0.2831713 28.6856227 #> 93   28  42 0.3172355 28.4024514 #> 94   28  41 0.3024352 28.0852159 #> 95   28  40 0.3443351 27.7827807 #> 96   28  39 0.2905489 27.4384455 #> 97   28  38 0.3372605 27.1478966 #> 98   28  37 0.3560955 26.8106361 #> 99   28  36 0.3602208 26.4545406 #> 100  28  35 0.3714868 26.0943198 #> 101  28  34 0.3744984 25.7228330 #> 102  28  33 0.4085635 25.3483346 #> 103  28  32 0.3766831 24.9397711 #> 104  28  31 0.3424833 24.5630880 #> 105  28  30 0.3805911 24.2206047 #> 106  28  29 0.3524106 23.8400136 #> 107  28  28 0.3770721 23.4876031 #> 108  28  27 0.3917478 23.1105309 #> 109  28  26 0.4113225 22.7187831 #> 110  28  25 0.4055345 22.3074607 #> 111  28  24 0.4614801 21.9019262 #> 112  28  23 0.4232874 21.4404461 #> 113  28  22 0.3757436 21.0171587 #> 114  28  21 0.3505313 20.6414151 #> 115  28  20 0.3495128 20.2908837 #> 116  28  19 0.3387319 19.9413709 #> 117  28  18 0.3872206 19.6026390 #> 118  27  17 0.4057451 19.1673382 #> 119  27  16 0.3575246 18.7615932 #> 120  26  15 0.4855975 18.3344463 #> 121  26  14 0.4861830 17.8488487 #> 122  25  13 0.4680005 17.2726716 #> 123  24  12 0.5080264 16.5225224 #> 124  23  11 0.5276057 15.6622155 #> 125  22  10 0.4691932 14.6882277 #> 126  21  10 0.4937712 14.2190345 #> 127  20  10 0.5184232 13.7252633 #> 128  19  10 0.5520151 13.2068401 #> 129  18  10 0.5284255 12.6548250 #> 130  17  10 0.5819680 12.1263995 #> 131  16  10 0.4882528 11.5444315 #> 132  15  10 0.5451257 11.0561787 #> 133  14  10 0.5789974 10.5110529 #> 134  13   9 0.5616895  9.8869043 #> 135  12   9 0.5379617  9.3252149 #> 136  11   8 0.5804374  8.7376186 #> 137  10   7 0.5918210  8.0269721 #> 138   9   6 0.5530716  7.1489267 #> 139   8   5 0.5931723  6.2663526 #> 140   7   4 0.5099716  5.2771827 #> 141   6   3 0.5493263  4.3870978 #> 142   5   2 0.5387187  3.3114509 #> 143   4   1 0.5374539  2.3329749 #> 144   3   1 0.5176733  1.7955210 #> 145   2   1 0.6144512  1.2778477 #> 146   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Find Orthogonal Least Cost Path within a Least Cost Matrix — cost_path_orthogonal_cpp","title":"(C++) Find Orthogonal Least Cost Path within a Least Cost Matrix — cost_path_orthogonal_cpp","text":"Computes orthogonal least-cost path within cost matrix. steps within least-cost path either moves x y direction, never diagonally.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Find Orthogonal Least Cost Path within a Least Cost Matrix — cost_path_orthogonal_cpp","text":"","code":"cost_path_orthogonal_cpp(dist_matrix, cost_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Find Orthogonal Least Cost Path within a Least Cost Matrix — cost_path_orthogonal_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Cost matrix generated dist_matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Find Orthogonal Least Cost Path within a Least Cost Matrix — cost_path_orthogonal_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Find Orthogonal Least Cost Path within a Least Cost Matrix — cost_path_orthogonal_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2   100  99 0.7161694 65.5663746 #> 3   100  98 0.6821893 64.8502052 #> 4   100  97 0.6874341 64.1680159 #> 5   100  96 0.6409757 63.4805819 #> 6   100  95 0.6222391 62.8396061 #> 7   100  94 0.5760614 62.2173671 #> 8   100  93 0.5696817 61.6413056 #> 9   100  92 0.5130193 61.0716239 #> 10   99  92 0.5365579 60.5586046 #> 11   98  92 0.4842729 60.0220467 #> 12   97  92 0.5063508 59.5377738 #> 13   96  92 0.5065797 59.0314230 #> 14   95  92 0.5285806 58.5248433 #> 15   94  92 0.5537613 57.9962626 #> 16   93  92 0.5279564 57.4425013 #> 17   92  92 0.5285802 56.9145449 #> 18   91  92 0.5443292 56.3859647 #> 19   90  92 0.4135332 55.8416355 #> 20   89  92 0.5039765 55.4281023 #> 21   88  92 0.5108834 54.9241258 #> 22   87  92 0.5230073 54.4132424 #> 23   86  92 0.5245394 53.8902351 #> 24   85  92 0.5034589 53.3656958 #> 25   84  92 0.5519456 52.8622369 #> 26   83  92 0.5296750 52.3102913 #> 27   82  92 0.5044439 51.7806162 #> 28   81  92 0.4569037 51.2761724 #> 29   80  92 0.4553854 50.8192686 #> 30   79  92 0.5364900 50.3638833 #> 31   78  92 0.4961084 49.8273933 #> 32   77  92 0.4352922 49.3312849 #> 33   76  92 0.4666304 48.8959928 #> 34   75  92 0.4616177 48.4293624 #> 35   74  92 0.3890522 47.9677447 #> 36   74  91 0.3405644 47.5786924 #> 37   74  90 0.3108773 47.2381280 #> 38   74  89 0.2788660 46.9272508 #> 39   74  88 0.2210212 46.6483848 #> 40   74  87 0.2117861 46.4273636 #> 41   73  87 0.1793031 46.2155775 #> 42   72  87 0.1897519 46.0362744 #> 43   71  87 0.1806690 45.8465225 #> 44   70  87 0.1951448 45.6658535 #> 45   70  86 0.1922087 45.4707087 #> 46   70  85 0.2126529 45.2785000 #> 47   70  84 0.2013065 45.0658471 #> 48   69  84 0.2369120 44.8645406 #> 49   68  84 0.2388685 44.6276286 #> 50   67  84 0.2120945 44.3887601 #> 51   66  84 0.1740653 44.1766656 #> 52   65  84 0.1460344 44.0026003 #> 53   64  84 0.1752535 43.8565659 #> 54   63  84 0.1988074 43.6813124 #> 55   62  84 0.1804145 43.4825050 #> 56   61  84 0.1764448 43.3020905 #> 57   60  84 0.1534586 43.1256457 #> 58   59  84 0.1526458 42.9721871 #> 59   58  84 0.1617319 42.8195412 #> 60   57  84 0.1282278 42.6578093 #> 61   56  84 0.2262139 42.5295815 #> 62   55  84 0.1591592 42.3033677 #> 63   54  84 0.1537377 42.1442085 #> 64   53  84 0.1346854 41.9904708 #> 65   52  84 0.1251040 41.8557854 #> 66   52  83 0.1411702 41.7306814 #> 67   51  83 0.1141431 41.5895112 #> 68   51  82 0.1418574 41.4753681 #> 69   50  82 0.1646179 41.3335107 #> 70   49  82 0.1936073 41.1688929 #> 71   48  82 0.1593103 40.9752856 #> 72   47  82 0.1801237 40.8159754 #> 73   46  82 0.1858304 40.6358517 #> 74   45  82 0.2078866 40.4500213 #> 75   44  82 0.2071551 40.2421347 #> 76   43  82 0.1588663 40.0349796 #> 77   43  81 0.1782292 39.8761133 #> 78   43  80 0.1676922 39.6978841 #> 79   43  79 0.1872008 39.5301919 #> 80   43  78 0.1846777 39.3429910 #> 81   43  77 0.1743998 39.1583134 #> 82   43  76 0.1675317 38.9839135 #> 83   43  75 0.2037025 38.8163818 #> 84   43  74 0.2177045 38.6126793 #> 85   43  73 0.2479942 38.3949749 #> 86   43  72 0.2327807 38.1469807 #> 87   42  72 0.2238950 37.9142000 #> 88   41  72 0.2529557 37.6903050 #> 89   40  72 0.2385352 37.4373493 #> 90   39  72 0.2314280 37.1988140 #> 91   39  71 0.2857965 36.9673861 #> 92   39  70 0.2457342 36.6815896 #> 93   38  70 0.2247903 36.4358554 #> 94   37  70 0.1502859 36.2110651 #> 95   37  69 0.1795865 36.0607792 #> 96   37  68 0.1642340 35.8811927 #> 97   37  67 0.1741271 35.7169587 #> 98   37  66 0.1624438 35.5428316 #> 99   37  65 0.1691243 35.3803878 #> 100  36  65 0.1518868 35.2112635 #> 101  36  64 0.1357962 35.0593767 #> 102  36  63 0.1166018 34.9235804 #> 103  36  62 0.1149776 34.8069786 #> 104  36  61 0.1339489 34.6920010 #> 105  35  61 0.1574512 34.5580521 #> 106  34  61 0.2326869 34.4006009 #> 107  33  61 0.2148496 34.1679141 #> 108  32  61 0.3005456 33.9530645 #> 109  31  61 0.2575778 33.6525189 #> 110  31  60 0.2423684 33.3949411 #> 111  30  60 0.2925649 33.1525727 #> 112  29  60 0.2318210 32.8600078 #> 113  29  59 0.2251552 32.6281867 #> 114  29  58 0.2169255 32.4030315 #> 115  29  57 0.1831173 32.1861061 #> 116  29  56 0.2093290 32.0029887 #> 117  29  55 0.2522001 31.7936598 #> 118  29  54 0.2679934 31.5414597 #> 119  29  53 0.2475634 31.2734662 #> 120  29  52 0.2070829 31.0259028 #> 121  29  51 0.2090501 30.8188199 #> 122  29  50 0.1973464 30.6097699 #> 123  28  50 0.1981827 30.4124235 #> 124  28  49 0.2011492 30.2142408 #> 125  28  48 0.2321620 30.0130917 #> 126  28  47 0.2843064 29.7809297 #> 127  28  46 0.2752997 29.4966233 #> 128  28  45 0.2724771 29.2213236 #> 129  28  44 0.2632239 28.9488465 #> 130  28  43 0.2831713 28.6856227 #> 131  28  42 0.3172355 28.4024514 #> 132  28  41 0.3024352 28.0852159 #> 133  28  40 0.3443351 27.7827807 #> 134  28  39 0.2905489 27.4384455 #> 135  28  38 0.3372605 27.1478966 #> 136  28  37 0.3560955 26.8106361 #> 137  28  36 0.3602208 26.4545406 #> 138  28  35 0.3714868 26.0943198 #> 139  28  34 0.3744984 25.7228330 #> 140  28  33 0.4085635 25.3483346 #> 141  28  32 0.3766831 24.9397711 #> 142  28  31 0.3424833 24.5630880 #> 143  28  30 0.3805911 24.2206047 #> 144  28  29 0.3524106 23.8400136 #> 145  28  28 0.3770721 23.4876031 #> 146  28  27 0.3917478 23.1105309 #> 147  28  26 0.4113225 22.7187831 #> 148  28  25 0.4055345 22.3074607 #> 149  28  24 0.4614801 21.9019262 #> 150  28  23 0.4232874 21.4404461 #> 151  28  22 0.3757436 21.0171587 #> 152  28  21 0.3505313 20.6414151 #> 153  28  20 0.3495128 20.2908837 #> 154  28  19 0.3387319 19.9413709 #> 155  28  18 0.3872206 19.6026390 #> 156  28  17 0.3471985 19.2154184 #> 157  28  16 0.3018819 18.8682199 #> 158  28  15 0.3426634 18.5663380 #> 159  28  14 0.3568688 18.2236746 #> 160  28  13 0.3037264 17.8668058 #> 161  28  12 0.3423200 17.5630794 #> 162  28  11 0.3280436 17.2207594 #> 163  28  10 0.3383397 16.8927157 #> 164  27  10 0.3358649 16.5543760 #> 165  26  10 0.3165562 16.2185111 #> 166  25  10 0.3677074 15.9019548 #> 167  24  10 0.3996376 15.5342474 #> 168  23  10 0.4463821 15.1346098 #> 169  22  10 0.4691932 14.6882277 #> 170  21  10 0.4937712 14.2190345 #> 171  20  10 0.5184232 13.7252633 #> 172  19  10 0.5520151 13.2068401 #> 173  18  10 0.5284255 12.6548250 #> 174  17  10 0.5819680 12.1263995 #> 175  16  10 0.4882528 11.5444315 #> 176  15  10 0.5451257 11.0561787 #> 177  14  10 0.5789974 10.5110529 #> 178  13  10 0.5093922  9.9320556 #> 179  12  10 0.4821676  9.4226633 #> 180  11  10 0.4692307  8.9404957 #> 181  10  10 0.4247215  8.4712650 #> 182   9  10 0.4053145  8.0465435 #> 183   8  10 0.3998707  7.6412291 #> 184   7  10 0.3402029  7.2413584 #> 185   7   9 0.3591259  6.9011555 #> 186   6   9 0.3618647  6.5420296 #> 187   5   9 0.3975981  6.1801649 #> 188   4   9 0.3812121  5.7825668 #> 189   3   9 0.3950188  5.4013548 #> 190   3   8 0.4043094  5.0063360 #> 191   3   7 0.4232290  4.6020265 #> 192   3   6 0.4405291  4.1787976 #> 193   3   5 0.4604920  3.7382684 #> 194   3   4 0.4791459  3.2777764 #> 195   3   3 0.5131015  2.7986305 #> 196   3   2 0.4900080  2.2855290 #> 197   3   1 0.5176733  1.7955210 #> 198   2   1 0.6144512  1.2778477 #> 199   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"Computes least-cost matrix distance matrix. version differs cost_path_orthogonal_cpp() way solves ties. case tie, cost_path_orthogonal_cpp() uses first neighbor satisfying minimum distance condition, function selects neighbor changes axis movement within least-cost matrix. function used anywhere within package, left future reference.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"","code":"cost_path_slotting_cpp(dist_matrix, cost_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Least-cost matrix generated dist_matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_slotting_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2   100  99 0.7161694 65.5663746 #> 3   100  98 0.6821893 64.8502052 #> 4   100  97 0.6874341 64.1680159 #> 5   100  96 0.6409757 63.4805819 #> 6   100  95 0.6222391 62.8396061 #> 7   100  94 0.5760614 62.2173671 #> 8   100  93 0.5696817 61.6413056 #> 9   100  92 0.5130193 61.0716239 #> 10   99  92 0.5365579 60.5586046 #> 11   98  92 0.4842729 60.0220467 #> 12   97  92 0.5063508 59.5377738 #> 13   96  92 0.5065797 59.0314230 #> 14   95  92 0.5285806 58.5248433 #> 15   94  92 0.5537613 57.9962626 #> 16   93  92 0.5279564 57.4425013 #> 17   92  92 0.5285802 56.9145449 #> 18   91  92 0.5443292 56.3859647 #> 19   90  92 0.4135332 55.8416355 #> 20   89  92 0.5039765 55.4281023 #> 21   88  92 0.5108834 54.9241258 #> 22   87  92 0.5230073 54.4132424 #> 23   86  92 0.5245394 53.8902351 #> 24   85  92 0.5034589 53.3656958 #> 25   84  92 0.5519456 52.8622369 #> 26   83  92 0.5296750 52.3102913 #> 27   82  92 0.5044439 51.7806162 #> 28   81  92 0.4569037 51.2761724 #> 29   80  92 0.4553854 50.8192686 #> 30   79  92 0.5364900 50.3638833 #> 31   78  92 0.4961084 49.8273933 #> 32   77  92 0.4352922 49.3312849 #> 33   76  92 0.4666304 48.8959928 #> 34   75  92 0.4616177 48.4293624 #> 35   74  92 0.3890522 47.9677447 #> 36   74  91 0.3405644 47.5786924 #> 37   74  90 0.3108773 47.2381280 #> 38   74  89 0.2788660 46.9272508 #> 39   74  88 0.2210212 46.6483848 #> 40   74  87 0.2117861 46.4273636 #> 41   73  87 0.1793031 46.2155775 #> 42   72  87 0.1897519 46.0362744 #> 43   71  87 0.1806690 45.8465225 #> 44   70  87 0.1951448 45.6658535 #> 45   70  86 0.1922087 45.4707087 #> 46   70  85 0.2126529 45.2785000 #> 47   70  84 0.2013065 45.0658471 #> 48   69  84 0.2369120 44.8645406 #> 49   68  84 0.2388685 44.6276286 #> 50   67  84 0.2120945 44.3887601 #> 51   66  84 0.1740653 44.1766656 #> 52   65  84 0.1460344 44.0026003 #> 53   64  84 0.1752535 43.8565659 #> 54   63  84 0.1988074 43.6813124 #> 55   62  84 0.1804145 43.4825050 #> 56   61  84 0.1764448 43.3020905 #> 57   60  84 0.1534586 43.1256457 #> 58   59  84 0.1526458 42.9721871 #> 59   58  84 0.1617319 42.8195412 #> 60   57  84 0.1282278 42.6578093 #> 61   56  84 0.2262139 42.5295815 #> 62   55  84 0.1591592 42.3033677 #> 63   54  84 0.1537377 42.1442085 #> 64   53  84 0.1346854 41.9904708 #> 65   52  84 0.1251040 41.8557854 #> 66   52  83 0.1411702 41.7306814 #> 67   51  83 0.1141431 41.5895112 #> 68   51  82 0.1418574 41.4753681 #> 69   50  82 0.1646179 41.3335107 #> 70   49  82 0.1936073 41.1688929 #> 71   48  82 0.1593103 40.9752856 #> 72   47  82 0.1801237 40.8159754 #> 73   46  82 0.1858304 40.6358517 #> 74   45  82 0.2078866 40.4500213 #> 75   44  82 0.2071551 40.2421347 #> 76   43  82 0.1588663 40.0349796 #> 77   43  81 0.1782292 39.8761133 #> 78   43  80 0.1676922 39.6978841 #> 79   43  79 0.1872008 39.5301919 #> 80   43  78 0.1846777 39.3429910 #> 81   43  77 0.1743998 39.1583134 #> 82   43  76 0.1675317 38.9839135 #> 83   43  75 0.2037025 38.8163818 #> 84   43  74 0.2177045 38.6126793 #> 85   43  73 0.2479942 38.3949749 #> 86   43  72 0.2327807 38.1469807 #> 87   42  72 0.2238950 37.9142000 #> 88   41  72 0.2529557 37.6903050 #> 89   40  72 0.2385352 37.4373493 #> 90   39  72 0.2314280 37.1988140 #> 91   39  71 0.2857965 36.9673861 #> 92   39  70 0.2457342 36.6815896 #> 93   38  70 0.2247903 36.4358554 #> 94   37  70 0.1502859 36.2110651 #> 95   37  69 0.1795865 36.0607792 #> 96   37  68 0.1642340 35.8811927 #> 97   37  67 0.1741271 35.7169587 #> 98   37  66 0.1624438 35.5428316 #> 99   37  65 0.1691243 35.3803878 #> 100  36  65 0.1518868 35.2112635 #> 101  36  64 0.1357962 35.0593767 #> 102  36  63 0.1166018 34.9235804 #> 103  36  62 0.1149776 34.8069786 #> 104  36  61 0.1339489 34.6920010 #> 105  35  61 0.1574512 34.5580521 #> 106  34  61 0.2326869 34.4006009 #> 107  33  61 0.2148496 34.1679141 #> 108  32  61 0.3005456 33.9530645 #> 109  31  61 0.2575778 33.6525189 #> 110  31  60 0.2423684 33.3949411 #> 111  30  60 0.2925649 33.1525727 #> 112  29  60 0.2318210 32.8600078 #> 113  29  59 0.2251552 32.6281867 #> 114  29  58 0.2169255 32.4030315 #> 115  29  57 0.1831173 32.1861061 #> 116  29  56 0.2093290 32.0029887 #> 117  29  55 0.2522001 31.7936598 #> 118  29  54 0.2679934 31.5414597 #> 119  29  53 0.2475634 31.2734662 #> 120  29  52 0.2070829 31.0259028 #> 121  29  51 0.2090501 30.8188199 #> 122  29  50 0.1973464 30.6097699 #> 123  28  50 0.1981827 30.4124235 #> 124  28  49 0.2011492 30.2142408 #> 125  28  48 0.2321620 30.0130917 #> 126  28  47 0.2843064 29.7809297 #> 127  28  46 0.2752997 29.4966233 #> 128  28  45 0.2724771 29.2213236 #> 129  28  44 0.2632239 28.9488465 #> 130  28  43 0.2831713 28.6856227 #> 131  28  42 0.3172355 28.4024514 #> 132  28  41 0.3024352 28.0852159 #> 133  28  40 0.3443351 27.7827807 #> 134  28  39 0.2905489 27.4384455 #> 135  28  38 0.3372605 27.1478966 #> 136  28  37 0.3560955 26.8106361 #> 137  28  36 0.3602208 26.4545406 #> 138  28  35 0.3714868 26.0943198 #> 139  28  34 0.3744984 25.7228330 #> 140  28  33 0.4085635 25.3483346 #> 141  28  32 0.3766831 24.9397711 #> 142  28  31 0.3424833 24.5630880 #> 143  28  30 0.3805911 24.2206047 #> 144  28  29 0.3524106 23.8400136 #> 145  28  28 0.3770721 23.4876031 #> 146  28  27 0.3917478 23.1105309 #> 147  28  26 0.4113225 22.7187831 #> 148  28  25 0.4055345 22.3074607 #> 149  28  24 0.4614801 21.9019262 #> 150  28  23 0.4232874 21.4404461 #> 151  28  22 0.3757436 21.0171587 #> 152  28  21 0.3505313 20.6414151 #> 153  28  20 0.3495128 20.2908837 #> 154  28  19 0.3387319 19.9413709 #> 155  28  18 0.3872206 19.6026390 #> 156  28  17 0.3471985 19.2154184 #> 157  28  16 0.3018819 18.8682199 #> 158  28  15 0.3426634 18.5663380 #> 159  28  14 0.3568688 18.2236746 #> 160  28  13 0.3037264 17.8668058 #> 161  28  12 0.3423200 17.5630794 #> 162  28  11 0.3280436 17.2207594 #> 163  28  10 0.3383397 16.8927157 #> 164  27  10 0.3358649 16.5543760 #> 165  26  10 0.3165562 16.2185111 #> 166  25  10 0.3677074 15.9019548 #> 167  24  10 0.3996376 15.5342474 #> 168  23  10 0.4463821 15.1346098 #> 169  22  10 0.4691932 14.6882277 #> 170  21  10 0.4937712 14.2190345 #> 171  20  10 0.5184232 13.7252633 #> 172  19  10 0.5520151 13.2068401 #> 173  18  10 0.5284255 12.6548250 #> 174  17  10 0.5819680 12.1263995 #> 175  16  10 0.4882528 11.5444315 #> 176  15  10 0.5451257 11.0561787 #> 177  14  10 0.5789974 10.5110529 #> 178  13  10 0.5093922  9.9320556 #> 179  12  10 0.4821676  9.4226633 #> 180  11  10 0.4692307  8.9404957 #> 181  10  10 0.4247215  8.4712650 #> 182   9  10 0.4053145  8.0465435 #> 183   8  10 0.3998707  7.6412291 #> 184   7  10 0.3402029  7.2413584 #> 185   7   9 0.3591259  6.9011555 #> 186   6   9 0.3618647  6.5420296 #> 187   5   9 0.3975981  6.1801649 #> 188   4   9 0.3812121  5.7825668 #> 189   3   9 0.3950188  5.4013548 #> 190   3   8 0.4043094  5.0063360 #> 191   3   7 0.4232290  4.6020265 #> 192   3   6 0.4405291  4.1787976 #> 193   3   5 0.4604920  3.7382684 #> 194   3   4 0.4791459  3.2777764 #> 195   3   3 0.5131015  2.7986305 #> 196   3   2 0.4900080  2.2855290 #> 197   3   1 0.5176733  1.7955210 #> 198   2   1 0.6144512  1.2778477 #> 199   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"(C++) Sum Distances Least Cost Path","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"","code":"cost_path_sum_cpp(path)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"path (required, data frame) least-cost path produced cost_path_orthogonal_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_slotting_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path_sum_cpp(   path = cost_path   ) #> [1] 132.5197"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"(C++) Remove Blocks Least Cost Path","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"","code":"cost_path_trim_cpp(path)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"path (required, data frame) least-cost path produced cost_path_orthogonal_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_slotting_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  nrow(cost_path) #> [1] 199  #remove blocks from least-cost path cost_path_trimmed <- cost_path_trim_cpp(   path = cost_path )  nrow(cost_path_trimmed) #> [1] 29"},{"path":"https://blasbenito.github.io/distantia/reference/covid_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"County Coordinates of the Covid Prevalence Dataset — covid_coordinates","title":"County Coordinates of the Covid Prevalence Dataset — covid_coordinates","text":"County Coordinates Covid Prevalence Dataset","code":""},{"path":"https://blasbenito.github.io/distantia/reference/covid_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"County Coordinates of the Covid Prevalence Dataset — covid_coordinates","text":"","code":"data(covid_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/covid_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"County Coordinates of the Covid Prevalence Dataset — covid_coordinates","text":"sf data frame 4 columns 36 rows","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series of Covid Prevalence in California Counties — covid_prevalence","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"Dataset Covid19 prevalence time series California counties 2020 2024. Source.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"","code":"data(covid_prevalence)"},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"data frame 3 columns 51048 rows","code":""},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"Site coordinates dataset covid_coordinates.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"","code":"#to time series list tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" )  #time series plot if(interactive()){   #subset to avoid margin errors  tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:4     ),   guide = FALSE   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Between Numeric Vectors — distance","title":"Distance Between Numeric Vectors — distance","text":"Computes distance two numeric binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Between Numeric Vectors — distance","text":"","code":"distance(x = NULL, y = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Between Numeric Vectors — distance","text":"x (required, numeric vector). y (required, numeric vector) length x. distance (optional, character string) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Between Numeric Vectors — distance","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Between Numeric Vectors — distance","text":"","code":"distance(   x = runif(100),   y = runif(100),   distance = \"euclidean\" ) #> [1] 4.163744"},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"Computes Canberra distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"","code":"distance_canberra_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"","code":"distance_canberra_cpp(c(0, 1, 0, 1), c(1, 1, 0, 0)) #> [1] 2"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"Computed : max(abs(x - y)). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"","code":"distance_chebyshev_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"","code":"distance_chebyshev_cpp(x = runif(100), y = runif(100)) #> [1] 0.9925474"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"Computed : xy <- x + y y. <- y / sum(y) x. <- x / sum(x) sqrt(sum(((x. - y.)^2) / (xy / sum(xy)))). handle NA values. x y zeros position, NaNs produced. Please replace zeros pseudo-zeros (.e. 0.0001) wish use distance metric.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"","code":"distance_chi_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"","code":"distance_chi_cpp(x = runif(100), y = runif(100)) #> [1] 0.8663674"},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"Computes cosine dissimilarity two numeric vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"","code":"distance_cosine_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"","code":"distance_cosine_cpp(c(0.2, 0.4, 0.5), c(0.1, 0.8, 0.2)) #> [1] 0.2103732"},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"Computed : sqrt(sum((x - y)^2). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"","code":"distance_euclidean_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"","code":"distance_euclidean_cpp(x = runif(100), y = runif(100)) #> [1] 4.067016"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"Computes Hamming distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"","code":"distance_hamming_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"","code":"distance_hamming_cpp(c(0, 1, 0, 1), c(1, 1, 0, 0)) #> [1] 2"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"Computed : sqrt(1/2 * sum((sqrt(x) - sqrt(y))^2)). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"","code":"distance_hellinger_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"","code":"distance_hellinger_cpp(x = runif(100), y = runif(100)) #> [1] 2.429643"},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"Computes Jaccard distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"","code":"distance_jaccard_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"","code":"distance_jaccard_cpp(x = c(0, 1, 0, 1), y = c(1, 1, 0, 0)) #> [1] 0.6666667"},{"path":"https://blasbenito.github.io/distantia/reference/distance_lock_step_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum of Pairwise Distances Betwee Cases in Two Aligned Time Series — distance_lock_step_cpp","title":"(C++) Sum of Pairwise Distances Betwee Cases in Two Aligned Time Series — distance_lock_step_cpp","text":"Computes lock-step sum distances two regular aligned time series. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_lock_step_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum of Pairwise Distances Betwee Cases in Two Aligned Time Series — distance_lock_step_cpp","text":"","code":"distance_lock_step_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance_lock_step_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum of Pairwise Distances Betwee Cases in Two Aligned Time Series — distance_lock_step_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns rows 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_lock_step_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum of Pairwise Distances Betwee Cases in Two Aligned Time Series — distance_lock_step_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_lock_step_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum of Pairwise Distances Betwee Cases in Two Aligned Time Series — distance_lock_step_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   irregular = FALSE   ) y <- zoo_simulate(   seed = 2,   irregular = FALSE   )  #distance matrix dist_matrix <- distance_lock_step_cpp(   x = x,   y = y,   distance = \"euclidean\" )"},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"Computed : sum(abs(x - y)). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"","code":"distance_manhattan_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"","code":"distance_manhattan_cpp(x = runif(100), y = runif(100)) #> [1] 32.87435"},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"Computes distance matrix rows two matrices y x representing regular irregular time series number columns. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"","code":"distance_matrix_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )"},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"Computes Russell-Rao distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"","code":"distance_russelrao_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"x (required, numeric). Binary vector 1s 0s. y (required, numeric) Binary vector 1s 0s length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"","code":"distance_russelrao_cpp(c(0, 1, 0, 1), c(1, 1, 0, 0)) #> [1] 0.5"},{"path":"https://blasbenito.github.io/distantia/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Methods — distances","title":"Distance Methods — distances","text":"Data frame names, abbreviations, expressions distance metrics implemented package.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Methods — distances","text":"","code":"data(distances)"},{"path":"https://blasbenito.github.io/distantia/reference/distances.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distance Methods — distances","text":"data frame 5 columns 10 rows","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia-package.html","id":null,"dir":"Reference","previous_headings":"","what":"distantia: A Toolset for Time Series Dissimilarity Analysis — distantia-package","title":"distantia: A Toolset for Time Series Dissimilarity Analysis — distantia-package","text":"Fast C++ implementation Dynamic Time Warping time series dissimilarity analysis, applications environmental monitoring sensor data analysis, climate science, signal processing pattern recognition, financial data analysis. Built upon ideas presented Benito Birks (2020) doi:doi.org/10.1111/ecog.04895, provides tools analyzing time series varying lengths structures, including irregular multivariate time series. Key features include individual variable contribution analysis, restricted permutation tests statistical significance, imputation missing data via GAMs. Additionally, package provides ample set tools prepare manage time series data.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"distantia: A Toolset for Time Series Dissimilarity Analysis — distantia-package","text":"Blas Benito blasbenito@gmail.com","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissimilarity Analysis of Time Series Lists — distantia","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"function combines dynamic time warping lock-step comparison psi dissimilarity score permutation methods assess dissimilarity pairs time series sort data composed events ordered across relevant dimension. Dynamic Time Warping (DTW) algorithm finds optimal alignment two time series minimizing cumulative distance . identifies least-cost path distance matrix, maps points one time series another. resulting sum distances along path serves measure time series similarity. DTW disregards exact timing samples focuses order, making suitable comparing regular irregular time series different lengths, phenological data different latitudes elevations, time series various years periods, movement trajectories like migration paths. hand, lock-step method sums pairwise distances samples regular irregular time series length, preferably captured times. method alternative dynamic time warping goal assess synchronicity two time series. psi score normalizes cumulative sum distances two time series cumulative sum distances consecutive samples generate comparable dissimilarity score. two time series \\(x\\) \\(y\\) \\(D_xy\\) represents cumulative sum distances , either resulting dynamic time warping lock-step method, \\(S_xy\\) represents cumulative sum distances consecutive samples, psi score can computed two ways depending scenario: Equation 1: \\(\\psi = \\frac{D_{xy} - S_{xy}}{S_{xy}}\\) Equation 2: \\(\\psi = \\frac{D_{xy} - S_{xy}}{S_{xy}} + 1\\) $D_xy$ computed via dynamic time warping ignoring distance matrix diagonals (diagonal = FALSE), Equation 1 used. hand, $D_xy$ results lock-step method (lock_step = TRUE), dynamic time warping considering diagonals (diagonal = TRUE), Equation 2 used instead: equations, psi score zero indicates maximum similarity. Permutation methods provided help assess robustness observed psi scores direct comparison null distribution psi scores resulting randomized versions compared time series. fraction null scores smaller observed score returned p_value function output interpreted \"probability finding higher similarity (lower psi score) chance\". essence, restricted permutation useful answer question \"robust similarity two time series?\" Four different permutation methods available: \"restricted\": Separates data blocks contiguous rows, re-shuffles data points randomly within blocks, independently row column. Applied data structured blocks preserved permutations (e.g., \"seasons\", \"years\", \"decades\", etc) columns represent independent variables. \"restricted_by_row\": Separates data blocks contiguous rows, re-shuffles complete rows within blocks. method suitable cases data organized blocks described , columns represent interdependent data (e.g., rows represent percentages proportions), maintaining relationships data within row important. \"free\": Randomly re-shuffles data points across entire time series, independently row column. method useful loosely structured time series data independence assumed. data exhibits strong temporal structure, approach may lead overestimation robustness dissimilarity scores. \"free_by_row\": Randomly re-shuffles complete rows across entire time series. method useful loosely structured time series dependency columns assumed (e.g., rows represent percentages proportions). method drawbacks \"free\" method, data exhibits strong temporal structure. function allows computing dissimilarity pairs time series using different combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two dissimilarity scores pair time series, one based euclidean distances, another based manhattan distances. happens parameters. function supports progress bars generated progressr package. See examples. function also accepts parallelization setup via future::plan(), might worth large time series lists.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"","code":"distantia(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   lock_step = FALSE,   repetitions = 0L,   permutation = \"restricted_by_row\",   block_size = NULL,   seed = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE weighted (optional, logical vector) TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: TRUE ignore_blocks (optional, logical vector). TRUE, blocks consecutive least cost path coordinates trimmed avoid inflating psi dissimilarity Irrelevant diagonal = TRUE. Default: FALSE. lock_step (optional, logical vector) TRUE, time series captured times compared sample wise (dynamic time warping). Requires time series argument tsl fully aligned, return error. Default: FALSE. repetitions (optional, integer vector) number permutations compute p-value. 0, p-values computed. Otherwise, minimum 2. resolution p-values overall computation time depends number permutations. Default: 0 permutation (optional, character vector) permutation method, relevant repetitions higher zero. Valid values : \"restricted_by_row\", \"restricted\", \"free_by_row\", \"free\". Default: \"restricted_by_row\". block_size (optional, integer) Size row blocks restricted permutation test. relevant permutation methods \"restricted\" \"restricted_by_row\" repetitions higher zero. block size n indicates row can permuted within block n adjacent rows. NULL, defaults rounded one tenth shortest time series tsl. Default: NULL. seed (optional, integer) initial random seed use replicability computing p-values. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"data frame columns: x: time series name. y: time series name. distance: name distance metric. diagonal: value argument diagonal. weighted: value argument weighted. ignore_blocks: value argument ignore_blocks. lock_step: value argument lock_step. repetitions (repetitions > 0): value argument repetitions. permutation (repetitions > 0): name permutation method used compute p-values. seed (repetitions > 0): random seed used permutations. psi: psi dissimilarity sequences x y. null_mean (repetitions > 0): mean null distribution psi scores. null_sd (repetitions > 0): standard deviation null distribution psi values. p_value  (repetitions > 0): proportion scores smaller equal psi null distribution.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"","code":"#parallelization setup (not worth it for this data size) future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #three time series #climate and ndvi in Fagus sylvatica stands #in Spain, Germany, and Sweden #scaled and centered tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #dynamic time warping dissimilarity analysis #------------------------------------------- #permutation restricted by row because #ndvi depends on temperature and rainfall #block size is 6 because data is monthly #to keep permutation restricted to 6 months periods df_dtw <- distantia(   tsl = tsl,   distance = \"euclidean\",   repetitions = 10, #increase to 100 or more   permutation = \"restricted_by_row\",   block_size = 6,   seed = 1 )  #focus on the important details df_dtw[, c(\"x\", \"y\", \"psi\", \"p_value\")] #>         x      y       psi p_value #> 1 Germany  Spain 1.3429956     0.1 #> 2 Germany Sweden 0.8571217     0.1 #> 3   Spain Sweden 1.4803954     0.1 #smaller psi values indicate higher similarity #p-values indicate chance of #finding a psi smaller than the observed  #visualize dynamic time warping if(interactive()){    distantia_plot(     tsl = tsl_subset(       tsl = tsl,       names = c(\"Spain\", \"Sweden\")     ),     distance = \"euclidean\",     matrix_type = \"cost\"   )  }  #recreating the null distribution #direct call to C++ function #use same args as in distantia() call psi_null <- null_psi_cpp(   x = tsl[[\"Spain\"]],   y = tsl[[\"Sweden\"]],   repetitions = 10, #increase to 100 or more   distance = \"euclidean\",   permutation = \"restricted_by_row\",   block_size = 6,   seed = 1 )  #compare null mean with output of distantia() mean(psi_null) #> [1] 1.885628 df_dtw$null_mean[3] #> [1] 1.885628   #lock-step dissimilarity analysis #--------------------------------- df_lock_step <- distantia(   tsl = tsl,   distance = \"euclidean\",   repetitions = 10, #increase to 100 or more   permutation = \"restricted_by_row\",   block_size = 6,   lock_step = TRUE )  #focus on the important details df_lock_step[, c(\"x\", \"y\", \"psi\", \"p_value\")] #>         x      y      psi p_value #> 1 Germany  Spain 1.306133     0.1 #> 2 Germany Sweden 0.857670     0.1 #> 3   Spain Sweden 1.470850     0.1  #recreating the null distribution psi_null <- null_psi_lock_step_cpp(   x = tsl[[\"Spain\"]],   y = tsl[[\"Sweden\"]],   repetitions = 10, #increase to 100 or more   distance = \"euclidean\",   permutation = \"restricted_by_row\",   block_size = 6,   seed = 1 )  #compare null mean with output of distantia() mean(psi_null) #> [1] 1.872296 df_lock_step$null_mean[3] #> [1] 1.872296   #combinations of parameters #--------------------------------- #most distantia arguments accept vectors #the function combines these arguments df_multiple <- distantia(   tsl = tsl,   distance = c(\"euclidean\", \"manhattan\") )  df_multiple[, c(   \"x\",   \"y\",   \"distance\",   \"psi\" )] #>         x      y  distance       psi #> 1 Germany  Spain euclidean 1.3429956 #> 2 Germany Sweden euclidean 0.8571217 #> 3   Spain Sweden euclidean 1.4803954 #> 4 Germany  Spain manhattan 1.2850779 #> 5 Germany Sweden manhattan 0.8527760 #> 6   Spain Sweden manhattan 1.4959250  #see distantia_aggregate to average results #from different argument combinations df <- distantia_aggregate(   df = df_multiple   )  df[, c(\"x\", \"y\", \"psi\")] #>         x      y       psi #> 1 Germany  Spain 1.3140367 #> 2 Germany Sweden 0.8549489 #> 3   Spain Sweden 1.4881602   #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Dissimilarity Analysis Data Frames Across Parameter Combinations — distantia_aggregate","title":"Aggregate Dissimilarity Analysis Data Frames Across Parameter Combinations — distantia_aggregate","text":"functions distantia() distantia_importance() allow dissimilarity assessments based different combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two dissimilarity scores pair compared time series, one based euclidean distances, another based manhattan distances. df result distantia(), input data grouped pairs time series, function f applied column \"psi\" group df result distantia_importance(), input data grouped pairs time series variables, function f applied columns \"importance\", \"psi_only_with\" \"psi_without\" group. However, values TRUE FALSE appear column \"robust\" (allowed default distantia_importance()), aggregation cancelled error, results methods aggregated together. psi scores smaller zero occur aggregated output, smaller psi value added column psi start dissimilarity scores zero. different combinations arguments input data frame, aggregation happens, parameter columns removed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Dissimilarity Analysis Data Frames Across Parameter Combinations — distantia_aggregate","text":"","code":"distantia_aggregate(df = NULL, f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Dissimilarity Analysis Data Frames Across Parameter Combinations — distantia_aggregate","text":"df (required, data frame) Output distantia() distantia_importance(). Default: NULL f (optional, function) Function summarize psi scores (example, mean) several combinations parameters df. Ignored single combination arguments input. Default: mean ... (optional, arguments f) arguments pass function f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Dissimilarity Analysis Data Frames Across Parameter Combinations — distantia_aggregate","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Dissimilarity Analysis Data Frames Across Parameter Combinations — distantia_aggregate","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden data(\"fagus_dynamics\")  tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #distantia with multiple parameter combinations #------------------------------------- df_multiple <- distantia(   tsl = tsl,   distance = c(\"euclidean\", \"manhattan\"),   lock_step = c(TRUE, FALSE) ) #> Loading required package: foreach #> Loading required package: future  df_multiple[, c(   \"x\",   \"y\",   \"distance\",   \"lock_step\",   \"psi\" )] #>          x      y  distance lock_step       psi #> 1  Germany  Spain euclidean      TRUE 1.3061327 #> 2  Germany Sweden euclidean      TRUE 0.8576700 #> 3    Spain Sweden euclidean      TRUE 1.4708497 #> 4  Germany  Spain manhattan      TRUE 1.2698922 #> 5  Germany Sweden manhattan      TRUE 0.8591195 #> 6    Spain Sweden manhattan      TRUE 1.4890286 #> 7  Germany  Spain euclidean     FALSE 1.3429956 #> 8  Germany Sweden euclidean     FALSE 0.8571217 #> 9    Spain Sweden euclidean     FALSE 1.4803954 #> 10 Germany  Spain manhattan     FALSE 1.2850779 #> 11 Germany Sweden manhattan     FALSE 0.8527760 #> 12   Spain Sweden manhattan     FALSE 1.4959250  #aggregation using means df <- distantia_aggregate(   df = df_multiple,   f = mean )  df #>         x      y       psi #> 1 Germany  Spain 1.3010246 #> 2 Germany Sweden 0.8566718 #> 3   Spain Sweden 1.4840497  #importance with multiple parameter combinations #------------------------------------- df_multiple <- distantia_importance(   tsl = tsl,   distance = c(\"euclidean\", \"manhattan\"),   lock_step = c(FALSE, TRUE) )  df_multiple[, c(   \"x\",   \"y\",   \"variable\",   \"distance\",   \"lock_step\",   \"importance\" )] #>          x      y    variable  distance lock_step importance #> 1  Germany  Spain         evi euclidean     FALSE   6.512321 #> 2  Germany  Spain    rainfall euclidean     FALSE  12.505764 #> 3  Germany  Spain temperature euclidean     FALSE -26.509115 #> 4  Germany Sweden         evi euclidean     FALSE  29.026504 #> 5  Germany Sweden    rainfall euclidean     FALSE  -4.209397 #> 6  Germany Sweden temperature euclidean     FALSE -26.661768 #> 7    Spain Sweden         evi euclidean     FALSE  -6.625437 #> 8    Spain Sweden    rainfall euclidean     FALSE  -4.416941 #> 9    Spain Sweden temperature euclidean     FALSE  13.668290 #> 10 Germany  Spain         evi manhattan     FALSE   5.692418 #> 11 Germany  Spain    rainfall manhattan     FALSE  19.828337 #> 12 Germany  Spain temperature manhattan     FALSE -31.724040 #> 13 Germany Sweden         evi manhattan     FALSE  31.231755 #> 14 Germany Sweden    rainfall manhattan     FALSE  -1.117102 #> 15 Germany Sweden temperature manhattan     FALSE -31.510126 #> 16   Spain Sweden         evi manhattan     FALSE -17.569115 #> 17   Spain Sweden    rainfall manhattan     FALSE   5.323929 #> 18   Spain Sweden temperature manhattan     FALSE  11.959892 #> 19 Germany  Spain         evi euclidean      TRUE   0.241829 #> 20 Germany  Spain    rainfall euclidean      TRUE  19.051052 #> 21 Germany  Spain temperature euclidean      TRUE -30.814944 #> 22 Germany Sweden         evi euclidean      TRUE  28.539736 #> 23 Germany Sweden    rainfall euclidean      TRUE  -4.845232 #> 24 Germany Sweden temperature euclidean      TRUE -25.011608 #> 25   Spain Sweden         evi euclidean      TRUE -22.912397 #> 26   Spain Sweden    rainfall euclidean      TRUE   9.732110 #> 27   Spain Sweden temperature euclidean      TRUE  12.501949 #> 28 Germany  Spain         evi manhattan      TRUE   1.900935 #> 29 Germany  Spain    rainfall manhattan      TRUE  21.154702 #> 30 Germany  Spain temperature manhattan      TRUE -29.727709 #> 31 Germany Sweden         evi manhattan      TRUE  29.249949 #> 32 Germany Sweden    rainfall manhattan      TRUE  -3.444891 #> 33 Germany Sweden temperature manhattan      TRUE -26.684626 #> 34   Spain Sweden         evi manhattan      TRUE -25.080233 #> 35   Spain Sweden    rainfall manhattan      TRUE  10.764640 #> 36   Spain Sweden temperature manhattan      TRUE  12.742187  #aggregation using means df <- distantia_aggregate(   df = df_multiple,   f = mean )  df #>         x      y    variable       psi importance psi_without psi_only_with #> 1 Germany  Spain         evi 1.3010246   3.586876   1.2811692     1.3281469 #> 2 Germany Sweden         evi 0.8566718  29.511986   0.7807204     1.0335199 #> 3   Spain Sweden         evi 1.4840497 -18.046795   1.5579973     1.2901568 #> 4 Germany  Spain    rainfall 1.3010246  18.134964   1.1741316     1.4091905 #> 5 Germany Sweden    rainfall 0.8566718  -3.404155   0.8726797     0.8434902 #> 6   Spain Sweden    rainfall 1.4840497   5.350935   1.4606764     1.5400981 #> 7 Germany  Spain temperature 1.3010246 -29.693952   1.3907864     1.0048642 #> 8 Germany Sweden temperature 0.8566718 -27.467032   0.9190628     0.6838117 #> 9   Spain Sweden temperature 1.4840497  12.718079   1.4467168     1.6354357  df[, c(   \"x\",   \"y\",   \"variable\",   \"importance\" )] #>         x      y    variable importance #> 1 Germany  Spain         evi   3.586876 #> 2 Germany Sweden         evi  29.511986 #> 3   Spain Sweden         evi -18.046795 #> 4 Germany  Spain    rainfall  18.134964 #> 5 Germany Sweden    rainfall  -3.404155 #> 6   Spain Sweden    rainfall   5.350935 #> 7 Germany  Spain temperature -29.693952 #> 8 Germany Sweden temperature -27.467032 #> 9   Spain Sweden temperature  12.718079  #distantia with a single parameter combination #------------------------------ df_multiple <- distantia(   tsl = tsl,   distance = \"euclidean\",   lock_step = TRUE )  df_multiple #>         x      y  distance diagonal weighted ignore_blocks lock_step      psi #> 1 Germany  Spain euclidean     TRUE     TRUE         FALSE      TRUE 1.306133 #> 2 Germany Sweden euclidean     TRUE     TRUE         FALSE      TRUE 0.857670 #> 3   Spain Sweden euclidean     TRUE     TRUE         FALSE      TRUE 1.470850  #no aggregation happens, but all parameter columns are removed df <- distantia_aggregate(   df = df_multiple,   f = mean )  df #>         x      y      psi #> 1 Germany  Spain 1.306133 #> 2 Germany Sweden 0.857670 #> 3   Spain Sweden 1.470850"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of Dissimilarity Analysis Data Frames — distantia_boxplot","title":"Boxplot of Dissimilarity Analysis Data Frames — distantia_boxplot","text":"function generates visual summary dissimilarity importance scores generated functions distantia() distantia_importance(). distantia() data frame: plots distribution Psi values time series others. facilitates identification time series less similar others. distantia_importance() data frame: plots importance (contribution similarity/dissimilarity) variable across time series, facilitating identification variables making time series less similar. case, argument df contains one combination input parameters, distantia_aggregate() used summarize dissimilarity scores across groups.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of Dissimilarity Analysis Data Frames — distantia_boxplot","text":"","code":"distantia_boxplot(df = NULL, color = NULL, f = median, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of Dissimilarity Analysis Data Frames — distantia_boxplot","text":"df (required, data frame) output distantia() distantia_importance(). Default: NULL color (optional, character vector) boxplot fill color. Default: NULL f (optional, function) function used arrange boxes. Can one mean, median, min, max, quantile. Default: median. ... (optional, additional arguments f). f quantile, probs = 0.75 can used. Default: ...","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot of Dissimilarity Analysis Data Frames — distantia_boxplot","text":"boxplot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of Dissimilarity Analysis Data Frames — distantia_boxplot","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands #in Spain, Germany, and Sweden #centerd and scaled with global parameters tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  # example with distantia() #----------------------------------- distantia_df <- distantia(   tsl = tsl )  if(interactive()){   boxplot_stats <- distantia_boxplot(     df = distantia_df     )     boxplot_stats }  #The boxplot identifies Spain #as the site most dissimilar to all others, #and Germany as the most similar to all others.   #example with distantia_importance() #----------------------------------- importance_df <- distantia_importance(   tsl = tsl )  if(interactive()){   boxplot_stats <- distantia_boxplot(     df = distantia_df     ) }  #the boxplot identifies the variable evi #(enhanced vegetation index) as the one #contributing the most to site dissimilarity, #and termpature as the variable contributing #the most to site similarity."},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"function combines dissimilarity scores computed distantia(), agglomerative clustering methods provided stats::hclust(), clustering optimization method implemented utils_cluster_hclust_optimizer() help group together time series similar features. clusters = NULL, function utils_cluster_hclust_optimizer() run underneath perform parallelized grid search find  number clusters maximizing overall silhouette width clustering solution (see utils_cluster_silhouette()). method = NULL well, optimization also includes methods available stats::hclust() grid search. grid search function  supports parallelization via future::plan() progress bar generated progressr package (see Examples).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"","code":"distantia_cluster_hclust(df = NULL, clusters = NULL, method = \"complete\")"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"df (required, data frame) Output distantia(). Default: NULL clusters (required, integer) Number groups generate. NULL (default), utils_cluster_kmeans_optimizer() used find number clusters maximizes mean silhouette width clustering solution (see utils_cluster_silhouette()). Default: NULL method (optional, character string) Argument stats::hclust() defining agglomerative method. One : \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) \"centroid\" (= UPGMC). Unambiguous abbreviations accepted well. NULL (default), utils_cluster_hclust_optimizer() finds optimal method. Default: \"complete\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"list: cluster_object: hclust object analyses custom plotting. clusters: integer, number clusters. silhouette_width: mean silhouette width clustering solution. df: data frame time series names, cluster label, individual silhouette width scores. d: psi distance matrix used clustering. optimization: clusters = NULL, data frame optimization results utils_cluster_hclust_optimizer().","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"","code":"#for large datasets, parallelization accelerates cluster optimization future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #daily covid prevalence in California counties data(\"covid_prevalence\")  #load as tsl tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" )  #subset 10 elements to accelerate example execution tsl <- tsl_subset(   tsl = tsl,   names = 1:10 )  #aggregateto monthly data to accelerate example execution tsl <- tsl_aggregate(   tsl = tsl,   new_time = \"months\",   fun = sum )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl_subset(       tsl = tsl,       names = 1:3     ),     guide_columns = 3   ) }  #dissimilarity analysis distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #hierarchical clustering with a given number of clusters #------------------------------------------------------- distantia_clust <- distantia_cluster_hclust(   df = distantia_df,   clusters = 5, #arbitrary number!   method = \"complete\" )  #names of the output object names(distantia_clust) #> [1] \"cluster_object\"   \"clusters\"         \"silhouette_width\" \"df\"               #> [5] \"d\"                 #cluster object distantia_clust$cluster_object #>  #> Call: #> stats::hclust(d = d_dist, method = method) #>  #> Cluster method   : complete  #> Number of objects: 10  #>   #distance matrix used for clustering distantia_clust$d #>                Alameda     Butte Contra_Costa El_Dorado    Fresno  Humboldt #> Butte        0.6287502                                                      #> Contra_Costa 0.1417180 0.5537658                                            #> El_Dorado    0.6043963 0.2791084    0.5562701                               #> Fresno       0.5396143 0.5514503    0.4892774 0.6451476                     #> Humboldt     0.7198591 0.4681926    0.6762226 0.3971290 0.8496143           #> Imperial     0.7524957 0.9603572    0.7399531 0.9982246 0.4790492 1.1988480 #> Kern         0.6607005 0.4648086    0.5876087 0.5807203 0.2627634 0.8162986 #> Kings        0.8711298 0.9578573    0.8231969 1.0517096 0.4505311 1.2177286 #> Los_Angeles  0.5425064 0.8740719    0.5263465 0.8598873 0.4542238 1.0282498 #>               Imperial      Kern     Kings #> Butte                                      #> Contra_Costa                               #> El_Dorado                                  #> Fresno                                     #> Humboldt                                   #> Imperial                                   #> Kern         0.6753489                     #> Kings        0.4748470 0.6421878           #> Los_Angeles  0.4960491 0.5922560 0.4632569  #number of clusters distantia_clust$clusters #> [1] 5  #clustering data frame #group label in column \"cluster\" #negatives in column \"silhouette_width\" higlight anomalous cluster assignation distantia_clust$df #>            name cluster silhouette_width #> 1       Alameda       1       0.76386522 #> 2         Butte       2       0.26465487 #> 3  Contra_Costa       1       0.73680033 #> 4     El_Dorado       2       0.41737146 #> 5        Fresno       3       0.41915007 #> 6      Humboldt       2       0.38017839 #> 7      Imperial       4       0.00000000 #> 8          Kern       3       0.57428048 #> 9         Kings       5       0.02440797 #> 10  Los_Angeles       5       0.06610664  #mean silhouette width of the clustering solution distantia_clust$silhouette_width #> [1] 0.3646815  #plot if(interactive()){    clust <- distantia_clust$cluster_object   k <- distantia_clust$clusters    #tree plot   plot(     x = clust,     hang = -1   )    #highlight groups   stats::rect.hclust(     tree = clust,     k = k,     cluster = stats::cutree(       tree = clust,       k = k     )   )  }   #optimized hierarchical clustering #---------------------------------  #auto-optimization of clusters and method distantia_clust <- distantia_cluster_hclust(   df = distantia_df,   clusters = NULL,   method = NULL )  #names of the output object #a new object named \"optimization\" should appear names(distantia_clust) #> [1] \"cluster_object\"   \"clusters\"         \"silhouette_width\" \"df\"               #> [5] \"d\"                \"optimization\"      #first rows of the optimization data frame #optimized clustering in first row head(distantia_clust$optimization) #>   clusters   method silhouette_mean #> 1        4   ward.D       0.3953577 #> 2        4  ward.D2       0.3953577 #> 3        4 complete       0.3953577 #> 4        4  average       0.3953577 #> 5        4 mcquitty       0.3953577 #> 6        3   ward.D       0.3784943  #plot if(interactive()){    clust <- distantia_clust$cluster_object   k <- distantia_clust$clusters    #tree plot   plot(     x = clust,     hang = -1   )    #highlight groups   stats::rect.hclust(     tree = clust,     k = k,     cluster = stats::cutree(       tree = clust,       k = k     )   )  }  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"function combines dissimilarity scores computed distantia(), K-means clustering method implemented stats::kmeans(), clustering optimization method implemented utils_cluster_hclust_optimizer() help group together time series similar features. clusters = NULL, function utils_cluster_hclust_optimizer() run underneath perform parallelized grid search find  number clusters maximizing overall silhouette width clustering solution (see utils_cluster_silhouette()). grid search function  supports parallelization via future::plan() progress bar generated progressr package (see Examples).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"","code":"distantia_cluster_kmeans(df = NULL, clusters = NULL, seed = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"df (required, data frame) Output distantia(). Default: NULL clusters (required, integer) Number groups generate. NULL (default), utils_cluster_kmeans_optimizer() used find number clusters maximizes mean silhouette width clustering solution (see utils_cluster_silhouette()). Default: NULL seed (optional, integer) Random seed used K-means computation. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"list: cluster_object: kmeans object object analyses custom plotting. clusters: integer, number clusters. silhouette_width: mean silhouette width clustering solution. df: data frame time series names, cluster label, individual silhouette width scores. d: psi distance matrix used clustering. optimization: clusters = NULL, data frame optimization results utils_cluster_hclust_optimizer().","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"","code":"#for large datasets, parallelization accelerates cluster optimization future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #daily covid prevalence in California counties data(\"covid_prevalence\")  #load as tsl and aggregate to monthly data to accelerate example execution tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" )  #subset 10 elements to accelerate example execution tsl <- tsl_subset(   tsl = tsl,   names = 1:10 )  #aggregateto monthly data to accelerate example execution tsl <- tsl_aggregate(   tsl = tsl,   new_time = \"months\",   fun = sum )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl[1:3],     guide_columns = 3     ) }  #dissimilarity analysis distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #kmeans with a given number of clusters #------------------------------------------------------- distantia_kmeans <- distantia_cluster_kmeans(   df = distantia_df,   clusters = 5 #arbitrary number! )  #names of the output object names(distantia_kmeans) #> [1] \"cluster_object\"   \"clusters\"         \"silhouette_width\" \"df\"               #> [5] \"d\"                 #kmeans object distantia_kmeans$cluster_object #> K-means clustering with 5 clusters of sizes 2, 2, 2, 1, 3 #>  #> Cluster means: #>      Alameda     Butte Contra_Costa El_Dorado    Fresno  Humboldt  Imperial #> 1 0.07085902 0.5912580   0.07085902 0.5803332 0.5144459 0.6980408 0.7462244 #> 2 0.60015741 0.5081294   0.53844306 0.6129340 0.1313817 0.8329565 0.5771991 #> 3 0.61657321 0.1395542   0.55501793 0.1395542 0.5982990 0.4326608 0.9792909 #> 4 0.71985907 0.4681926   0.67622262 0.3971290 0.8496143 0.0000000 1.1988480 #> 5 0.72204396 0.9307621   0.69649882 0.9699405 0.4612680 1.1482755 0.3236320 #>        Kern     Kings Los_Angeles #> 1 0.6241546 0.8471634   0.5344264 #> 2 0.1313817 0.5463595   0.5232399 #> 3 0.5227645 1.0047835   0.8669796 #> 4 0.8162986 1.2177286   1.0282498 #> 5 0.6365976 0.3127013   0.3197687 #>  #> Clustering vector: #>      Alameda        Butte Contra_Costa    El_Dorado       Fresno     Humboldt  #>            1            3            1            3            2            4  #>     Imperial         Kern        Kings  Los_Angeles  #>            5            2            5            5  #>  #> Within cluster sum of squares by cluster: #> [1] 0.03030158 0.13475326 0.09705527 0.00000000 0.61045676 #>  (between_SS / total_SS =  89.4 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"        #distance matrix used for clustering distantia_kmeans$d #>                Alameda     Butte Contra_Costa El_Dorado    Fresno  Humboldt #> Alameda      0.0000000 0.6287502    0.1417180 0.6043963 0.5396143 0.7198591 #> Butte        0.6287502 0.0000000    0.5537658 0.2791084 0.5514503 0.4681926 #> Contra_Costa 0.1417180 0.5537658    0.0000000 0.5562701 0.4892774 0.6762226 #> El_Dorado    0.6043963 0.2791084    0.5562701 0.0000000 0.6451476 0.3971290 #> Fresno       0.5396143 0.5514503    0.4892774 0.6451476 0.0000000 0.8496143 #> Humboldt     0.7198591 0.4681926    0.6762226 0.3971290 0.8496143 0.0000000 #> Imperial     0.7524957 0.9603572    0.7399531 0.9982246 0.4790492 1.1988480 #> Kern         0.6607005 0.4648086    0.5876087 0.5807203 0.2627634 0.8162986 #> Kings        0.8711298 0.9578573    0.8231969 1.0517096 0.4505311 1.2177286 #> Los_Angeles  0.5425064 0.8740719    0.5263465 0.8598873 0.4542238 1.0282498 #>               Imperial      Kern     Kings Los_Angeles #> Alameda      0.7524957 0.6607005 0.8711298   0.5425064 #> Butte        0.9603572 0.4648086 0.9578573   0.8740719 #> Contra_Costa 0.7399531 0.5876087 0.8231969   0.5263465 #> El_Dorado    0.9982246 0.5807203 1.0517096   0.8598873 #> Fresno       0.4790492 0.2627634 0.4505311   0.4542238 #> Humboldt     1.1988480 0.8162986 1.2177286   1.0282498 #> Imperial     0.0000000 0.6753489 0.4748470   0.4960491 #> Kern         0.6753489 0.0000000 0.6421878   0.5922560 #> Kings        0.4748470 0.6421878 0.0000000   0.4632569 #> Los_Angeles  0.4960491 0.5922560 0.4632569   0.0000000 #> attr(,\"distantia_args\") #>    distance diagonal weighted ignore_blocks lock_step group #> 1 euclidean     TRUE     TRUE         FALSE      TRUE     1 #> attr(,\"type\") #> [1] \"distantia_matrix\" #> attr(,\"distance\") #> [1] \"psi\"  #number of clusters distantia_kmeans$clusters #> [1] 5  #clustering data frame #group label in column \"cluster\" distantia_kmeans$df #>            name cluster silhouette_width #> 1       Alameda       1        0.7638652 #> 2         Butte       3        0.4038600 #> 3  Contra_Costa       1        0.7368003 #> 4     El_Dorado       3        0.2971845 #> 5        Fresno       2        0.4303455 #> 6      Humboldt       4        0.0000000 #> 7      Imperial       5        0.1589591 #> 8          Kern       2        0.4973579 #> 9         Kings       5        0.1414957 #> 10  Los_Angeles       5        0.0833020  #mean silhouette width of the clustering solution distantia_kmeans$silhouette_width #> [1] 0.351317  #kmeans plot # factoextra::fviz_cluster( #   object = distantia_kmeans$cluster_object, #   data = distantia_kmeans$d, #   repel = TRUE # )  #optimized kmeans #--------------------------------- #auto-optimization of clusters and method distantia_kmeans <- distantia_cluster_kmeans(   df = distantia_df,   clusters = NULL )  #names of the output object #a new object named \"optimization\" should appear names(distantia_kmeans) #> [1] \"cluster_object\"   \"clusters\"         \"silhouette_width\" \"df\"               #> [5] \"d\"                \"optimization\"      #first rows of the optimization data frame #optimized clustering in first row head(distantia_kmeans$optimization) #>   clusters silhouette_mean #> 1        4       0.3953577 #> 2        5       0.3513170 #> 3        2       0.3435351 #> 4        6       0.3107771 #> 5        7       0.3084695 #> 6        3       0.2760140  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Contribution of Individual Variables to Dissimilarity in Time Series Lists — distantia_importance","title":"Contribution of Individual Variables to Dissimilarity in Time Series Lists — distantia_importance","text":"function measures contribution individual variables dissimilarity pairs time series help answer question makes two time series less similar? Three key values required assess individual variable contributions: psi: dissimilarity variables considered. psi_only_with: dissimilarity using target variable. psi_without: dissimilarity removing target variable. values psi_only_with psi_without can computed two different ways defined argument robust. robust = FALSE: method replicates importance algorithm released first version package, recommended goal compare new results previous studies. normalizes psi_only_with psi_without using least cost path obtained individual variable. different variables may different least cost paths time series, normalization values may change variable variable, making individual importance scores harder compare. robust = TRUE (default, recommended): novel version importance algorithm yields stable comparable solutions. uses least cost path complete time series normalize psi_only_with psi_without, making importance scores separate variables fully comparable. individual importance score variable (column \"importance\" output data frame) based different expressions depending robust argument, even lock_step = TRUE: robust = FALSE: Importance computed ((psi - psi_without) * 100)/psi interpreted \"change similarity variable removed\". robust = TRUE: Importance computed ((psi_only_with - psi_without) * 100)/psi interpreted \"relative dissimilarity induced variable expressed percentage\". either case, positive values indicate variable contributes dissimilarity, negative values indicate net contribution similarity. function allows computing dissimilarity pairs time series using different combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two dissimilarity scores pair time series, one based euclidean distances, another based manhattan distances. happens parameters. function supports progress bars generated progressr package. See examples. function also accepts parallelization setup via future::plan(), might worth long time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contribution of Individual Variables to Dissimilarity in Time Series Lists — distantia_importance","text":"","code":"distantia_importance(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   lock_step = FALSE,   robust = TRUE )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contribution of Individual Variables to Dissimilarity in Time Series Lists — distantia_importance","text":"tsl (required, list) Time series list. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included computation cost matrix. Default: TRUE weighted (optional, logical vector) TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: TRUE ignore_blocks (optional, logical vector). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Ignored diagonal = TRUE. Default: FALSE. lock_step (optional, logical vector) TRUE, time series compared row wise least-cost path optimization performed. Requires time series argument tsl fully aligned. Default: FALSE. robust (required, logical). TRUE (default), importance scores computed using least cost path complete time series reference. Setting FALSE allows replicate importance scores previous versions package. option irrelevant lock_step = TRUE. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_importance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contribution of Individual Variables to Dissimilarity in Time Series Lists — distantia_importance","text":"data frame: x: name time series x. y: name time series y. psi: psi score x y. variable: name individual variable. importance: importance score variable. psi_only_with: psi score variable. psi_without: psi score without variable. psi_difference: difference psi_only_with psi_without. distance: name distance metric. diagonal: value argument diagonal. weighted: value argument weighted. ignore_blocks: value argument ignore_blocks. lock_step: value argument lock_step. robust: value argument robust.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_importance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contribution of Individual Variables to Dissimilarity in Time Series Lists — distantia_importance","text":"","code":"#parallelization setup (not worth it for this data size) future::plan(  future::multisession,  workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden data(\"fagus_dynamics\")  #load as tsl #center and scale with same parameters tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }   #importance computed with dynamic time warping #less sensitive to latitudinal or altitudinal differences importance_dtw <- distantia_importance(   tsl = tsl )   #focus on important columns importance_dtw[, c(   \"x\",   \"y\",   \"psi\",   \"variable\",   \"importance\",   \"effect\"   )] #>         x      y       psi    variable importance               effect #> 1 Germany  Spain 1.3429956         evi   6.512321 decreases similarity #> 2 Germany  Spain 1.3429956    rainfall  12.505764 decreases similarity #> 3 Germany  Spain 1.3429956 temperature -26.509115 increases similarity #> 4 Germany Sweden 0.8571217         evi  29.026504 decreases similarity #> 5 Germany Sweden 0.8571217    rainfall  -4.209397 increases similarity #> 6 Germany Sweden 0.8571217 temperature -26.661768 increases similarity #> 7   Spain Sweden 1.4803954         evi  -6.625437 increases similarity #> 8   Spain Sweden 1.4803954    rainfall  -4.416941 increases similarity #> 9   Spain Sweden 1.4803954 temperature  13.668290 decreases similarity  #Interpretation example: #variable contributing the most to similarity between Germany and Sweden: temperature #variable contributing the most to dissimilarity between Spain and Sweden: temperature  #importance computed with lock-step method #more sensitive to latitudinal or altitudinal differences importance_lock_step <- distantia_importance(   tsl = tsl,   lock_step = TRUE )  importance_lock_step[, c(   \"x\",   \"y\",   \"psi\",   \"variable\",   \"importance\",   \"effect\"   )] #>         x      y      psi    variable importance               effect #> 1 Germany  Spain 1.306133         evi   0.241829 decreases similarity #> 2 Germany  Spain 1.306133    rainfall  19.051052 decreases similarity #> 3 Germany  Spain 1.306133 temperature -30.814944 increases similarity #> 4 Germany Sweden 0.857670         evi  28.539736 decreases similarity #> 5 Germany Sweden 0.857670    rainfall  -4.845232 increases similarity #> 6 Germany Sweden 0.857670 temperature -25.011608 increases similarity #> 7   Spain Sweden 1.470850         evi -22.912397 increases similarity #> 8   Spain Sweden 1.470850    rainfall   9.732110 decreases similarity #> 9   Spain Sweden 1.470850 temperature  12.501949 decreases similarity   #combinations of parameters #--------------------------------- #most arguments accept vectors, and the results contain all argument combinations  importance_df <- distantia_importance(   tsl = tsl,   lock_step = c(TRUE, FALSE) )  importance_df[, c(   \"x\",   \"y\",   \"psi\",   \"variable\",   \"importance\",   \"effect\",   \"lock_step\" )] #>          x      y       psi    variable importance               effect #> 1  Germany  Spain 1.3061327         evi   0.241829 decreases similarity #> 2  Germany  Spain 1.3061327    rainfall  19.051052 decreases similarity #> 3  Germany  Spain 1.3061327 temperature -30.814944 increases similarity #> 4  Germany Sweden 0.8576700         evi  28.539736 decreases similarity #> 5  Germany Sweden 0.8576700    rainfall  -4.845232 increases similarity #> 6  Germany Sweden 0.8576700 temperature -25.011608 increases similarity #> 7    Spain Sweden 1.4708497         evi -22.912397 increases similarity #> 8    Spain Sweden 1.4708497    rainfall   9.732110 decreases similarity #> 9    Spain Sweden 1.4708497 temperature  12.501949 decreases similarity #> 10 Germany  Spain 1.3429956         evi   6.512321 decreases similarity #> 11 Germany  Spain 1.3429956    rainfall  12.505764 decreases similarity #> 12 Germany  Spain 1.3429956 temperature -26.509115 increases similarity #> 13 Germany Sweden 0.8571217         evi  29.026504 decreases similarity #> 14 Germany Sweden 0.8571217    rainfall  -4.209397 increases similarity #> 15 Germany Sweden 0.8571217 temperature -26.661768 increases similarity #> 16   Spain Sweden 1.4803954         evi  -6.625437 increases similarity #> 17   Spain Sweden 1.4803954    rainfall  -4.416941 increases similarity #> 18   Spain Sweden 1.4803954 temperature  13.668290 decreases similarity #>    lock_step #> 1       TRUE #> 2       TRUE #> 3       TRUE #> 4       TRUE #> 5       TRUE #> 6       TRUE #> 7       TRUE #> 8       TRUE #> 9       TRUE #> 10     FALSE #> 11     FALSE #> 12     FALSE #> 13     FALSE #> 14     FALSE #> 15     FALSE #> 16     FALSE #> 17     FALSE #> 18     FALSE  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"Transforms data frame resulting distantia() dissimilarity matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"","code":"distantia_matrix(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"df (required, data frame) Output distantia() distantia_aggregate(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"","code":"#daily covid prevalence in California counties data(\"covid_prevalence\")  #load as tsl and aggregate to monthly data to accelerate example execution tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" ) |>   tsl_aggregate(     new_time = \"months\",     fun = sum   )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl[1:3],     guide_columns = 3     ) }  #dissimilarity analysis #single combination of arguments #------------------------------- distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #to dissimilarity matrix psi_matrix <- distantia_matrix(   df = distantia_df )  #returns a list of matrices class(psi_matrix) #> [1] \"list\" length(psi_matrix) #> [1] 1  #only one matrix for this case class(psi_matrix[[1]]) #> [1] \"matrix\" \"array\"   #plot matrix if(interactive()){   utils_matrix_plot(     m = psi_matrix     ) }   #dissimilarity analysis #two combinations of arguments #------------------------------- distantia_df <- distantia(   tsl = tsl,   lock_step = c(TRUE, FALSE) )  #to dissimilarity matrix psi_matrix <- distantia_matrix(   df = distantia_df )  #returns a list of matrices lapply(   X = psi_matrix,   FUN = class   ) #> $`1` #> [1] \"matrix\" \"array\"  #>  #> $`2` #> [1] \"matrix\" \"array\"  #>   #these matrices have attributes tracing how they were generated lapply(   X = psi_matrix,   FUN = \\(x) attributes(x)$distantia_args ) #> $`1` #>      distance diagonal weighted ignore_blocks lock_step group #> 631 euclidean     TRUE     TRUE         FALSE      TRUE     1 #>  #> $`2` #>    distance diagonal weighted ignore_blocks lock_step group #> 1 euclidean     TRUE     TRUE         FALSE     FALSE     2 #>   #plot matrix if(interactive()){    #plot first matrix (default behavior of utils_matrix_plot())   utils_matrix_plot(     m = psi_matrix[[1]]   )    #plot second matrix   utils_matrix_plot(     m = psi_matrix[[2]]   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_plot","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_plot","text":"Plots two sequences, distance cost matrix, least cost path, relevant values used compute dissimilarity. Unlike distantia(), function accept vectors inputs arguments compute dissimilarity (distance, diagonal,  weighted), plots pair sequences . argument lock_step available plot make sense case.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_plot","text":"","code":"distantia_plot(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   matrix_type = \"cost\",   matrix_color = NULL,   path_width = 1,   path_color = \"black\",   line_color = NULL,   line_width = 1,   text_cex = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_plot","text":"tsl (required, list) time series list two elements. two, first two time series plotted. Default: NULL distance (optional, character STRING) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: TRUE weighted @param weighted (optional, logical) TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: TRUE ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Ignored diagonal = TRUE. Default: FALSE. matrix_type (optional, character string): one \"cost\" \"distance\" (abbreviation \"dist\" accepted well). Default: \"cost\". matrix_color (optional, character vector) vector colors distance cost matrix. NULL, uses palette \"Zissou 1\" provided function grDevices::hcl.colors(). Default: NULL path_width (optional, numeric) width least cost path. Default: 1 path_color (optional, character string) color least-cost path. Default: \"black\" line_color (optional, character vector) Vector colors time series plot. provided, defaults subset matrix_color. line_width (optional, numeric vector) Width time series plot. Default: 1 text_cex (optional, numeric) Multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_plot","text":"plot.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_plot","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden data(\"fagus_dynamics\")  #convert to time series list #scale and center to neutralize effect of different scales in temperature, rainfall, and ndvi tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale #see help(f_scale)   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #visualize dynamic time warping if(interactive()){    #plot pair with cost matrix (default)   distantia_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")] #only two time series!   )    #plot pair with distance matrix   distantia_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     matrix_type = \"distance\"   )    #plot pair with different distance   distantia_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     distance = \"manhattan\", #sed data(distances)     matrix_type = \"distance\"   )     #with different colors   distantia_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     matrix_type = \"distance\",     matrix_color = grDevices::hcl.colors(       n = 100,       palette = \"Inferno\"     ),     path_color = \"white\",     path_width = 2,     line_color = grDevices::hcl.colors(       n = 3, #same as variables in tsl       palette = \"Inferno\"     )   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Dissimilarity Analysis Data Frames to Spatial Dissimilarity Networks — distantia_to_sf","title":"Convert Dissimilarity Analysis Data Frames to Spatial Dissimilarity Networks — distantia_to_sf","text":"Given sf data frame coordinates time series list transforms data frame resulting distantia() sf data frame lines connecting time series locations. can used visualize geographic network similarity/dissimilarity locations. See example details.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Dissimilarity Analysis Data Frames to Spatial Dissimilarity Networks — distantia_to_sf","text":"","code":"distantia_to_sf(df = NULL, xy = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Dissimilarity Analysis Data Frames to Spatial Dissimilarity Networks — distantia_to_sf","text":"df (required, data frame) Output distantia() distantia_aggregate(). Default: NULL xy (required, sf POINT data frame) Sf data frame coordinates time series argument 'df'. must column time series names df$x df$y. See [eemian_cooordinaes] example. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Dissimilarity Analysis Data Frames to Spatial Dissimilarity Networks — distantia_to_sf","text":"sf data frame (LINESTRING geometry)","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_to_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Dissimilarity Analysis Data Frames to Spatial Dissimilarity Networks — distantia_to_sf","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden data(\"fagus_dynamics\") data(\"fagus_coordinates\")  #load as tsl #center and scale with same parameters tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale   )  #example using distantia() #-------------------------------------------------- distantia_df <- distantia(   tsl = tsl )  #transform to sf distantia_sf <- distantia::distantia_to_sf(   df = distantia_df,   xy = fagus_coordinates )  #mapping with tmap # library(tmap) # tmap::tmap_mode(\"view\") # # tmap::tm_shape(distantia_sf) + #   tmap::tm_lines( #     col = \"psi\", #     lwd = 3 #   ) + #   tmap::tm_shape(fagus_coordinates) + #   tmap::tm_dots(size = 0.1, col = \"gray50\")   #example using distantia_importance() #-------------------------------------------------- importance_df <- distantia_importance(   tsl = tsl )  #transform to sf importance_sf <- distantia::distantia_to_sf(   df = importance_df,   xy = fagus_coordinates )  names(importance_sf) #>  [1] \"edge_name\"                  \"y\"                          #>  [3] \"x\"                          \"psi\"                        #>  [5] \"most_similar\"               \"most_dissimilar\"            #>  [7] \"importance__evi\"            \"importance__rainfall\"       #>  [9] \"importance__temperature\"    \"psi_only_with__evi\"         #> [11] \"psi_only_with__rainfall\"    \"psi_only_with__temperature\" #> [13] \"psi_without__evi\"           \"psi_without__rainfall\"      #> [15] \"psi_without__temperature\"   \"geometry\"                    # #map contribution to dissimilarity of evi # #negative: contributes to similarity # #positive: contributes to dissimilarity # tmap::tm_shape(importance_sf) + #   tmap::tm_lines( #     col = \"importance__evi\", #     lwd = 3, #     midpoint = NA #   ) + #   tmap::tm_shape(fagus_coordinates) + #   tmap::tm_dots(size = 0.1, col = \"gray50\") # # #map variables making sites more similar # tmap::tm_shape(importance_sf) + #   tmap::tm_lines( #     col = \"most_similar\", #     lwd = 3 #   ) + #   tmap::tm_shape(fagus_coordinates) + #   tmap::tm_dots(size = 0.1, col = \"gray50\") # # #map variables making sites less similar # tmap::tm_shape(importance_sf) + #   tmap::tm_lines( #     col = \"most_dissimilar\", #     lwd = 3 #   ) + #   tmap::tm_shape(fagus_coordinates) + #   tmap::tm_dots(size = 0.1, col = \"gray50\")"},{"path":"https://blasbenito.github.io/distantia/reference/eemian_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","title":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","text":"Site Coordinates Nine Interglacial Sites Central Europe","code":""},{"path":"https://blasbenito.github.io/distantia/reference/eemian_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","text":"","code":"data(eemian_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/eemian_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","text":"sf data frame 4 columns 9 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"Pollen ounts nine interglacial sites central Europe. Site coordinates dataset eemian_coordinates.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"","code":"data(eemian_pollen)"},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"data frame 24 columns 376 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"","code":"data(\"eemian_pollen\")  #to time series list tsl <- tsl_initialize(   x = eemian_pollen,   id_column = \"site\",   time_column = \"depth\" ) #> Warning: Duplicated indices in 'Krumbach_I': #> - value 6.8 replaced by 6.825  #time series plot if(interactive()){   tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:3     ),   columns = 2,   guide_columns = 2   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/f_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Data Centering by Column — f_center","title":"Data Transformation: Data Centering by Column — f_center","text":"Wraps base::scale() global centering tsl_transform().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Data Centering by Column — f_center","text":"","code":"f_center(x = NULL, center = TRUE, scale = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/f_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Data Centering by Column — f_center","text":"x (required, zoo object) Zoo time series object transform. center (optional, logical numeric vector) Triggers centering TRUE. Default: TRUE scale (optional, logical numeric vector) Triggers scaling TRUE. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Data Centering by Column — f_center","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Data Centering by Column — f_center","text":"","code":"x <- zoo_simulate()  y <- f_center(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Differencing Detrending of Zoo Time Series — f_detrend_difference","title":"Data Transformation: Differencing Detrending of Zoo Time Series — f_detrend_difference","text":"Differencing detrending via diff(). Returns randomm fluctuations sample sample related overall trend time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Differencing Detrending of Zoo Time Series — f_detrend_difference","text":"","code":"f_detrend_difference(x = NULL, lag = 1, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Differencing Detrending of Zoo Time Series — f_detrend_difference","text":"x (required, zoo object) Zoo time series object transform. lag (optional, integer) center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Differencing Detrending of Zoo Time Series — f_detrend_difference","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Differencing Detrending of Zoo Time Series — f_detrend_difference","text":"","code":"x <- zoo_simulate(cols = 2)  y_lag1 <- f_detrend_difference(   x = x,   lag = 1 )  y_lag5 <- f_detrend_difference(   x = x,   lag = 5 )  if(interactive()){   zoo_plot(x)   zoo_plot(y_lag1)   zoo_plot(y_lag5) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"Fits linear model column zoo object using time predictor, predicts outcome, subtracts original data return detrended time series. method might suitable input data seasonal clear trend, please mindful limitations function applied blindly.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"","code":"f_detrend_linear(x = NULL, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"x (required, zoo object) Zoo time series object transform. center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_detrend_linear(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Hellinger Transformation by Rows — f_hellinger","title":"Data Transformation: Hellinger Transformation by Rows — f_hellinger","text":"Data Transformation: Hellinger Transformation Rows","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Hellinger Transformation by Rows — f_hellinger","text":"","code":"f_hellinger(x = NULL, pseudozero = 1e-04, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Hellinger Transformation by Rows — f_hellinger","text":"x (required, zoo object) Zoo time series object transform. pseudozero (required, numeric) Small number zero replace zeroes . ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Hellinger Transformation by Rows — f_hellinger","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Hellinger Transformation by Rows — f_hellinger","text":"","code":"x <- zoo_simulate(   cols = 5,   data_range = c(0, 500)   )  y <- f_hellinger(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists Available Transformation Functions — f_list","title":"Lists Available Transformation Functions — f_list","text":"Lists Available Transformation Functions","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists Available Transformation Functions — f_list","text":"","code":"f_list()"},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists Available Transformation Functions — f_list","text":"character vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists Available Transformation Functions — f_list","text":"","code":"f_list() #>  [1] \"f_center\"             \"f_detrend_difference\" \"f_detrend_linear\"     #>  [4] \"f_hellinger\"          \"f_pca\"                \"f_percentage\"         #>  [7] \"f_proportion\"         \"f_rescale\"            \"f_scale\"              #> [10] \"f_slope\"              \"f_smooth_window\"      \"f_trend_linear\""},{"path":"https://blasbenito.github.io/distantia/reference/f_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Principal Components of Zoo Time Series — f_pca","title":"Data Transformation: Principal Components of Zoo Time Series — f_pca","text":"Uses stats::prcomp() compute Principal Component Analysis time series return principal components instead original columns. Output columns named \"PC1\", \"PC2\" .","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Principal Components of Zoo Time Series — f_pca","text":"","code":"f_pca(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Principal Components of Zoo Time Series — f_pca","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Principal Components of Zoo Time Series — f_pca","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Principal Components of Zoo Time Series — f_pca","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_pca(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Convert Values to Percentages by Row — f_percentage","title":"Data Transformation: Convert Values to Percentages by Row — f_percentage","text":"Data Transformation: Convert Values Percentages Row","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Convert Values to Percentages by Row — f_percentage","text":"","code":"f_percentage(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Convert Values to Percentages by Row — f_percentage","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_percentage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Convert Values to Percentages by Row — f_percentage","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_percentage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Convert Values to Percentages by Row — f_percentage","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_percentage(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Convert Values to Proportions by Row — f_proportion","title":"Data Transformation: Convert Values to Proportions by Row — f_proportion","text":"Data Transformation: Convert Values Proportions Row","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Convert Values to Proportions by Row — f_proportion","text":"","code":"f_proportion(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Convert Values to Proportions by Row — f_proportion","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Convert Values to Proportions by Row — f_proportion","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Convert Values to Proportions by Row — f_proportion","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_proportion(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Rescaling Values of Zoo Time Series to a New Range — f_rescale","title":"Data Transformation: Rescaling Values of Zoo Time Series to a New Range — f_rescale","text":"Data Transformation: Rescaling Values Zoo Time Series New Range","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Rescaling Values of Zoo Time Series to a New Range — f_rescale","text":"","code":"f_rescale(x = NULL, new_min = 0, new_max = 1, old_min = NULL, old_max = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Rescaling Values of Zoo Time Series to a New Range — f_rescale","text":"x (required, zoo object) Time Series. Default: NULL new_min (optional, numeric) New minimum value. Default: 0 new_max (optional_numeric) New maximum value. Default: 1 old_min (optional, numeric) Old minimum value. Default: NULL old_max (optional_numeric) Old maximum value. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Rescaling Values of Zoo Time Series to a New Range — f_rescale","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Rescaling Values of Zoo Time Series to a New Range — f_rescale","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_rescale(   x = x,   new_min = 0,   new_max = 100 )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Data Centering and Scaling by Column — f_scale","title":"Data Transformation: Data Centering and Scaling by Column — f_scale","text":"Wraps base::scale() global centering scaling tsl_transform().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Data Centering and Scaling by Column — f_scale","text":"","code":"f_scale(x = NULL, center = TRUE, scale = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/f_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Data Centering and Scaling by Column — f_scale","text":"x (required, zoo object) Zoo time series object transform. center (optional, logical numeric vector) Triggers centering TRUE. Default: TRUE scale (optional, logical numeric vector) Triggers scaling TRUE. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Data Centering and Scaling by Column — f_scale","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Data Centering and Scaling by Column — f_scale","text":"","code":"x <- zoo_simulate()  y <- f_scale(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Slope of Linear Regression with Time — f_slope","title":"Data Transformation: Slope of Linear Regression with Time — f_slope","text":"Designed usage tsl_aggregate(). Uses linear regression compute return slope numeric vector. Returns 0 length input vector 1 linear regression fails.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Slope of Linear Regression with Time — f_slope","text":"","code":"f_slope(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Slope of Linear Regression with Time — f_slope","text":"x (required, numeric vector) input vector. Default: NULL ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Slope of Linear Regression with Time — f_slope","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Slope of Linear Regression with Time — f_slope","text":"","code":"# Numeric vector of any length f_slope(x = cumsum(runif(10))) #> [1] 0.4370429  # Numeric vector with length = 1 f_slope(x = 10) #> [1] 0  # Numeric vector with length = 0 f_slope(x = numeric(0)) #> [1] 0"},{"path":"https://blasbenito.github.io/distantia/reference/f_smooth_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Moving Window Smoothing of Zoo Time Series — f_smooth_window","title":"Data Transformation: Moving Window Smoothing of Zoo Time Series — f_smooth_window","text":"Simplified wrapper zoo::rollapply() apply rolling window smoothing zoo objects.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_smooth_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Moving Window Smoothing of Zoo Time Series — f_smooth_window","text":"","code":"f_smooth_window(x = NULL, smoothing_window = 3, smoothing_f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_smooth_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Moving Window Smoothing of Zoo Time Series — f_smooth_window","text":"x (required, zoo object) Zoo time series object transform. Default: NULL smoothing_window (required, odd integer) Width window compute rolling statistics time series. odd number. Even numbers coerced odd adding one. Default: 3 smoothing_f (required, function) name without quotes parenthesis standard function smooth time series. Typical examples mean (default), max, mean, median, sd. Custom functions able handle zoo objects matrices also allowed. Default: mean. ... (optional, additional arguments) additional arguments smoothing_f. Used argument ... zoo::rollapply().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_smooth_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Moving Window Smoothing of Zoo Time Series — f_smooth_window","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_smooth_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Moving Window Smoothing of Zoo Time Series — f_smooth_window","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_smooth_window(   x = x,   smoothing_window = 5,   smoothing_f = mean )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"Fits linear model column zoo object using time predictor, predicts outcome.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"","code":"f_trend_linear(x = NULL, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"x (required, zoo object) Zoo time series object transform. center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_trend_linear(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/fagus_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","title":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","text":"Site Coordinates Fagus sylvatica Stands","code":""},{"path":"https://blasbenito.github.io/distantia/reference/fagus_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","text":"","code":"data(fagus_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/fagus_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","text":"sf data frame 3 rows 4 columns","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"data frame 648 rows representing enhanced vegetation index, rainfall temperature three stands Fagus sylvatica Spain, Germany, Sweden.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"","code":"data(fagus_dynamics)"},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"data frame 5 columns 648 rows.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"Site coordinates dataset fagus_coordinates.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"","code":"data(\"fagus_dynamics\")  #to time series list fagus <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )  #time series plot if(interactive()){   tsl_plot(   tsl = fagus   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/importance_legacy_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_legacy_cpp","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_legacy_cpp","text":"Computes contribution individual variables similarity/dissimilarity two irregular multivariate time series. opposition robust version, least-cost paths combination variables computed independently, makes results individual variables harder compare. function used objective replicating importance scores generated previous versions package distantia. function generates data frame following columns: variable: name individual variable importance commputed, column names arguments x y. psi: global dissimilarity score psi two time series. psi_only_with: dissimilarity x y computed given variable alone. psi_without: dissimilarity x y computed variables. psi_difference: difference psi_only_with psi_without. importance: contribution variable similarity/dissimilarity x y, computed ((psi_all - psi_without) * 100) / psi_all. Positive scores represent contribution dissimilarity, negative scores represent contribution similarity.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_legacy_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_legacy_cpp","text":"","code":"importance_legacy_cpp(   y,   x,   distance = \"euclidean\",   diagonal = FALSE,   weighted = TRUE,   ignore_blocks = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/importance_legacy_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_legacy_cpp","text":"y (required, numeric matrix) multivariate time series number columns 'x'. x (required, numeric matrix) multivariate time series. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_legacy_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_legacy_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_legacy_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_legacy_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   rows = 100   )  y <- zoo_simulate(   seed = 2,   rows = 150   )  #different number of rows #this is not a requirement though! nrow(x) == nrow(y) #> [1] FALSE  #compute importance df <- importance_legacy_cpp(   x = x,   y = y,   distance = \"euclidean\" )  df #>   variable     psi psi_only_with psi_without psi_difference importance #> 1        a 5.90895      3.707647    6.235127      -2.527480  -5.520046 #> 2        b 5.90895      3.655116    5.511635      -1.856518   6.723961 #> 3        c 5.90895      2.716768    5.741011      -3.024243   2.842119 #> 4        d 5.90895      3.272493    5.840707      -2.568214   1.154905 #> 5        e 5.90895      1.352853    6.137938      -4.785084  -3.875268"},{"path":"https://blasbenito.github.io/distantia/reference/importance_lock_step_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_lock_step_cpp","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_lock_step_cpp","text":"Computes contribution individual variables similarity/dissimilarity two aligned multivariate time series. function generates data frame following columns: variable: name individual variable importance commputed, column names arguments x y. psi: global dissimilarity score psi two time series. psi_only_with: dissimilarity x y computed given variable alone. psi_without: dissimilarity x y computed variables. psi_difference: difference psi_only_with psi_without. importance: contribution variable similarity/dissimilarity x y, computed (psi_difference * 100) / psi_all. Positive scores represent contribution dissimilarity, negative scores represent contribution similarity.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_lock_step_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_lock_step_cpp","text":"","code":"importance_lock_step_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/importance_lock_step_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_lock_step_cpp","text":"x (required, numeric matrix) multivariate time series. y (required, numeric matrix) multivariate time series number columns rows 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_lock_step_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_lock_step_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_lock_step_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_lock_step_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   irregular = FALSE   )  y <- zoo_simulate(   seed = 2,   irregular = FALSE   )  #same number of rows nrow(x) == nrow(y) #> [1] TRUE  #compute importance df <- importance_lock_step_cpp(   x = x,   y = y,   distance = \"euclidean\" )  df #>   variable      psi psi_only_with psi_without psi_difference  importance #> 1        a 5.216396      4.140726    5.328400     -1.1876738 -22.7680903 #> 2        b 5.216396      5.036421    5.048808     -0.0123872  -0.2374667 #> 3        c 5.216396      6.763852    4.961907      1.8019444  34.5438542 #> 4        d 5.216396      7.782788    4.922800      2.8599885  54.8269006 #> 5        e 5.216396      3.673350    5.914521     -2.2411717 -42.9639841"},{"path":"https://blasbenito.github.io/distantia/reference/importance_robust_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_robust_cpp","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_robust_cpp","text":"Computes contribution individual variables similarity/dissimilarity two irregular multivariate time series. opposition legacy version, importance computation performed taking least-cost path whole sequence reference. operation makes importance scores individual variables fully comparable. function generates data frame following columns: variable: name individual variable importance computed, column names arguments x y. psi: global dissimilarity score psi two time series. psi_only_with: dissimilarity x y computed given variable alone. psi_without: dissimilarity x y computed variables. psi_difference: difference psi_only_with psi_without. importance: contribution variable similarity/dissimilarity x y, computed (psi_difference * 100) / psi_all. Positive scores represent contribution dissimilarity, negative scores represent contribution similarity.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_robust_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_robust_cpp","text":"","code":"importance_robust_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/importance_robust_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_robust_cpp","text":"x (required, numeric matrix) multivariate time series. y (required, numeric matrix) multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: TRUE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: TRUE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_robust_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_robust_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_robust_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_robust_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   rows = 100   )  y <- zoo_simulate(   seed = 2,   rows = 150   )  #different number of rows #this is not a requirement though! nrow(x) == nrow(y) #> [1] FALSE  #compute importance df <- importance_robust_cpp(   x = x,   y = y,   distance = \"euclidean\" )  df #>   variable     psi psi_only_with psi_without psi_difference    importance #> 1        a 6.90895      6.968817    6.969328  -0.0005109117  -0.007394926 #> 2        b 6.90895      7.283144    6.930810   0.3523345221   5.099682515 #> 3        c 6.90895      7.214624    6.815044   0.3995803049   5.783516989 #> 4        d 6.90895      6.758557    6.704001   0.0545567459   0.789653200 #> 5        e 6.90895      6.036200    7.133427  -1.0972265521 -15.881234203"},{"path":"https://blasbenito.github.io/distantia/reference/mis.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollen Counts of 12 Marine Isotope Stages — mis","title":"Pollen Counts of 12 Marine Isotope Stages — mis","text":"data frame 427 rows representing pollen counts 12 marine isotope stages 6 pollen types","code":""},{"path":"https://blasbenito.github.io/distantia/reference/mis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pollen Counts of 12 Marine Isotope Stages — mis","text":"","code":"data(mis)"},{"path":"https://blasbenito.github.io/distantia/reference/mis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pollen Counts of 12 Marine Isotope Stages — mis","text":"data frame 8 columns 427 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/mis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pollen Counts of 12 Marine Isotope Stages — mis","text":"","code":"#to time series list tsl <- tsl_initialize(   x = mis,   id_column = \"mis\",   time_column = \"sample_order\" )  #time series plot if(interactive()){   tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:3     ),   guide_columns = 2   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — null_psi_cpp","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — null_psi_cpp","text":"Applies permutation methods compute null distributions psi scores two time series. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — null_psi_cpp","text":"","code":"null_psi_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   repetitions = 100L,   permutation = \"restricted_by_row\",   block_size = 3L,   seed = 1L )"},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — null_psi_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix). distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. argument nothing block_size!. Default: FALSE. repetitions (optional, integer) number null psi values generate. Default: 100 permutation (optional, character) permutation method. Valid values listed higher lower randomness: \"free\": unrestricted shuffling rows columns. Ignores block_size. \"free_by_row\": unrestricted shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling rows columns within blocks. \"restricted_by_row\": restricted shuffling rows within blocks. block_size (optional, integer) block size rows restricted permutation. block size 3 indicates row can permuted within block 3 adjacent rows. Minimum value 2. Default: 3. seed (optional, integer) initial random seed use replicability. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — null_psi_cpp","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_lock_step_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — null_psi_lock_step_cpp","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — null_psi_lock_step_cpp","text":"Applies permutation methods compute null distributions psi scores two time series observed times. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_lock_step_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — null_psi_lock_step_cpp","text":"","code":"null_psi_lock_step_cpp(   x,   y,   distance = \"euclidean\",   repetitions = 100L,   permutation = \"restricted_by_row\",   block_size = 3L,   seed = 1L )"},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_lock_step_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — null_psi_lock_step_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". repetitions (optional, integer) number null psi values generate. Default: 100 permutation (optional, character) permutation method. Valid values listed higher lower randomness: \"free\": unrestricted shuffling rows columns. Ignores block_size. \"free_by_row\": unrestricted shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling rows columns within blocks. \"restricted_by_row\": restricted shuffling rows within blocks. block_size (optional, integer) block size rows restricted permutation. block size 3 indicates row can permuted within block 3 adjacent rows. Minimum value 2. Default: 3. seed (optional, integer) initial random seed use replicability. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/null_psi_lock_step_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — null_psi_lock_step_cpp","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"Unrestricted shuffling rows within whole sequence.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"","code":"permute_free_by_row_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) function ignores argument sets x.nrow(). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"Unrestricted shuffling cases within whole sequence.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"","code":"permute_free_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) function ignores argument sets x.nrow(). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"Divides sequence blocks given size permutes rows within blocks. Larger block sizes increasingly disrupt data structure time.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"","code":"permute_restricted_by_row_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) block size number rows. Minimum value 2, maximum value nrow(x). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"Divides sequence time series blocks permutes cases within blocks. function preserve rows, used sequence dependent columns. Larger block sizes increasingly disrupt data structure time.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"","code":"permute_restricted_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) block size number rows. Minimum value 2, maximum value nrow(x). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized Dissimilarity Score — psi","title":"Normalized Dissimilarity Score — psi","text":"Demonstration function computes psi dissimilarity score (Birks Gordon 1985). Psi computed  \\(\\psi = (2a - b) / b\\), \\(\\) sum distances least cost path two time series, \\(b\\) cumulative sum distances consecutive cases two time series. diagonals used computation least cost path, one added result equation .","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized Dissimilarity Score — psi","text":"","code":"psi(path_sum = NULL, auto_sum = NULL, diagonal = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized Dissimilarity Score — psi","text":"path_sum (required, numeric) Result psi_cost_path_sum(), sum distances least cost path two time series. Default: NULL auto_sum (required, numeric) Result psi_auto_sum(), cumulative sum consecutive cases two time series. Default: NULL diagonal (optional, logical) Used correct computation psi diagonals used computation least cost path. cost matrix least cost path computed using diagonal = TRUE, argument TRUE well. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized Dissimilarity Score — psi","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalized Dissimilarity Score — psi","text":"","code":"#distance metric d <- \"euclidean\"  #use diagonals in least cost computations diagonal <- TRUE  #remove blocks from least cost path ignore_blocks <- TRUE  #simulate two time series tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #distance matrix dist_matrix <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]],   distance = d )  #cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = diagonal )  #least cost path cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix,   diagonal = diagonal )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path     ) }  #remove blocks from least cost path if(ignore_blocks == TRUE){   cost_path <- psi_cost_path_ignore_blocks(     path = cost_path   ) }  #sum of distances in least cost path xy_distance <- psi_cost_path_sum(   path = cost_path   )  #auto sum of both time series xy_autodistance <- psi_auto_sum(   x = tsl[[1]],   y = tsl[[2]],   path = cost_path,   distance = d )  #dissimilarity score psi(   path_sum = xy_distance,   auto_sum = xy_autodistance,   diagonal = diagonal ) #> [1] 3.013915  #full computation in one line distantia(   tsl = tsl,   distance = d,   diagonal = diagonal,   ignore_blocks = ignore_blocks )$psi #> [1] 3.013915  if(interactive()){   distantia_plot(     tsl = tsl,     distance = d,     diagonal = diagonal,     ignore_blocks = ignore_blocks   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"Demonstration function compute sum distances consecutive cases time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"","code":"psi_auto_distance(x = NULL, path = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"x (required, zoo object matrix) univariate multivariate time series NAs. Default: NULL path (optional, data frame) result psi_cost_path_ignore_blocks(), required blocks least cost path ignored. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"","code":"#simulate a zoo object x <- zoo_simulate(   seed = 1 )  #sum of distances psi_auto_distance(   x = x,   distance = \"euclidean\" ) #> [1] 9.754384"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Sum — psi_auto_sum","title":"Auto Sum — psi_auto_sum","text":"Demonstration function computes sum distances consecutive samples two time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Sum — psi_auto_sum","text":"","code":"psi_auto_sum(x = NULL, y = NULL, path = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Sum — psi_auto_sum","text":"x (required, zoo object numeric matrix) univariate multivariate time series NAs. Default: NULL. y (required, zoo object numeric matrix) time series number columns x NAs. Default: NULL. path (required, data frame) least cost path produced psi_cost_path(). required psi_cost_path_ignore_blocks() applied path. Default: NULL. distance (optional, character string) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Sum — psi_auto_sum","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto Sum — psi_auto_sum","text":"","code":"#simulate two zoo objects tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #auto sum of distances psi_auto_sum(   x = tsl[[1]],   y = tsl[[2]],   distance = \"euclidean\" ) #> [1] 19.87613  #same as: x_sum <- psi_auto_distance(   x = tsl[[1]],   distance = \"euclidean\" )  y_sum <- psi_auto_distance(   x = tsl[[2]],   distance = \"euclidean\" )  x_sum + y_sum #> [1] 19.87613"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost Matrix — psi_cost_matrix","title":"Cost Matrix — psi_cost_matrix","text":"Demonstration function compute cost matrix distance matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost Matrix — psi_cost_matrix","text":"","code":"psi_cost_matrix(dist_matrix = NULL, diagonal = TRUE, weighted = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost Matrix — psi_cost_matrix","text":"dist_matrix (required, numeric matrix). Distance matrix generated psi_dist_matrix(). Default: NULL diagonal (optional, logical). TRUE, diagonals included computation cost matrix Default: TRUE weighted (optional, logical). relevant diagonal = TRUE. TRUE, weights diagonal cost factor 1.414214. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost Matrix — psi_cost_matrix","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cost Matrix — psi_cost_matrix","text":"","code":"#simulate two time series tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #distance matrix dist_matrix <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]],   distance = \"euclidean\" )  #cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix )  if(interactive()){   utils_matrix_plot(     m = cost_matrix     ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Least Cost Path — psi_cost_path","title":"Least Cost Path — psi_cost_path","text":"Demonstration function compute least cost path within least cost matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least Cost Path — psi_cost_path","text":"","code":"psi_cost_path(dist_matrix = NULL, cost_matrix = NULL, diagonal = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least Cost Path — psi_cost_path","text":"dist_matrix (required, numeric matrix) Distance matrix generated psi_dist_matrix(). Default: NULL cost_matrix (required, numeric matrix) Cost matrix generated distance matrix psi_cost_matrix(). Default: NULL diagonal (optional, logical) TRUE, diagonals used least-cost path search. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Least Cost Path — psi_cost_path","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Least Cost Path — psi_cost_path","text":"","code":"#simulate two time series tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #distance matrix dist_matrix <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]],   distance = \"euclidean\" )  #cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = FALSE )  #diagonal least cost path #------------------------ cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path     ) }   #orthogonal least cost path #-------------------------- cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix,   diagonal = FALSE )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_ignore_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims Blocks from a Least Cost Path — psi_cost_path_ignore_blocks","title":"Trims Blocks from a Least Cost Path — psi_cost_path_ignore_blocks","text":"orthogonal least cost paths (diagonals ignored), long straight segments (.k.\"blocks\") may appear highly dissimilar sections time series. Blocks inflate psi dissimilarity scores, making pairs time series seem dissimilar actually . demonstration function identifies removes blocks, resulting fairer dissimilarity analyses.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_ignore_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims Blocks from a Least Cost Path — psi_cost_path_ignore_blocks","text":"","code":"psi_cost_path_ignore_blocks(path = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_ignore_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims Blocks from a Least Cost Path — psi_cost_path_ignore_blocks","text":"path (required, data frame) least cost path produced psi_cost_path(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_ignore_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims Blocks from a Least Cost Path — psi_cost_path_ignore_blocks","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_ignore_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trims Blocks from a Least Cost Path — psi_cost_path_ignore_blocks","text":"","code":"#simulate two time series tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #distance matrix dist_matrix <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]],   distance = \"euclidean\" )  #orthogonal least cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = FALSE )  #orthogonal least cost path cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix,   diagonal = FALSE )  nrow(cost_path) #> [1] 199  #notice several blocks in the lower left corner if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path   ) }  #removing blocks cost_path_trimmed <- psi_cost_path_ignore_blocks(   path = cost_path )  #resulting data frame is much smaller #rows with repeated x or y coordinates removed nrow(cost_path_trimmed) #> [1] 32  #but the path shape is preserved if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path_trimmed   ) }  #psi score with blocks distantia(   tsl = tsl,   diagonal = FALSE,   ignore_blocks = FALSE )$psi #> [1] 3.996377  #psi score without blocks distantia(   tsl = tsl,   diagonal = FALSE,   ignore_blocks = TRUE )$psi #> [1] 1.410087"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of Distances in Least Cost Path — psi_cost_path_sum","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"Demonstration function sum distances least cost path.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"","code":"psi_cost_path_sum(path = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"path (required, data frame) least cost path produced psi_cost_path(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"","code":"#simulate two time series tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #distance matrix dist_matrix <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]],   distance = \"euclidean\" )  #cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix )  #least cost path cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = path     ) }  #sum of distances of the least cost path psi_cost_path_sum(   path = cost_path   ) #> [1] 34.77545"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_cpp","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_cpp","text":"Computes psi score two time series y x number columns. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_cpp","text":"","code":"psi_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix). distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_dist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Matrix — psi_dist_matrix","title":"Distance Matrix — psi_dist_matrix","text":"Demonstration function compute distance matrix two univariate multivariate time series. function accept NA data matrices x y.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_dist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Matrix — psi_dist_matrix","text":"","code":"psi_dist_matrix(x = NULL, y = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_dist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Matrix — psi_dist_matrix","text":"x (required, zoo object numeric matrix) time series NAs. Default: NULL y (zoo object numeric matrix) time series columns x NAs. Default: NULL distance (optional, character string) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_dist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Matrix — psi_dist_matrix","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_dist_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Matrix — psi_dist_matrix","text":"","code":"#simulate two time series tsl <- tsl_simulate(   n = 2,   seed = 1 )  if(interactive()){   tsl_plot(tsl = tsl) }  #distance matrix dist_matrix <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]],   distance = \"euclidean\" )  if(interactive()){   utils_matrix_plot(     m = dist_matrix     ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_formula_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Computation of the Psi Dissimilarity Score — psi_formula_cpp","title":"(C++) Computation of the Psi Dissimilarity Score — psi_formula_cpp","text":"Computes psi dissimilarity score two time series least cost path sum auto sums.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_formula_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Computation of the Psi Dissimilarity Score — psi_formula_cpp","text":"","code":"psi_formula_cpp(cost_path_sum, auto_sum, diagonal = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_formula_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Computation of the Psi Dissimilarity Score — psi_formula_cpp","text":"cost_path_sum (required, numeric) output cost_path_sum_cpp() least cost path. auto_sum (required, numeric) auto sum sequences, result auto_sum_cpp(). diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_formula_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Computation of the Psi Dissimilarity Score — psi_formula_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_lock_step_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_lock_step_cpp","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_lock_step_cpp","text":"Computes psi dissimilarity score two time series observed times. Time series y x number columns rows. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_lock_step_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_lock_step_cpp","text":"","code":"psi_lock_step_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_lock_step_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_lock_step_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_lock_step_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_lock_step_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"Subsets time series matrix coordinates trimmed least-cost path blocks ignored dissimilarity analysis.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"","code":"subset_matrix_by_rows_cpp(m, rows)"},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"m (required, numeric matrix) univariate multivariate time series. rows (required, integer vector) vector rows subset least-cost path data frame.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"","code":"#simulate a time series m <- zoo_simulate(seed = 1)  #sample some rows rows <- sample(   x = nrow(m),   size = 10   ) |>   sort()  #subset by rows m_subset <- subset_matrix_by_rows_cpp(   m = m,   rows = rows   )  #compare with original m[rows, ] #>                    a         b         c         d         e #> 2010-06-15 0.5577262 0.4963594 0.2662721 0.1651134 0.5160559 #> 2011-08-11 0.4853985 0.1920699 0.2034930 0.2256599 0.5121917 #> 2012-02-10 0.5046172 0.2269883 0.2609874 0.3730869 0.5566889 #> 2013-08-14 0.5719184 0.3731751 0.3478408 0.3344399 0.4395588 #> 2013-09-20 0.5324252 0.3389782 0.4051191 0.3932731 0.5122154 #> 2015-05-18 0.6255854 0.5995674 0.5951206 0.6872253 0.6527355 #> 2016-06-25 0.6465068 0.6766877 0.5900437 0.6013624 0.6435012 #> 2017-06-27 0.5057219 0.5587751 0.6883220 0.7603664 0.4707236 #> 2018-02-02 0.4534827 0.5420206 0.6063876 0.6067925 0.4729409 #> 2018-12-11 0.1963668 0.1476422 0.7414715 0.5586704 0.3289944"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Cases in Time Series Lists — tsl_aggregate","title":"Aggregate Cases in Time Series Lists — tsl_aggregate","text":"Function aggregate zoo objects within time series list. function supports progress bars generated progressr package. See examples. function also accepts parallelization setup via future::plan(), might worth large time series lists. Objective Time series aggregation involves grouping observations summarizing group values statistical function. operation useful : Decrease (downsampling) temporal resolution time series. Highlight particular states time series time. example, daily temperature series can aggregated month using max represent highest temperatures month. Transform irregular time series regular. function aggregates time series lists overlapping times. Please check overlap assessing columns \"begin\" \"end \" data frame resulting df <- tsl_time(tsl = tsl). Aggregation limited shortest time series time series list. aggregate non-overlapping time series, please subset individual components tsl one one either using tsl_subset() syntax tsl = my_tsl[[]]. Methods function returning single number numeric vector can used aggregate time series list. Quoted unquoted function names can used. Additional arguments functions can passed via argument .... Typical examples : mean \"mean\": see mean(). median \"median\": see stats::median(). quantile \"quantile\": see stats::quantile(). min \"min\": see min(). max \"max\": see max(). sd \"sd\": compute standard deviation, see stats::sd(). var \"var\": compute group variance, see stats::var(). length \"length\": compute group length. sum \"sum\": see sum(). f_slope \"f_slope\": compute group slope, see f_slope().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Cases in Time Series Lists — tsl_aggregate","text":"","code":"tsl_aggregate(tsl = NULL, new_time = NULL, method = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Cases in Time Series Lists — tsl_aggregate","text":"tsl (required, list) Time series list. Default: NULL new_time (required, numeric, numeric vector, Date vector, POSIXct vector, keyword) Definition aggregation pattern. available options : numeric vector: \"numeric\" time class, defines breakpoints time series aggregation. \"Date\" \"POSIXct\" vector: , time classes \"Date\" \"POSIXct.\" case, input vector coerced time class tsl argument. numeric: defines fixed time intervals units tsl time series aggregation. Used time class \"numeric\", coerced integer interpreted days time classes \"Date\" \"POSIXct\". keyword (see utils_time_units()): common options time classes \"Date\" \"POSIXct\" : \"millennia\", \"centuries\", \"decades\", \"years\", \"quarters\", \"months\", \"weeks\". Exclusive keywords \"POSIXct\" time class : \"days\", \"hours\", \"minutes\", \"seconds\". time class \"numeric\" accepts keywords coded scientific numbers, \"1e8\" \"1e-8\". method (required, function name) Name standard custom function aggregate numeric vectors. Typical examples mean, max,min, median, quantile. Default: mean. ... (optional) arguments method.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Cases in Time Series Lists — tsl_aggregate","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Cases in Time Series Lists — tsl_aggregate","text":"","code":"#parallelization setup (not worth it for this data size) future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  # daily aggregation #----------------------------------  #flight paths of five albatrosses #scaled to improve visualization tsl <- tsl_initialize(   x = albatross,   id_column = \"id\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale   )  #plot time series if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 4     ) }  #check time features tsl_time(tsl) #>      name rows   class units    length resolution               begin #> X132 X132 1231 POSIXct  days  83.81359 0.06814113 2008-06-23 17:58:44 #> X134 X134 1051 POSIXct  days  70.12556 0.06678624 2008-05-31 14:59:31 #> X136 X136 1401 POSIXct  days  96.81472 0.06915337 2008-06-23 17:58:01 #> X153 X153 1300 POSIXct  days  84.62737 0.06514809 2008-07-10 23:57:31 #> X156 X156 1506 POSIXct  days 116.37640 0.07732651 2008-06-19 02:58:55 #>                      end     keywords #> X132 2008-09-15 13:30:17 months, .... #> X134 2008-08-09 18:00:18 months, .... #> X136 2008-09-28 13:31:13 quarters.... #> X153 2008-10-03 15:00:56 months, .... #> X156 2008-10-13 12:00:56 quarters.... #many observations per day #different starting and ending dates  #aggregation: mean daily values tsl_daily <- tsl_aggregate(   tsl = tsl,   new_time = \"days\",   method = mean )  #check time features tsl_time(tsl_daily) #>      name rows   class units length resolution               begin #> X132 X132  135 POSIXct  days    134          1 2008-05-31 14:59:31 #> X134 X134  135 POSIXct  days    134          1 2008-05-31 14:59:31 #> X136 X136  135 POSIXct  days    134          1 2008-05-31 14:59:31 #> X153 X153  135 POSIXct  days    134          1 2008-05-31 14:59:31 #> X156 X156  135 POSIXct  days    134          1 2008-05-31 14:59:31 #>                      end     keywords #> X132 2008-10-12 14:59:31 quarters.... #> X134 2008-10-12 14:59:31 quarters.... #> X136 2008-10-12 14:59:31 quarters.... #> X153 2008-10-12 14:59:31 quarters.... #> X156 2008-10-12 14:59:31 quarters.... #one observation per day #same starting and ending dates  if(interactive()){   tsl_plot(     tsl = tsl_daily,     guide_columns = 4   ) }   # other supported keywords #----------------------------------  #simulate full range of calendar dates tsl <- tsl_simulate(   n = 2,   rows = 1000,   time_range = c(     \"0000-01-01\",     as.character(Sys.Date())     ) )  #mean value by millennia (extreme case!!!) tsl_millennia <- tsl_aggregate(   tsl = tsl,   new_time = \"millennia\",   method = mean )  if(interactive()){   tsl_plot(tsl_millennia) }  #max value by centuries tsl_centuries <- tsl_aggregate(   tsl = tsl,   new_time = \"centuries\",   method = max )  if(interactive()){   tsl_plot(tsl_centuries) }   #quantile 0.75 value by centuries tsl_centuries <- tsl_aggregate(   tsl = tsl,   new_time = \"centuries\",   method = stats::quantile,   probs = 0.75 #argument of stats::quantile() )  if(interactive()){   tsl_plot(tsl_centuries) } #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Column Names in Time Series Lists — tsl_colnames_clean","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"Uses function utils_clean_names() simplify homogeneize messy column names time series list. cleanup operations applied following order: Remove leading trailing whitespaces. Generates syntactically valid names base::make.names(). Replaces dots spaces separator. Coerces names lowercase. capitalize_first = TRUE, first letter capitalized. capitalize_all = TRUE, letters capitalized. argument length provided, base::abbreviate() used abbreviate new column names. suffix provided, added end column name using separator. prefix provided, added beginning column name using separator.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"","code":"tsl_colnames_clean(   tsl = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"tsl (required, list) Time series list. Default: NULL lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots. Also used separate suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) String append cleaned names. Default: NULL. prefix (optional, character string)  String prepend cleaned names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"","code":"#generate example data tsl <- tsl_simulate(cols = 3)  #list all column names tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"a\" \"b\" \"c\" #>  #> $B #> [1] \"a\" \"b\" \"c\" #>   #rename columns tsl <- tsl_colnames_set(   tsl = tsl,   new_names = list(     a = \"New name 1\",     b = \"new Name 2\",     c = \"NEW NAME 3\"   ) )  #check new names tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"New name 1\" \"new Name 2\" \"NEW NAME 3\" #>  #> $B #> [1] \"New name 1\" \"new Name 2\" \"NEW NAME 3\" #>   #clean names tsl <- tsl_colnames_clean(   tsl = tsl )  tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"New_name_1\" \"new_Name_2\" \"NEW_NAME_3\" #>  #> $B #> [1] \"New_name_1\" \"new_Name_2\" \"NEW_NAME_3\" #>   #abbreviated tsl <- tsl_colnames_clean(   tsl = tsl,   capitalize_first = TRUE,   length = 6,   suffix = \"clean\" )  tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"Nw_n_1_clean\" \"Nw_N_2_clean\" \"NEW_NA_clean\" #>  #> $B #> [1] \"Nw_n_1_clean\" \"Nw_N_2_clean\" \"NEW_NA_clean\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Column Names from a Time Series Lists — tsl_colnames_get","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"Get Column Names Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"","code":"tsl_colnames_get(tsl = NULL, names = c(\"all\", \"shared\", \"exclusive\"))"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"tsl (required, list) Time series list. Default: NULL names (optional, character string) Three different sets column names can requested: \"\" (default): list column names zoo object tsl. \"shared\": character vector shared column names tsl. \"exclusive\": list names exclusive columns zoo object tsl.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"character vector list character vectors","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"","code":"#generate example data tsl <- tsl_simulate()  #list all column names tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>   #change one column name names(tsl[[1]])[1] <- \"new_column\"  #all names again tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"new_column\" \"b\"          \"c\"          \"d\"          \"e\"          #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>   #shared column names tsl_colnames_get(   tsl = tsl,   names = \"shared\" ) #> [1] \"b\" \"c\" \"d\" \"e\"  #exclusive column names tsl_colnames_get(   tsl = tsl,   names = \"exclusive\" ) #> $A #> [1] \"new_column\" #>  #> $B #> [1] \"a\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Column Names in Time Series Lists — tsl_colnames_set","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"Set Column Names Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"","code":"tsl_colnames_set(tsl = NULL, new_names = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"tsl (required, list) Time series list. Default: NULL new_names (required, list) Named list. List names match old column names tsl, named item contain character string new name. example, colnames = list(old_name = \"new_name\") changes name column \"old_name\" \"new_name\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"","code":"#generate example data tsl <- tsl_simulate(cols = 3)  #list all column names tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"a\" \"b\" \"c\" #>  #> $B #> [1] \"a\" \"b\" \"c\" #>   #rename columns tsl <- tsl_colnames_set(   tsl = tsl,   new_names = list(     a = \"new_name_1\",     b = \"new_name_1\",     c = \"new_name_3\"   ) )  #check result tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"new_name_1\" \"new_name_1\" \"new_name_3\" #>  #> $B #> [1] \"new_name_1\" \"new_name_1\" \"new_name_3\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Count NA Cases in Time Series Lists — tsl_count_NA","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"Converts Inf, -Inf, NaN NA (via tsl_Inf_to_NA() tsl_NaN_to_NA()), counts total number NA cases time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"","code":"tsl_count_NA(tsl = NULL, quiet = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"tsl (required, list) Time series list. Default: NULL quiet (optional, logical) TRUE, messages suppressed. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"","code":"#tsl with no NA cases tsl <- tsl_simulate()  tsl_count_NA(tsl = tsl) #> $A #> [1] 0 #>  #> $B #> [1] 0 #>   #tsl with NA cases tsl <- tsl_simulate(   na_fraction = 0.3 )  tsl_count_NA(tsl = tsl) #> NA cases in 'tsl':  #>   name NA_cases #> 1    A      150 #> 2    B      150 #> Please impute, replace, or remove them with tsl_handle_NA().FALSE #> $A #> [1] 150 #>  #> $B #> [1] 150 #>   #tsl with variety of empty cases tsl <- tsl_simulate() tsl[[1]][1, 1] <- Inf tsl[[1]][2, 1] <- -Inf tsl[[1]][3, 1] <- NaN tsl[[1]][4, 1] <- NaN  tsl_count_NA(tsl = tsl) #> NA cases in 'tsl':  #>   name NA_cases #> 1    A        4 #> 2    B        0 #> Please impute, replace, or remove them with tsl_handle_NA().FALSE #> $A #> [1] 4 #>  #> $B #> [1] 0 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":null,"dir":"Reference","previous_headings":"","what":"Validity Assessment of Time Series Lists — tsl_diagnose","title":"Validity Assessment of Time Series Lists — tsl_diagnose","text":"Validity assessment time series lists. required features valid time series list : Argument tsl list. List tsl unique names. elements tsl zoo objects. zoo objects attribute \"name\". zoo objects unique values attribute \"name\". Names list slots zoo objects . zoo objects least one shared column name. columns zoo objects numeric. zoo objects zero NA cases. function analyzes time series list returns without modification, issues warning condition met, explanation solve issue.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validity Assessment of Time Series Lists — tsl_diagnose","text":"","code":"tsl_diagnose(tsl = NULL, full = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validity Assessment of Time Series Lists — tsl_diagnose","text":"tsl (required, list) Time series list. Default: NULL full (optional, logical) TRUE, function runs checks looking individual values time series list. makes test slower, comprehensive. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validity Assessment of Time Series Lists — tsl_diagnose","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validity Assessment of Time Series Lists — tsl_diagnose","text":"","code":"#simulate time series list with NA data tsl <- tsl_simulate(   n = 3,   na_fraction = 0.1 )  #adding a few additional issues:  #set names of one time series to uppercase colnames(tsl[[2]]) <- toupper(colnames(tsl[[2]]))  #change name of one column in one time series colnames(tsl[[3]])[2] <- \"x\"  #remove list names names(tsl) <- NULL  #diagnose issues in tsl tsl <- tsl_diagnose(   tsl = tsl,   full = TRUE ) #> This time series list is NOT VALID. #> The issue/s to address are: #>   - elements of 'tsl' must be named: use tsl_names_set() or names(tsl) <- c(...) to fix this issue. #>   - zoo objects in 'tsl' must have at least one shared column: use tsl_colnames_get() to identify shared and/or exclusive columns. #>   - zoo objects in 'tsl' have NA cases: interpolate or remove them with tsl_handle_NA() to fix this issue.  #repair time series list tsl <- tsl_repair(   tsl = tsl,   full = TRUE ) #> Naming items in object 'tsl' #> Imputing NA values in zoo objects.  #diagnose again tsl <- tsl_diagnose(   tsl = tsl,   full = TRUE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle NA Cases in Time Series Lists — tsl_handle_NA","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"Removes imputes NA cases time series lists. Imputation done via interpolation time via zoo::na.approx(), still leading trailing NA cases NA interpolation, zoo::na.spline() applied well fill gaps. Interpolated values forced fall within observed data range.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"","code":"tsl_handle_NA(tsl = NULL, na_action = \"omit\", quiet = FALSE)  tsl_Inf_to_NA(tsl = NULL)  tsl_NaN_to_NA(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"tsl (required, list) Time series list. Default: NULL na_action (required, character) NA handling action. Available options : \"omit\" (default): rows NA cases removed. \"impute\" : NA cases interpolated neighbors function time (see zoo::na.approx() zoo::na.spline()). quiet (optional, logical) TRUE, messages suppressed. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"","code":"#tsl with NA cases tsl <- tsl_simulate(   na_fraction = 0.25 )  tsl_count_NA(tsl = tsl) #> NA cases in 'tsl':  #>   name NA_cases #> 1    A      125 #> 2    B      125 #> Please impute, replace, or remove them with tsl_handle_NA().FALSE #> $A #> [1] 125 #>  #> $B #> [1] 125 #>   if(interactive()){   #issues warning   tsl_plot(tsl = tsl) }  #omit NA (default) #--------------------------------------  #original row count tsl_nrow(tsl = tsl) #> $A #> [1] 100 #>  #> $B #> [1] 100 #>   #remove rows with NA tsl_no_na <- tsl_handle_NA(   tsl = tsl )  #count rows again #large data loss in this case! tsl_nrow(tsl = tsl_no_na) #> $A #> [1] 22 #>  #> $B #> [1] 25 #>   #count NA again tsl_count_NA(tsl = tsl_no_na) #> $A #> [1] 0 #>  #> $B #> [1] 0 #>   if(interactive()){   tsl_plot(tsl = tsl_no_na) }   #impute NA with zoo::na.approx #--------------------------------------  #impute NA cases tsl_no_na <- tsl_handle_NA(   tsl = tsl,   na_action = \"impute\" )  #count rows again #large data loss in this case! tsl_nrow(tsl = tsl_no_na) #> $A #> [1] 100 #>  #> $B #> [1] 100 #>   if(interactive()){   tsl_plot(tsl = tsl_no_na) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Tranform Data to a Time Series List — tsl_initialize","title":"Tranform Data to a Time Series List — tsl_initialize","text":"functions package take time series list (tsl short) main input. tsl list zoo time series objects (see zoo::zoo()). formal class tsl objects, requirements objects must follow ensure stability package functionalities (see tsl_diagnose()). requirements : NA, Inf, -Inf, NaN cases zoo objects (see tsl_count_NA() tsl_handle_NA()). zoo objects must least one common column name allow time series comparison (see tsl_colnames_get()). zoo objects character attribute \"name\" identifying object. attribute part zoo class, package ensures attribute lost data manipulations. element time series list named zoo object contains (see tsl_names_get(), tsl_names_set() tsl_names_clean()). time series list contains two zoo objects . function tsl_initialize() (alias tsl_init()) designed convert following data structures time series list: Long data frame: ID column separate time series, time column can classes \"Date\", \"POSIXct\", \"integer\", \"numeric\". resulting zoo objects list elements named values ID column. Wide data frame: column time series representing variable observed time different places. column converted separate zoo object renamed. List vectors: object like list(= runif(10), b = runif(10)) converted time series list many zoo objects vectors defined original list. List matrices: list containing matrices, list(= matrix(runif(30), 10, 3), b = matrix(runif(36), 12, 3)). List zoo objects: list zoo objects, list(= zoo_simulate(), b = zoo_simulate())","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tranform Data to a Time Series List — tsl_initialize","text":"","code":"tsl_initialize(   x = NULL,   id_column = NULL,   time_column = NULL,   lock_step = FALSE,   quiet = FALSE )  tsl_init(   x = NULL,   id_column = NULL,   time_column = NULL,   lock_step = FALSE,   quiet = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tranform Data to a Time Series List — tsl_initialize","text":"x (required, list data frame) Matrix data frame long format, list vectors, list matrices, list zoo objects. Default: NULL. id_column (optional, column name) Grouping column separating time series. Values column used time series names. Default: NULL time_column (optional lock_step = FALSE, required otherwise, character string) Name column representing time, . Default: NULL. lock_step (optional, logical) TRUE, input sequences subsetted common times according values time_column. quiet (optional, logical) TRUE, messages suppressed. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tranform Data to a Time Series List — tsl_initialize","text":"list matrices","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tranform Data to a Time Series List — tsl_initialize","text":"","code":"#long data frame #--------------------- data(\"fagus_dynamics\")  #id_column is site #time column is date #in this case, all time series have the same #length, but that's only optional, as irregular #time series are fully supported. str(fagus_dynamics) #> 'data.frame':\t648 obs. of  5 variables: #>  $ site       : chr  \"Spain\" \"Spain\" \"Spain\" \"Spain\" ... #>  $ date       : Date, format: \"2001-01-01\" \"2001-02-01\" ... #>  $ evi        : num  0.193 0.242 0.276 0.396 0.445 ... #>  $ rainfall   : num  199.8 50.6 170.9 62.7 52.7 ... #>  $ temperature: num  8.1 7.8 11 10.4 14.1 17.6 18.3 19.6 16.3 16.1 ...  #to tsl #main assumptions: #each group in id_column is a different time series #time series can have different lengths tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )  #check validity (no messages or errors if valid) tsl <- tsl_diagnose(tsl)  #class of contained objects lapply(X = tsl, FUN = class) #> $Germany #> [1] \"zoo\" #>  #> $Spain #> [1] \"zoo\" #>  #> $Sweden #> [1] \"zoo\" #>   #get names of the list slots names(x = tsl) #> [1] \"Germany\" \"Spain\"   \"Sweden\"   #get names (names of zoo objects in the list) tsl_names_get(   tsl = tsl,   zoo = TRUE   ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #all names lapply(X = tsl, FUN = \\(x) attributes(x)$name) #> $Germany #> [1] \"Germany\" #>  #> $Spain #> [1] \"Spain\" #>  #> $Sweden #> [1] \"Sweden\" #>   #plots if(interactive()){    #plot tsl   tsl_plot(tsl)    #plot single zoo object   zoo_plot(x = tsl[[1]])    #plot single zoo object with default plot method   plot(x = tsl[[1]])  }   #wide data frame #-------------------- #wide data frame with same variable in different places df <- data.frame(   date = fagus_dynamics[   fagus_dynamics$site == \"Spain\", \"date\"   ],   Spain = fagus_dynamics[   fagus_dynamics$site == \"Spain\", \"evi\"   ],   Germany = fagus_dynamics[   fagus_dynamics$site == \"Germany\", \"evi\"   ],   Sweden = fagus_dynamics[   fagus_dynamics$site == \"Sweden\", \"evi\"   ] )  #to tsl #key assumptions: #all columns but \"date\" represent #the same variable in different places #all time series are of the same length tsl <- tsl_initialize(   x = df,   time_column = \"date\"   )  #colnames are forced to be the same tsl_colnames_get(tsl) #> $Spain #> [1] \"x\" #>  #> $Germany #> [1] \"x\" #>  #> $Sweden #> [1] \"x\" #>   #plot if(interactive()){   tsl_plot(tsl) }   #list of vectors #--------------------- #create list of vectors vector_list <- list(   a = cumsum(stats::rnorm(n = 50)),   b = cumsum(stats::rnorm(n = 70)),   c = cumsum(stats::rnorm(n = 20)) )  #to tsl #key assumptions: #all vectors represent the same variable #in different places #time series can be of different lengths #no time column, integer indices are used as time tsl <- tsl_initialize(   x = vector_list )  #plot if(interactive()){   tsl_plot(tsl) }  #list of matrices #------------------------- #create list of matrices matrix_list <- list(   a = matrix(runif(30), nrow = 10, ncol = 3),   b = matrix(runif(80), nrow = 20, ncol = 4) )  #to tsl #key assumptions: #each matrix represents a multivariate time series #in a different place #all multivariate time series have the same columns #no time column, integer indices are used as time tsl <- tsl_initialize(   x = matrix_list )  #check column names tsl_colnames_get(tsl = tsl) #> $a #> [1] \"x1\" \"x2\" \"x3\" #>  #> $b #> [1] \"x1\" \"x2\" \"x3\" \"x4\" #>   #remove exclusive column tsl <- tsl_subset(   tsl = tsl,   shared_cols = TRUE   ) tsl_colnames_get(tsl = tsl) #> $a #> [1] \"x1\" \"x2\" \"x3\" #>  #> $b #> [1] \"x1\" \"x2\" \"x3\" #>   #plot if(interactive()){   tsl_plot(tsl) }  #list of zoo objects #------------------------- zoo_list <- list(   a = zoo_simulate(),   b = zoo_simulate() )  #looks like a time series list! But... zoo_list <- tsl_diagnose(tsl = zoo_list) #> This time series list is NOT VALID. #> The issue/s to address are: #>   - zoo objects in 'tsl' must have unique names: use tsl_names_set() to fix this issue. #>   - zoo objects and list items have different names:  use tsl_names_set() to fix this issue.  #let's set the names zoo_list <- tsl_names_set(tsl = zoo_list)  #check again: it's now a valid time series list zoo_list <- tsl_diagnose(tsl = zoo_list)  #to do all this in one go: tsl <- tsl_initialize(   x = list(     a = zoo_simulate(),     b = zoo_simulate()   ) )  #plot if(interactive()){   tsl_plot(tsl) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Time Series Names in a Time Series List — tsl_names_clean","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"Combines utils_clean_names() tsl_names_set() help clean, abbreviate, capitalize, add suffix prefix time series list names.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"","code":"tsl_names_clean(   tsl = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"tsl (required, list) Time series list. Default: NULL lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots. Also used separate suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) Suffix clean names. Default: NULL. prefix (optional, character string)  Prefix clean names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"","code":"#initialize time series list tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )  #original names tsl_names_get(   tsl = tsl ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #abbreviate names #--------------------------- tsl_clean <- tsl_names_clean(   tsl = tsl,   capitalize_first = TRUE,   length = 4 #abbreviate to 4 characters )  #new names tsl_names_get(   tsl = tsl_clean ) #>   Grmn   Span   Swdn  #> \"Grmn\" \"Span\" \"Swdn\"   #suffix and prefix #--------------------------- tsl_clean <- tsl_names_clean(   tsl = tsl,   capitalize_all = TRUE,   separator = \"_\",   suffix = \"fagus\",   prefix = \"country\" )  #new names tsl_names_get(   tsl = tsl_clean ) #>   COUNTRY_GERMANY_FAGUS     COUNTRY_SPAIN_FAGUS    COUNTRY_SWEDEN_FAGUS  #> \"COUNTRY_GERMANY_FAGUS\"   \"COUNTRY_SPAIN_FAGUS\"  \"COUNTRY_SWEDEN_FAGUS\""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Series Names from a Time Series Lists — tsl_names_get","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"time series list two sets names: names list items (returned names(tsl)), names contained zoo objects, stored attribute \"name\". names ideally , sake data consistency. function extracts either set names.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"","code":"tsl_names_get(tsl = NULL, zoo = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"tsl (required, list) Time series list. Default: NULL zoo (optional, logical) TRUE, attributes \"name\" zoo objects returned. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"","code":"#initialize a time series list tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )   #get names of zoo objects tsl_names_get(   tsl = tsl,   zoo = TRUE ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #get list names only tsl_names_get(   tsl = tsl,   zoo = FALSE   ) #> [1] \"Germany\" \"Spain\"   \"Sweden\"   #same as names(tsl) #> [1] \"Germany\" \"Spain\"   \"Sweden\""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Time Series Names in a Time Series List — tsl_names_set","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"Sets names time series list internal names zoo objects inside, stored attribute \"name\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"","code":"tsl_names_set(tsl = NULL, names = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"tsl (required, list) Time series list. Default: NULL names (optional, character vector) names set. Must length x. NULL, list x names, names zoo objects inside list taken names list elements.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"","code":"#simulate time series list tsl <- tsl_simulate(n = 3)  #assess validity tsl <- tsl_diagnose(   tsl = tsl )  #list and zoo names (default) tsl_names_get(   tsl = tsl ) #>   A   B   C  #> \"A\" \"B\" \"C\"   #list names tsl_names_get(   tsl = tsl,   zoo = FALSE ) #> [1] \"A\" \"B\" \"C\"  #renaming list items and zoo objects #------------------------------------ tsl <- tsl_names_set(   tsl = tsl,   names = c(\"X\", \"Y\", \"Z\") )  # check new names tsl_names_get(   tsl = tsl ) #>   X   Y   Z  #> \"X\" \"Y\" \"Z\"   #fixing naming issues #------------------------------------  #creating a invalid time series list names(tsl)[2] <- \"B\"  # check names tsl_names_get(   tsl = tsl ) #>   X   B   Z  #> \"X\" \"Y\" \"Z\"   #validate tsl #returns NOT VALID #recommends a solution tsl <- tsl_diagnose(   tsl = tsl ) #> This time series list is NOT VALID. #> The issue/s to address are: #>   - zoo objects and list items have different names:  use tsl_names_set() to fix this issue.  #fix issue with tsl_names_set() #uses names of zoo objects for the list items tsl <- tsl_names_set(   tsl = tsl )  #validate again tsl <- tsl_diagnose(   tsl = tsl )  #list names tsl_names_get(   tsl = tsl ) #>   X   Y   Z  #> \"X\" \"Y\" \"Z\""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Number of Columns in Time Series Lists — tsl_ncol","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"Get Number Columns Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"","code":"tsl_ncol(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"","code":"#initialize time series list tsl <- tsl_simulate(   n = 2,   cols = 6 )  #number of columns per zoo object tsl_ncol(tsl = tsl) #> $A #> [1] 6 #>  #> $B #> [1] 6 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Number of Rows in Time Series Lists — tsl_nrow","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"Get Number Rows Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"","code":"tsl_nrow(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"","code":"#simulate zoo time series tsl <- tsl_simulate(   rows = 150   )  #count rows tsl_nrow(   tsl = tsl ) #> $A #> [1] 150 #>  #> $B #> [1] 150 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Time Series List — tsl_plot","title":"Plot Time Series List — tsl_plot","text":"Plot Time Series List","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Time Series List — tsl_plot","text":"","code":"tsl_plot(   tsl = NULL,   columns = 1,   xlim = NULL,   ylim = \"absolute\",   color = NULL,   width = 1,   text_cex = 1,   guide = TRUE,   guide_columns = 1,   guide_cex = 0.8 )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Time Series List — tsl_plot","text":"tsl (required, list) Time series list. Default: NULL columns (optional, integer) Number columns multipanel plot. Default: 1 xlim (optional, numeric vector) Numeric vector limits x axis. Applies sequences. Default: NULL ylim (optional, numeric vector character string) Numeric vector length two limits vertical axis keyword. Accepted keywords : \"absolute\" (default): time series plotted using overall data range. option used, horizontal lines indicating overall mean, minimum, maximum shown reference. \"relative\": time series plotted using range. Equivalent result can achieved using ylim = NULL. color (optional, character vector) vector colors distance cost matrix. NULL, uses appropriate palette generated grDevices::palette.colors(). Default: NULL width (optional, numeric vector) Width time series plot. Default: 1 text_cex (optional, numeric) Multiplicator text size. Default: 1 guide (optional, logical) TRUE, plots legend. Default: TRUE guide_columns (optional, integer) Columns line guide. Default: 1. guide_cex (optional, numeric) Size guide's text separation guide's rows. Default: 0.7.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Time Series List — tsl_plot","text":"plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Time Series List — tsl_plot","text":"","code":"#simulate zoo time series tsl <- tsl_simulate(   cols = 3   )  if(interactive()){    #default plot   tsl_plot(     tsl = tsl     )    #relative vertical limits   tsl_plot(     tsl = tsl,     ylim = \"relative\"   )    #changing layout   tsl_plot(     tsl = tsl,     columns = 2,     guide_columns = 2   )    #no legend   tsl_plot(     tsl = tsl,     guide = FALSE   )    #changing color   tsl_plot(     tsl = tsl,     color = c(\"red\", \"green\", \"blue\"))  }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair Issues in Time Series Lists — tsl_repair","title":"Repair Issues in Time Series Lists — tsl_repair","text":"Validity assessment time series lists. required features valid time series list : Argument tsl list. List tsl unique names. elements tsl zoo objects. zoo objects attribute \"name\". zoo objects unique values attribute \"name\". Names list slots zoo objects . zoo objects least one shared column name. columns zoo objects numeric. zoo objects zero NA cases. function takes time series list, tries make comply rules listed . Finally, runs tsl_diagnose() informs user issues left fix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair Issues in Time Series Lists — tsl_repair","text":"","code":"tsl_repair(tsl = NULL, full = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair Issues in Time Series Lists — tsl_repair","text":"tsl (required, list) Time series list. Default: NULL full (optional, logical) TRUE, function also subsets shared numeric columns across zoo objects interpolates NA cases. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair Issues in Time Series Lists — tsl_repair","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair Issues in Time Series Lists — tsl_repair","text":"","code":"#simulate time series list with NA data tsl <- tsl_simulate(   n = 3,   na_fraction = 0.1 )  #adding a few additional issues:  #set names of one time series to uppercase colnames(tsl[[2]]) <- toupper(colnames(tsl[[2]]))  #change name of one column in one time series colnames(tsl[[3]])[2] <- \"x\"  #remove list names names(tsl) <- NULL  #diagnose issues in tsl tsl <- tsl_diagnose(   tsl = tsl,   full = TRUE ) #> This time series list is NOT VALID. #> The issue/s to address are: #>   - elements of 'tsl' must be named: use tsl_names_set() or names(tsl) <- c(...) to fix this issue. #>   - zoo objects in 'tsl' must have at least one shared column: use tsl_colnames_get() to identify shared and/or exclusive columns. #>   - zoo objects in 'tsl' have NA cases: interpolate or remove them with tsl_handle_NA() to fix this issue.  #repair time series list tsl <- tsl_repair(   tsl = tsl,   full = TRUE ) #> Naming items in object 'tsl' #> Imputing NA values in zoo objects.  #diagnose again tsl <- tsl_diagnose(   tsl = tsl,   full = TRUE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Time Series Lists to a New Time — tsl_resample","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"Function resample zoo objects within time series list. function supports progress bars generated progressr package. See examples. function also accepts parallelization setup via future::plan(), might worth large time series lists. Objective Time series resampling involves interpolating new values time steps available original time series. operation useful : Transform irregular time series regular. Align time series different temporal resolutions. Increase (upsampling) decrease (downsampling) temporal resolution time series. Time series resampling used extrapolate new values outside original time range time series, increase resolution time series factor two . operations known produce non-sensical results. Warning: function resamples time series lists overlapping times. Please check overlap assessing columns \"begin\" \"end \" data frame resulting df <- tsl_time(tsl = tsl). Resampling limited shortest time series time series list. resample non-overlapping time series, please subset individual components tsl one one either using tsl_subset() syntax tsl = my_tsl[[]]. Methods function offers three methods time series interpolation: \"linear\" (default): interpolation via piecewise linear regression implemented zoo::na.approx(). \"spline\": cubic smoothing spline regression implemented stats::smooth.spline(). \"loess\": local polynomial regression fitting implemented stats::loess(). methods used fit models y ~ x y represents values univariate time series x represents numeric version time. functions utils_optimize_spline() utils_optimize_loess() used hood optimize complexity methods \"spline\" \"loess\" finding configuration minimizes root mean squared error (RMSE)  observed predicted y. However, argument max_complexity = TRUE, complexity optimization ignored, maximum complexity model used instead. New time argument new_time offers several alternatives help define new time resulting time series: NULL: target time series (x) resampled regular time within original time range number observations. zoo object: zoo object used template resampling. Useful objective equalizing frequency two separate zoo objects. time series list: time series list used template. range overlapping dates average resolution used generate new resampling time. method used align two time series lists, unless template resampled beforehand. time vector: time vector class compatible time x. keyword: character string defining resampling keyword, obtained via zoo_time(x, keywords = \"resample\")$keywords.. numeric: single number representing desired interval consecutive samples units x (relevant units can obtained via zoo_time(x)$units). Step Step steps resample time series list : time interpolation range computed intersection times tsl. step ensures extrapolation occurs resampling, also makes resampling non-overlapping time series impossible. new_time provided, values new_time outside minimum maximum interpolation times removed avoid extrapolation. new_time provided, regular time within interpolation time range length shortest time series tsl generated. univariate time time series, model y ~ x, y time series x time coerced numeric fitted. max_complexity == FALSE, model complexity minimizes root mean squared error observed predicted y returned. max_complexity == TRUE method = \"spline\" method = \"loess\", first valid model closest maximum complexity returned. fitted model predicted new_time generate resampled time series. Details Please use operation care, limits amount resampling can done without distorting data. safest option keep distance new time points within magnitude distance old time points. function accepts parallelization setup via future::plan(), relevant large datasets max_complexity = FALSE method = \"loess\" method = \"spline\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"","code":"tsl_resample(   tsl = NULL,   new_time = NULL,   method = \"linear\",   max_complexity = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"tsl (required, list) Time series list. Default: NULL new_time (required, zoo object, time series list, character string, time vector, numeric) New time resample . time vector provided, must class compatible time tsl.  zoo object time series list provided, time used template resample tsl. Valid resampling keywords (see tsl_time()) allowed. Numeric values interpreted interval widths time units time series. NULL, irregular time series predicted regular version time. Default: NULL method (optional, character string) Name method resample time series. One \"linear\", \"spline\" \"loess\". Default: \"linear\". max_complexity (required, logical). relevant methods \"spline\" \"loess\". TRUE, model optimization ignored, model maximum complexity (overfitted model) used resampling. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"","code":"#parallelization setup (not worth it for this data size) future::plan(  future::multisession,  workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #generate irregular time series tsl <- tsl_simulate(   n = 2,   rows = 100,   irregular = TRUE )  if(interactive()){   tsl_plot(tsl) }   #range of times between samples tsl_time_summary(tsl)[   c(     \"units\",     \"resolution_min\",     \"resolution_max\"     )   ] #> $units #> [1] \"days\" #>  #> $resolution_min #> [1] 155.599 #>  #> $resolution_max #> [1] 9.152882 #>   #resample to regular using linear interpolation tsl_regular <- tsl_resample(   tsl = tsl ) #> Resampling 'tsl' with a regular version of its own time.  if(interactive()){   tsl_plot(tsl_regular) }  #check new resolution tsl_time_summary(tsl_regular)[   c(     \"units\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $units #> [1] \"days\" #>  #> $resolution_min #> [1] 35.59454 #>  #> $resolution_max #> [1] 35.59454 #>   #resample using keywords  #valid resampling keywords tsl_time_summary(   tsl = tsl,   keywords = \"resample\" )$keywords #> [1] \"quarters\" \"months\"   \"weeks\"     #by month tsl_months <- tsl_resample(   tsl = tsl,   new_time = \"months\" )  if(interactive()){   tsl_plot(tsl_months) }  #by week tsl_weeks <- tsl_resample(   tsl = tsl,   new_time = \"weeks\" )  if(interactive()){   tsl_plot(tsl_weeks) }  #resample using time interval  #get relevant units tsl_time(tsl)$units #> [1] \"days\" \"days\"  #resampling to 15 days intervals tsl_15_days <- tsl_resample(   tsl = tsl,   new_time = 15 #days )  tsl_time_summary(tsl_15_days)[   c(     \"units\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $units #> [1] \"days\" #>  #> $resolution_min #> [1] 15 #>  #> $resolution_max #> [1] 15 #>   if(interactive()){   tsl_plot(tsl_15_days) }  #aligning two time series listsç  #two time series lists with different time ranges tsl1 <- tsl_simulate(   n = 2,   rows = 80,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   irregular = TRUE )  tsl2 <- tsl_simulate(   n = 2,   rows = 120,   time_range = c(\"2005-01-01\", \"2024-01-01\"),   irregular = TRUE )  #check time features tsl_time_summary(tsl1)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2010-01-01\" #>  #> $end #> [1] \"2019-10-12\" #>  #> $resolution_min #> [1] 206.069 #>  #> $resolution_max #> [1] 11.44828 #>   tsl_time_summary(tsl2)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2005-01-29\" #>  #> $end #> [1] \"2023-12-17\" #>  #> $resolution_min #> [1] 593.9436 #>  #> $resolution_max #> [1] 14.48643 #>   #tsl1 to regular tsl1_regular <- tsl_resample(   tsl = tsl1 ) #> Resampling 'tsl' with a regular version of its own time.  #tsl2 resampled to time of tsl1_regular tsl2_regular <- tsl_resample(   tsl = tsl2,   new_time = tsl1_regular )  #check alignment tsl_time_summary(tsl1_regular)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2010-01-12\" #>  #> $end #> [1] \"2019-09-08\" #>  #> $resolution_min #> [1] 44.63378 #>  #> $resolution_max #> [1] 44.63378 #>   tsl_time_summary(tsl2_regular)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2010-01-12\" #>  #> $end #> [1] \"2019-09-08\" #>  #> $resolution_min #> [1] 44.63378 #>  #> $resolution_max #> [1] 44.63378 #>   #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Time Series List — tsl_simulate","title":"Simulate a Time Series List — tsl_simulate","text":"Uses zoo_simulate underneath generate simulated time series lists testing learning purposes. function supports progress bars generated progressr package, accepts parallelization setup via future::plan() (see examples).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Time Series List — tsl_simulate","text":"","code":"tsl_simulate(   n = 2,   cols = 5,   rows = 100,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   data_range = c(0, 1),   seasons = 0,   na_fraction = 0,   independent = FALSE,   irregular = TRUE,   seed = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Time Series List — tsl_simulate","text":"n (optional, integer) Number time series simulate. Default: 2. cols (optional, integer) Number columns time series. Default: 5 rows (optional, integer) Length time series. Minimum 10, maximum limited. large numbers might crash R session. Default: 100 time_range (optional character numeric vector) Time interval time series. Either character vector dates format YYYY-MM-DD numeric vector. mismatch time_range rows (example, number days time_range smaller rows), upper value time_range adapted rows. Default: c(\"2010-01-01\", \"2020-01-01\") data_range (optional, numeric vector length 2) Extremes time series values. Default: c(0, 1) seasons (optional, integer) Number seasons resulting time series. maximum number seasons computed floor(rows/3). Default: 0 na_fraction (optional, numeric) Value 0 0.5 indicating approximate fraction NA data simulated time series. Default: 0. independent (optional, logical) TRUE, new column simulated time series averaged previous column generate dependency across columns, new simulated time series weighted-averaged time series template generate dependency across time series. Irrelevant cols < 2 n < 2, hard perceive output seasons > 0. Default: FALSE irregular (optional, logical) TRUE, time intervals consecutive samples irregular. Default: TRUE seed (optional, integer) Random seed used simulate zoo object. NULL (default), seed selected random. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Time Series List — tsl_simulate","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Time Series List — tsl_simulate","text":"","code":"#parallelization setup future::plan(  future::multisession,  workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  # generates a different time series list on each iteration when seed = NULL tsl <- tsl_simulate(   n = 2,   seasons = 4 )  if(interactive()){   tsl_plot(     tsl = tsl   ) }  # generate 3 independent time series tsl_independent <- tsl_simulate(   n = 3,   cols = 3,   independent = TRUE )  if(interactive()){   tsl_plot(     tsl = tsl_independent   ) }  # generate 3 independent time series tsl_dependent <- tsl_simulate(   n = 3,   cols = 3,   independent = FALSE )  if(interactive()){   tsl_plot(     tsl = tsl_dependent   ) }  # with seasons tsl_seasons <- tsl_simulate(   n = 3,   cols = 3,   seasons = 4,   independent = FALSE )  if(interactive()){   tsl_plot(     tsl = tsl_seasons   ) }  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits Multivariate Time Series Lists to Univariate TSLs — tsl_split","title":"Splits Multivariate Time Series Lists to Univariate TSLs — tsl_split","text":"function takes time series list multivariate zoo objects generate new one univariate zoo objects. time series list zoo objects \"\" \"B\", columns \"\", \"b\", \"c\", becomes time series list zoo objects \"A__a\", \"A__b\", \"A__c\", \"B__a\", \"B__b\", \"B__c\". column new zoo object named \"x\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits Multivariate Time Series Lists to Univariate TSLs — tsl_split","text":"","code":"tsl_split(tsl = NULL, sep = \"__\")"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits Multivariate Time Series Lists to Univariate TSLs — tsl_split","text":"tsl (required, list) Time series list. Default: NULL sep (required, character string) separator time series name column name.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits Multivariate Time Series Lists to Univariate TSLs — tsl_split","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits Multivariate Time Series Lists to Univariate TSLs — tsl_split","text":"","code":"tsl <- tsl_simulate(   n = 2,   time_range = c(     \"2010-01-01\",     \"2024-12-31\"   ),   cols = 3 )  names(tsl) #> [1] \"A\" \"B\"  if(interactive()){   tsl_plot(tsl = tsl) }  tsl <- tsl_split(tsl = tsl)  names(tsl) #> [1] \"A__a\" \"A__b\" \"A__c\" \"B__a\" \"B__b\" \"B__c\"  if(interactive()){   tsl_plot(tsl = tsl) }  lapply(tsl, colnames) #> $A__a #> [1] \"x\" #>  #> $A__b #> [1] \"x\" #>  #> $A__c #> [1] \"x\" #>  #> $B__a #> [1] \"x\" #>  #> $B__b #> [1] \"x\" #>  #> $B__c #> [1] \"x\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Statistics of Time Series Lists — tsl_stats","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"function computes variety summary statistics time series numeric column within time series list. statistics include common metrics  minimum, maximum, quartiles, mean, standard deviation, range, interquartile range, skewness, kurtosis, autocorrelation specified lags. irregular time series, autocorrelation computation performed regularizing time series via interpolation zoo_resample(). regularization affect computation stats. function supports progress bars generated progressr package. See examples. function also accepts parallelization setup via future::plan(), might worth large time series lists.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"","code":"tsl_stats(tsl = NULL, lags = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"tsl (required, list) Time series list. Default: NULL lags (optional, integer) integer specifying number autocorrelation lags compute. NULL, autocorrelation computation disabled. Default: 1.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"data frame: name: name zoo object. rows: rows zoo object. columns: columns zoo object. time_units: time units zoo time series (see zoo_time()). time_begin: beginning time time series. time_end: end time time series. time_length: total length time series, expressed time units. time_resolution: average distance consecutive observations variable: name variable, column zoo object. min: minimum value zoo column. q1: first quartile (25th percentile). median: 50th percentile. q3: third quartile (75th percentile). max: maximum value. mean: average value. sd: standard deviation. range: range variable, computed max - min. iq_range: interquartile range variable, computed q3 - q1. skewness: asymmetry variable distribution. kurtosis:\"tailedness\" variable distribution. ac_lag_1, ac_lag_2, ...: autocorrelation values specified lags.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"","code":"#parallelization setup (not worth it for this data size) future::plan(  future::multisession,  workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )   #stats computation df <- tsl_stats(   tsl = tsl,   lags = 3   )  df #>      name rows colums time_units time_begin   time_end time_length #> 1 Germany  216      3       days 2001-01-01 2018-12-01        6543 #> 4   Spain  216      3       days 2001-01-01 2018-12-01        6543 #> 7  Sweden  216      3       days 2001-01-01 2018-12-01        6543 #> 2 Germany  216      3       days 2001-01-01 2018-12-01        6543 #> 5   Spain  216      3       days 2001-01-01 2018-12-01        6543 #> 8  Sweden  216      3       days 2001-01-01 2018-12-01        6543 #> 3 Germany  216      3       days 2001-01-01 2018-12-01        6543 #> 6   Spain  216      3       days 2001-01-01 2018-12-01        6543 #> 9  Sweden  216      3       days 2001-01-01 2018-12-01        6543 #>   time_resolution    variable     min        q1   median         q3      max #> 1        30.43256         evi  0.0689  0.328025  0.44070   0.581550   0.7528 #> 4        30.43256         evi  0.1828  0.271000  0.34525   0.466925   0.6434 #> 7        30.43256         evi  0.0413  0.203850  0.30580   0.608775   0.8764 #> 2        30.43256    rainfall  3.6000 37.450000 55.95000  76.850000 144.1000 #> 5        30.43256    rainfall 11.3000 55.650000 78.50000 117.550000 216.6000 #> 8        30.43256    rainfall  8.3000 40.775000 59.25000  82.075000 189.6000 #> 3        30.43256 temperature -1.9000  4.900000 10.40000  16.900000  23.2000 #> 6        30.43256 temperature  4.5000  8.700000 12.60000  17.700000  21.7000 #> 9        30.43256 temperature -4.7000  3.200000  8.15000  14.300000  20.0000 #>         mean         sd    range  iq_range    skewness   kurtosis  ac_lag_1 #> 1  0.4475370  0.1467074   0.6839  0.253525 -0.05783267 -1.0177517 0.7223353 #> 4  0.3687245  0.1170178   0.4606  0.195925  0.28642807 -1.1547325 0.7709169 #> 7  0.3890579  0.2116391   0.8351  0.404925  0.27701665 -1.5166381 0.7577843 #> 2 58.7157407 27.8993379 140.5000 39.400000  0.51192914 -0.1499229 0.1321953 #> 5 91.1606481 48.1853638 205.3000 61.900000  0.75359061 -0.2612889 0.3567376 #> 8 64.7592593 32.5032507 181.3000 41.300000  0.87978813  0.7386146 0.2765852 #> 3 10.6861111  6.7015369  25.1000 12.000000 -0.05073437 -1.3166755 0.8147649 #> 6 13.0263889  4.7681695  17.2000  9.000000  0.04692060 -1.3981559 0.8208431 #> 9  8.5263889  6.5337833  24.7000 11.100000 -0.04126297 -1.3096657 0.8282803 #>      ac_lag_2     ac_lag_3 #> 1  0.40102839  0.014216053 #> 4  0.43377523  0.009326848 #> 7  0.40574397 -0.008121973 #> 2 -0.06056026 -0.043789909 #> 5  0.13744019 -0.055413521 #> 8  0.08031474 -0.060240093 #> 3  0.46143388  0.004390029 #> 6  0.45715549 -0.004872615 #> 9  0.46942292  0.006882327 #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"Subset Time Series Lists Time Series Names, Time, /Column Names","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"","code":"tsl_subset(   tsl = NULL,   names = NULL,   colnames = NULL,   numeric_cols = TRUE,   shared_cols = TRUE,   time = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"tsl (required, list) Time series list. Default: NULL names (optional, character numeric vector) Character vector names numeric vector list indices. NULL, time series kept. Default: NULL colnames (optional, character vector) Column names zoo objects tsl. NULL, columns returned. Default: NULL numeric_cols (optional, logical) TRUE, numeric columns zoo objects returned. Default: TRUE shared_cols (optional, logical) TRUE, columns shared across zoo objects returned. Default: TRUE time (optional, numeric vector) time vector length two used subset rows time. NULL, rows tsl preserved. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"","code":"#initialize time series list tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )  #checking available dimensions  #names tsl_names_get(   tsl = tsl ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #colnames tsl_colnames_get(   tsl = tsl ) #> $Germany #> [1] \"evi\"         \"rainfall\"    \"temperature\" #>  #> $Spain #> [1] \"evi\"         \"rainfall\"    \"temperature\" #>  #> $Sweden #> [1] \"evi\"         \"rainfall\"    \"temperature\" #>   #time tsl_time(   tsl = tsl )[, c(\"name\", \"begin\", \"end\")] #>            name      begin        end #> Germany Germany 2001-01-01 2018-12-01 #> Spain     Spain 2001-01-01 2018-12-01 #> Sweden   Sweden 2001-01-01 2018-12-01  #subset tsl_new <- tsl_subset(   tsl = tsl,   names = c(\"Sweden\", \"Germany\"),   colnames = c(\"rainfall\", \"temperature\"),   time = c(\"2010-01-01\", \"2015-01-01\") )  #check new dimensions  #names tsl_names_get(   tsl = tsl_new ) #>    Sweden   Germany  #>  \"Sweden\" \"Germany\"   #colnames tsl_colnames_get(   tsl = tsl_new ) #> $Sweden #> [1] \"rainfall\"    \"temperature\" #>  #> $Germany #> [1] \"rainfall\"    \"temperature\" #>   #time tsl_time(   tsl = tsl_new )[, c(\"name\", \"begin\", \"end\")] #>            name      begin        end #> Sweden   Sweden 2001-01-01 2018-12-01 #> Germany Germany 2001-01-01 2018-12-01"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Features of Time Series Lists — tsl_time","title":"Time Features of Time Series Lists — tsl_time","text":"functions tsl_time() tsl_time_summary() summarize time features time series list. tsl_time() returns data frame one row per time series argument 'tsl' tsl_time_summary() returns list features captured tsl_time(), aggregated across time series. functions return keywords useful functions tsl_aggregate() tsl_resample(), depending value argument keywords.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Features of Time Series Lists — tsl_time","text":"","code":"tsl_time(tsl = NULL, keywords = c(\"resample\", \"aggregate\"))  tsl_time_summary(tsl = NULL, keywords = c(\"resample\", \"aggregate\"))"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Features of Time Series Lists — tsl_time","text":"tsl (required, list) Time series list. Default: NULL keywords (optional, character string vector) Defines keywords returned. \"aggregate\", returns valid keywords zoo_aggregate(). \"resample\", returns valid keywords zoo_resample(). , returns valid keywords. Default: c(\"aggregate\", \"resample\").","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Features of Time Series Lists — tsl_time","text":"tsl_time(): data frame following columns: name (string): time series name. rows (integer): number observations. class (string): time class, one \"Date\", \"POSIXct\", \"numeric.\" units (string): units time series. length (numeric): total length time series expressed units. resolution (numeric): average interval observations expressed units. begin (date numeric): begin time time series. end (date numeric): end time time series. keywords (character vector): valid keywords tsl_aggregate() tsl_resample(), depending value argument keywords. tsl_time_summary(): list following objects: class (string): time class, one \"Date\", \"POSIXct\", \"numeric.\" units (string): units time series. begin (date numeric): begin time time series. end (date numeric): end time time series. resolution_max (numeric): longer time interval consecutive samples expressed units. resolution_min (numeric): shorter time interval consecutive samples expressed units. keywords (character vector): valid keywords tsl_aggregate() tsl_resample(), depending value argument keywords. units_df (data frame) data frame internal use within tsl_aggregate() tsl_resample().","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Features of Time Series Lists — tsl_time","text":"","code":"#simulate a time series list tsl <- tsl_simulate(   n = 3,   rows = 150,   time_range = c(     Sys.Date() - 365,     Sys.Date()   ),   irregular = TRUE )  #time data frame tsl_time(   tsl = tsl ) #>   name rows class units   length resolution      begin        end     keywords #> A    A  150  Date  days 363.1720   2.437396 2023-09-03 2024-08-31 years, q.... #> B    B  150  Date  days 362.5626   2.433306 2023-09-03 2024-08-30 quarters.... #> C    C  150  Date  days 364.3907   2.445575 2023-09-03 2024-09-01 years, q....  #time summary tsl_time_summary(   tsl = tsl ) #> $class #> [1] \"Date\" #>  #> $units #> [1] \"days\" #>  #> $begin #> [1] \"2023-09-03\" #>  #> $end #> [1] \"2024-09-01\" #>  #> $resolution_max #> [1] 0.6093489 #>  #> $resolution_min #> [1] 12.79633 #>  #> $keywords #> [1] \"years\"    \"quarters\" \"months\"   \"weeks\"    \"days\"     #>  #> $units_df #>   factor base_units    units threshold keyword #> 4     NA       days    years       365    TRUE #> 5     NA       days quarters        90    TRUE #> 6     NA       days   months        30    TRUE #> 7     NA       days    weeks         7    TRUE #> 8     NA       days     days         1    TRUE #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series List to Data Frame — tsl_to_df","title":"Time Series List to Data Frame — tsl_to_df","text":"Time Series List Data Frame","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series List to Data Frame — tsl_to_df","text":"","code":"tsl_to_df(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series List to Data Frame — tsl_to_df","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series List to Data Frame — tsl_to_df","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series List to Data Frame — tsl_to_df","text":"","code":"tsl <- tsl_simulate(   n = 3,   rows = 10,   time_range = c(     \"2010-01-01\",     \"2020-01-01\"   ) )  df <- tsl_to_df(   tsl = tsl )  names(df) #> [1] \"name\" \"time\" \"a\"    \"b\"    \"c\"    \"d\"    \"e\"    nrow(df) #> [1] 30 head(df) #>              name       time          a         b         c         d         e #> A.2010-07-07    A 2010-07-07 0.08348423 0.1793025 0.4799905 0.3907275 0.1919960 #> A.2011-04-14    A 2011-04-14 0.16771339 0.2415401 0.3555188 0.2429726 0.2116954 #> A.2011-07-16    A 2011-07-16 0.14881885 0.2273700 0.3728658 0.3049885 0.4347005 #> A.2012-04-22    A 2012-04-22 0.34990837 0.3158098 0.3334228 0.2009160 0.3146760 #> A.2013-05-02    A 2013-05-02 0.39211016 0.2815837 0.3209414 0.1858726 0.1659380 #> A.2014-11-15    A 2014-11-15 0.36718074 0.3150592 0.3367337 0.1473642 0.2672202"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Values in Time Series Lists — tsl_transform","title":"Transform Values in Time Series Lists — tsl_transform","text":"custom wrapper base::lapply() adapted work time series list. objective function data transformation without dimension changes. Generally, functions introduced via argument f change dimensions output time series list. See tsl_resample() tsl_aggregate() transformations requiring changes time series dimensions.However, glaring exceptions. example, f_center() f_scale() compute overall mean standard deviation across zoo objects time series list apply common transformation. operation requires removing exclusive columns zoo objects via tsl_subset(). function supports progress bars generated progressr package. See examples. function also accepts parallelization setup via future::plan(), might worth large time series lists.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Values in Time Series Lists — tsl_transform","text":"","code":"tsl_transform(tsl = NULL, f = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Values in Time Series Lists — tsl_transform","text":"tsl (required, list) Time series list. Default: NULL f (required, transformation function) name function taking matrix input. Currently, following options implemented, function taking matrix input (example, scale()) work well: f_proportion: proportion computed row. f_percentage: percentage computed row. f_hellinger: Hellinger transformation computed row f_center: Centering computed column using column mean across zoo objects within tsl. f_scale: Centering scaling using column mean standard deviation across zoo objects within tsl. f_smooth: Time series smoothing user defined rolling window. f_detrend_difference: Differencing detrending time series via diff(). f_detrend_linear: Detrending seasonal time series via linear modeling. f_detrend_gam: Detrending seasonal time series via Generalized Additive Models. ... (optional, additional arguments f) Optional arguments transformation function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Values in Time Series Lists — tsl_transform","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Values in Time Series Lists — tsl_transform","text":"","code":"#parallelization setup (not worth it for this data size) future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #two time series tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_subset(     names = c(\"Spain\", \"Sweden\"),     colnames = c(\"rainfall\", \"temperature\")   )  if(interactive()){   tsl_plot(     tsl = tsl   ) }  #centering #----------------------------------------- #global centering based on #mean of each variable #across all time series tsl_center <- tsl_transform(   tsl = tsl,   f = f_center )  if(interactive()){   tsl_plot(     tsl = tsl_center,     guide_columns = 3   ) }   #centering and scaling #----------------------------------------- #same mean and standard deviation are used to scale each variable across all time series tsl_scale <- tsl_transform(   tsl = tsl,   f = f_scale )  if(interactive()){   tsl_plot(     tsl = tsl_scale,     guide_columns = 3   ) }  # #also, with base::scale() # tsl_scale <- tsl_transform( #   tsl = tsl, #   f = base::scale, #   center = TRUE, #   scale = TRUE # )   #rescaling to a new range #-----------------------------------------  #rescale between -100 and 100 tsl_rescaled <- tsl_transform(   tsl = tsl,   f = f_rescale,   new_min = -100,   new_max = 100 )  #old range sapply(X = tsl, FUN = range) #>      Spain Sweden #> [1,]   4.5   -4.7 #> [2,] 216.6  189.6  #new range sapply(X = tsl_rescaled, FUN = range) #>      Spain Sweden #> [1,]  -100   -100 #> [2,]   100    100   #rounding to n digits #-----------------------------------------  #rounding to zero digits tsl_round <- tsl_transform(   tsl = tsl,   f = round,   digits = 0 )  #old values sapply(X = tsl, FUN = range) #>      Spain Sweden #> [1,]   4.5   -4.7 #> [2,] 216.6  189.6  #new range sapply(X = tsl_round, FUN = range) #>      Spain Sweden #> [1,]     4     -5 #> [2,]   217    190   #moving window smoothing #----------------------------------------- tsl_smooth_mean <- tsl_transform(   tsl = tsl,   f = f_smooth_window,   smoothing_window = 3, #default   smoothing_f = mean #default )  if(interactive()){   tsl_plot(     tsl = tsl_smooth_mean,     guide_columns = 3   ) }  #principal components #----------------------------------------- #replaces original variables with their principal components #requires centering and/or scaling tsl_pca <- tsl |>   tsl_transform(     f = f_scale   ) |>   tsl_transform(     f = f_pca   )  #returns principal components tsl_colnames_get(tsl = tsl_pca) #> $Spain #> [1] \"PC1\" \"PC2\" #>  #> $Sweden #> [1] \"PC1\" \"PC2\" #>   if(interactive()){   tsl_plot(     tsl = tsl_pca,     guide_columns = 3   ) }  #detrending #-----------------------------------------  #annual temperature of Abidjan tsl <- tsl_initialize(   x = cities_temperature,   id_column = \"city\",   time_column = \"date\" ) |>   tsl_subset(     names = \"Abidjan\"   )  if(interactive()){   tsl_plot(     tsl = tsl,     color = \"red4\"   ) }  #LINEAR DETRENDING tsl_detrend_linear <- tsl_transform(   tsl = tsl,   f = f_detrend_linear,   center = FALSE #to keep temperature scale )  #show effect of linear detrending if(interactive()){   plot(tsl[[1]]$temperature, col = \"blue\")   lines(tsl_detrend_linear[[1]]$temperature, col = \"red4\") }  #rename to join with the original tsl for plotting tsl_detrend_linear <- tsl_names_set(   tsl = tsl_detrend_linear,   names = \"detrend_linear\"   )  #DIFFERENCES DETRENDING with lag 1 (monthly lag) tsl_detrend_difference_1 <- tsl_transform(   tsl = tsl,   lag = 1,   f = f_detrend_difference,   center = FALSE )  #rename to join with the original tsl for plotting tsl_detrend_difference_1 <- tsl_names_set(   tsl = tsl_detrend_difference_1,   names = \"difference_lag_1\" )  #DIFFERENCES DETRENDING with lag 12 (yearly lag) tsl_detrend_difference_12 <- tsl_transform(   tsl = tsl,   lag = 12,   f = f_detrend_difference,   center = FALSE )  #rename to join with the original tsl for plotting tsl_detrend_difference_12 <- tsl_names_set(   tsl = tsl_detrend_difference_12,   names = \"difference_lag_12\" )  #join original data and detrended versions tsl <- c(   tsl,   tsl_detrend_linear,   tsl_detrend_difference_1,   tsl_detrend_difference_12 )  #validate this new tsl tsl <- tsl_diagnose(   tsl = tsl )  if(interactive()){   tsl_plot(     tsl = tsl,     color = \"red4\"   ) }   #compare original vs detrended data using f_trend_linear() tsl_linear_trend <- tsl_transform(   tsl = tsl,   f = f_trend_linear )  if(interactive()){   tsl_plot(     tsl = tsl_linear_trend,     color = \"red4\"   ) }  #numeric transformations #----------------------------------------- #pollen counts from 2 interglacials tsl <- tsl_initialize(   x = mis,   id_column = \"mis\",   time_column = \"sample_order\" ) |>   tsl_subset(     names = c(\"MIS_5\", \"MIS_7\")   )  if(interactive()){   tsl_plot(     tsl = tsl   ) }  #percentages tsl_percentage <- tsl_transform(   tsl = tsl,   f = f_percentage )  if(interactive()){   tsl_plot(     tsl = tsl_percentage   ) }  #hellinger transformation tsl_hellinger <- tsl_transform(   tsl = tsl,   f = f_hellinger )  if(interactive()){   tsl_plot(     tsl = tsl_hellinger   ) }  #custom functions #-----------------------------------------  #multiply by a scalar y #the custom function must return a zoo object tsl_new <- tsl_transform(   tsl = tsl,   f = function(x, y) x * y,   y = 100 )  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensures Correct Class for Time Arguments — utils_as_time","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"function guesses class vector based elements. can handle numeric vectors, character vectors can coerced either \"Date\" \"POSIXct\" classes, vectors already \"Date\" \"POSIXct\" classes.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"","code":"utils_as_time(x = NULL, to_class = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"x (required, vector) Vectors classes 'numeric', 'Date', 'POSIXct' valid returned without transformation. Character vectors analyzed determine probable type, coerced 'Date' 'POSIXct' depending number elements. Generally, character vector representing ISO 8601 standard, like \"YYYY-MM-DD\" \"YYYY-MM-DD HH:MM:SS\" converted valid class. character vector coerced date, returned . Default: NULL to_class (optional, class) Options : NULL, \"numeric\", \"Date\", \"POSIXct\". NULL, 'x' returned appropriate time class. Otherwise, 'x' coerced given class. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"time vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"","code":"# numeric utils_as_time(   x = c(-123120, 1200)   ) #> [1] -123120    1200  # character string to Date utils_as_time(   x = c(\"2022-03-17\", \"2024-02-05\")   ) #> [1] \"2022-03-17\" \"2024-02-05\"  # incomplete character strings to Date utils_as_time(   x = c(\"2022\", \"2024\")   ) #> Warning: Argument 'x' of class 'character' must have the format '%Y-%m-%d' for class 'Date', or '%Y-%m-%d %H:%M:%S' for class 'POSIXct' #> [1] \"2022\" \"2024\"  utils_as_time(   x = c(\"2022-02\", \"2024-03\")   ) #> Warning: Argument 'x' of class 'character' must have the format '%Y-%m-%d' for class 'Date', or '%Y-%m-%d %H:%M:%S' for class 'POSIXct' #> [1] \"2022-02\" \"2024-03\"  # character string to POSIXct utils_as_time(   x = c(\"2022-03-17 12:30:45\", \"2024-02-05 11:15:45\")   ) #> [1] \"2022-03-17 12:30:45 CET\" \"2024-02-05 11:15:45 CET\"  # Date vector (returns the input) utils_as_time(   x = as.Date(c(\"2022-03-17\", \"2024-02-05\"))   ) #> [1] \"2022-03-17\" \"2024-02-05\"  # POSIXct vector (returns the input) utils_as_time(   x = as.POSIXct(c(\"2022-03-17 12:30:45\", \"2024-02-05 11:15:45\"))   ) #> [1] \"2022-03-17 12:30:45 CET\" \"2024-02-05 11:15:45 CET\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"Default Block Size Restricted Permutation Dissimilarity Analyses","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"","code":"utils_block_size(tsl = NULL, block_size = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"tsl (required, list) Time series list. Default: NULL block_size (optional, integer) Row block sizes restricted permutation test. relevant permutation methods \"restricted\" \"restricted_by_row\". block size n indicates row can permuted within block n adjacent rows. NULL, defaults rounded one tenth shortest time_series tsl. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"integer","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Distance Argument — utils_check_distance_args","title":"Check Distance Argument — utils_check_distance_args","text":"Check Distance Argument","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Distance Argument — utils_check_distance_args","text":"","code":"utils_check_distance_args(distance = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Distance Argument — utils_check_distance_args","text":"distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Distance Argument — utils_check_distance_args","text":"character vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Distance Argument — utils_check_distance_args","text":"","code":"utils_check_distance_args(   distance = c(     \"euclidean\",     \"euc\"    )   ) #> [1] \"euclidean\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distantia_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Input Arguments — utils_check_distantia_args","title":"Check Input Arguments — utils_check_distantia_args","text":"Check Input Arguments","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distantia_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Input Arguments — utils_check_distantia_args","text":"","code":"utils_check_distantia_args(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   lock_step = FALSE,   repetitions = 0,   permutation = \"restricted_by_row\",   block_size = 3,   seed = 1,   robust = TRUE )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distantia_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Input Arguments — utils_check_distantia_args","text":"tsl (required, list) Time series list. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical vector) TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical vector). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE. lock_step (optional, logical vector) TRUE, time series compared row wise least-cost path computed. Default: FALSE. repetitions (optional, integer vector) number permutations compute p-value (interpreted probability finding smaller dissimilarity permuted versions sequences) psi distance. 0, p-values computed. Otherwise, minimum 2. Default: 0 permutation (optional, character vector) permutation method. Valid values listed higher lower randomness: \"free\": unrestricted shuffling rows columns. Ignores block_size. \"free_by_row\": unrestricted shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling rows columns within blocks. \"restricted_by_row\": restricted shuffling rows within blocks. block_size (optional, integer vector) vector block sizes rows restricted permutation test. block size 3 indicates row can permuted within block 3 adjacent rows. several values provided, one selected random separately time series repetition. relevant permutation methods \"restricted\" \"restricted_by_row\". Default: 3. seed (optional, integer) initial random seed use replicability computing p-values. Default: 1 robust (required, logical). TRUE, importance scores computed using least cost path used compute psi dissimilarity two full time series. Setting FALSE allows replicate importance scores previous versions package. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distantia_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Input Arguments — utils_check_distantia_args","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Classes of List Elements Against Expectation — utils_check_list_class","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"Checks Classes List Elements Expectation","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"","code":"utils_check_list_class(x = NULL, expected_class = \"data.frame\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"x (required, list) Default: NULL expected_class (required, class name). One \"data.frame\", \"matrix\", \"vector\". Default: \"data.frame\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"side effects","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_matrix_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Input Matrix — utils_check_matrix_args","title":"Checks Input Matrix — utils_check_matrix_args","text":"Checks Input Matrix","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_matrix_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Input Matrix — utils_check_matrix_args","text":"","code":"utils_check_matrix_args(m = NULL, arg_name = \"m\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_matrix_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Input Matrix — utils_check_matrix_args","text":"m (required, matrix) distance cost matrix resulting psi_dist_matrix() psi_cost_matrix(). Default: NULL arg_name (optional, character string) name argument checked. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_matrix_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Input Matrix — utils_check_matrix_args","text":"matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_path_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Least Cost Path — utils_check_path_args","title":"Checks Least Cost Path — utils_check_path_args","text":"Checks Least Cost Path","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_path_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Least Cost Path — utils_check_path_args","text":"","code":"utils_check_path_args(path = NULL, arg_name = \"path\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_path_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Least Cost Path — utils_check_path_args","text":"path (required, data frame) least cost path generated psi_cost_path(). data frame must attribute type == \"cost_path, must computed time series used compute matrix m. Default: NULL. arg_name (optional, character string) name argument checked. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_path_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Least Cost Path — utils_check_path_args","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_zoo_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Argument x — utils_check_zoo_args","title":"Checks Argument x — utils_check_zoo_args","text":"Checks Argument x","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_zoo_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Argument x — utils_check_zoo_args","text":"","code":"utils_check_zoo_args(x = NULL, arg_name = \"x\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_zoo_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Argument x — utils_check_zoo_args","text":"x (required, list matrices) list input matrices generated tsl_initialize(). Default: NULL arg_name (optional, character string) name argument checked. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_zoo_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Argument x — utils_check_zoo_args","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Character Vector of Names — utils_clean_names","title":"Clean Character Vector of Names — utils_clean_names","text":"Clean format character vectors use column names variable names.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Character Vector of Names — utils_clean_names","text":"","code":"utils_clean_names(   x = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Character Vector of Names — utils_clean_names","text":"x (required, character vector) Names cleaned. Default: NULL lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots appending suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) String append cleaned names. Default: NULL. prefix (optional, character string)  String prepend cleaned names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Character Vector of Names — utils_clean_names","text":"character vector","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Character Vector of Names — utils_clean_names","text":"cleanup operations applied following order: Remove leading trailing whitespaces. Generates syntactically valid names base::make.names(). Replaces dots spaces separator. Coerces names lowercase. argument length provided, base::abbreviate() used abbreviate new column names. suffix provided, added end column name using separator. prefix provided, added beginning column name using separator. capitalize_first = TRUE, first letter capitalized. capitalize_all = TRUE, letters capitalized.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Character Vector of Names — utils_clean_names","text":"","code":"x <- c(   \"GerMany\",   \"spain\",   \"SWEDEN\" )  #abbreviate names #--------------------------- #abbreviate to 4 characters utils_clean_names(   x = x,   capitalize_all = TRUE,   length = 4 ) #> GerMany   spain  SWEDEN  #>  \"GRMN\"  \"SPAN\"  \"SWED\"   #suffix and prefix #--------------------------- utils_clean_names(   x = x,   capitalize_first = TRUE,   separator = \"_\",   prefix = \"my_prefix\",   suffix = \"my_suffix\" ) #>                       GerMany                         spain  #> \"My_prefix_GerMany_my_suffix\"   \"My_prefix_spain_my_suffix\"  #>                        SWEDEN  #>  \"My_prefix_SWEDEN_my_suffix\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"Performs parallelized grid search find number clusters maximizing overall silhouette width clustering solution (see utils_cluster_silhouette()). method = NULL, optimization also includes methods available stats::hclust() grid search. function supports parallelization via future::plan() progress bar generated progressr package (see Examples).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"","code":"utils_cluster_hclust_optimizer(d = NULL, method = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"d (required, matrix) distance matrix typically resulting distantia_matrix(), square matrix work. Default: NULL method (optional, character string) Argument stats::hclust() defining agglomerative method. One : \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) \"centroid\" (= UPGMC). Unambiguous abbreviations accepted well.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"","code":"#parallelization and progress bar #for large datasets, parallelization accelerates cluster optimization future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #daily covid prevalence #in 10 California counties #aggregated by month tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" ) |>   tsl_subset(     names = 1:10   ) |>   tsl_aggregate(     new_time = \"months\",     fun = sum   )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl_subset(       tsl = tsl,       names = 1:3     ),     guide_columns = 3   ) }  #compute dissimilarity matrix psi_matrix <- distantia(   tsl = tsl,   lock_step = TRUE ) |>   distantia_matrix()  #optimize hierarchical clustering hclust_optimization <- utils_cluster_hclust_optimizer(   d = psi_matrix )  #best solution in first row head(hclust_optimization) #>   clusters   method silhouette_mean #> 1        4   ward.D       0.3953577 #> 2        4  ward.D2       0.3953577 #> 3        4 complete       0.3953577 #> 4        4  average       0.3953577 #> 5        4 mcquitty       0.3953577 #> 6        3   ward.D       0.3784943  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"Generates k-means solutions 2 nrow(d) - 1 number clusters returns number clusters higher silhouette width median. See utils_cluster_silhouette() details.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"","code":"utils_cluster_kmeans_optimizer(d = NULL, seed = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"d (required, matrix) distance matrix typically resulting distantia_matrix(), square matrix work. Default: NULL seed (optional, integer) Random seed used K-means computation. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"","code":"#parallelization and progress bar #for large datasets, parallelization accelerates cluster optimization future::plan(   future::multisession,   workers = 2 #set to parallelly::availableWorkers() - 1 )  #progress bar if(interactive()){   progressr::handlers(global = TRUE) }  #daily covid prevalence #in 10 California counties #aggregated by month tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" ) |>   tsl_subset(     names = 1:10   ) |>   tsl_aggregate(     new_time = \"months\",     fun = sum   )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl_subset(       tsl = tsl,       names = 1:3     ),     guide_columns = 3   ) }  #compute dissimilarity matrix psi_matrix <- distantia(   tsl = tsl,   lock_step = TRUE ) |>   distantia_matrix()  #optimize hierarchical clustering kmeans_optimization <- utils_cluster_kmeans_optimizer(   d = psi_matrix )  #best solution in first row head(kmeans_optimization) #>   clusters silhouette_mean #> 1        4       0.3953577 #> 2        5       0.3513170 #> 3        2       0.3435351 #> 4        6       0.3107771 #> 5        7       0.3084695 #> 6        3       0.2760140  #disable parallelization future::plan(   future::sequential )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"silhouette width measure similar object cluster (cohesion) compared clusters (separation). general guidelines interpret  individual silhouette widths clustered objects (returned function mean = FALSE): Close 1: object well matched cluster poorly matched neighboring clusters. Close 0: object two neighboring clusters. Close -1: object likely assigned wrong cluster mean = TRUE, overall mean silhouette widths objects returned. values interpreted follows: Higher 0.7: robust clustering . Higher 0.5: reasonable clustering. Higher 0.25: weak clustering. metric may perform well clusters irregular shapes sizes. code adapted https://svn.r-project.org/R-packages/trunk/cluster/R/silhouette.R.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"","code":"utils_cluster_silhouette(labels = NULL, d = NULL, mean = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"labels (required, integer vector) Labels resulting clustering algorithm applied d. Must length columns rows d. Default: NULL d (required, matrix) distance matrix typically resulting distantia_matrix(), square matrix work. Default: NULL mean (optional, logical) TRUE, mean silhouette widths returned. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"","code":"#daily covid prevalence in California counties data(\"covid_prevalence\")  #load as tsl and aggregate to monthly data to accelerate example execution tsl <- tsl_initialize(   x = covid_prevalence,   id_column = \"county\",   time_column = \"date\" ) |>   tsl_aggregate(     new_time = \"months\",     fun = sum   )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl[1:3],     guide_columns = 3     ) }  #compute dissimilarity distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #generate dissimilarity matrix psi_matrix <- distantia_matrix(   df = distantia_df )  #example with kmeans clustering #------------------------------------  #kmeans with 3 groups psi_kmeans <- stats::kmeans(   x = as.dist(psi_matrix[[1]]),   centers = 3 )  #case-wise silhouette width utils_cluster_silhouette(   labels = psi_kmeans$cluster,   d = psi_matrix ) #>               name cluster silhouette_width #> 1          Alameda       3       0.53408926 #> 2            Butte       1       0.24335793 #> 3     Contra_Costa       3       0.51303411 #> 4        El_Dorado       1       0.28439249 #> 5           Fresno       2       0.29210721 #> 6         Humboldt       1       0.28584006 #> 7         Imperial       2       0.16353433 #> 8             Kern       2       0.31339317 #> 9            Kings       2       0.28549357 #> 10     Los_Angeles       2      -0.01115405 #> 11          Madera       2       0.32019258 #> 12           Marin       1      -0.16405807 #> 13          Merced       2       0.29470639 #> 14        Monterey       2       0.08610735 #> 15            Napa       3       0.41855789 #> 16          Orange       3       0.14310231 #> 17          Placer       1       0.08355788 #> 18       Riverside       2       0.14362515 #> 19      Sacramento       3       0.32150233 #> 20  San_Bernardino       2       0.17752077 #> 21       San_Diego       3       0.15640577 #> 22   San_Francisco       3       0.42404200 #> 23     San_Joaquin       2       0.08155982 #> 24 San_Luis_Obispo       3       0.19825351 #> 25       San_Mateo       3       0.51851323 #> 26   Santa_Barbara       3       0.26400760 #> 27     Santa_Clara       3       0.49713101 #> 28      Santa_Cruz       3       0.37107241 #> 29          Shasta       1       0.16574063 #> 30          Solano       3       0.37655710 #> 31          Sonoma       3       0.45211820 #> 32      Stanislaus       2       0.25881206 #> 33          Sutter       2       0.13236063 #> 34          Tulare       2       0.33122807 #> 35         Ventura       3       0.14751934 #> 36            Yolo       3       0.37226460  #overall silhouette width utils_cluster_silhouette(   labels = psi_kmeans$cluster,   d = psi_matrix,   mean = TRUE ) #> [1] 0.2632358   #example with hierarchical clustering #------------------------------------  #hierarchical clustering psi_hclust <- stats::hclust(   d = as.dist(psi_matrix[[1]]) )  #generate labels for three groups psi_hclust_labels <- stats::cutree(   tree = psi_hclust,   k = 3, )  #case-wise silhouette width utils_cluster_silhouette(   labels = psi_hclust_labels,   d = psi_matrix ) #>               name cluster silhouette_width #> 1          Alameda       1       0.52628065 #> 2            Butte       2       0.35971232 #> 3     Contra_Costa       1       0.37010306 #> 4        El_Dorado       2       0.42327079 #> 5           Fresno       3       0.40733740 #> 6         Humboldt       2       0.33480996 #> 7         Imperial       3       0.21043941 #> 8             Kern       3       0.33095029 #> 9            Kings       3       0.31049523 #> 10     Los_Angeles       3       0.16634427 #> 11          Madera       3       0.41950800 #> 12           Marin       1       0.27240071 #> 13          Merced       3       0.36830642 #> 14        Monterey       3       0.27351569 #> 15            Napa       3      -0.18805429 #> 16          Orange       3       0.08316574 #> 17          Placer       2       0.26921834 #> 18       Riverside       3       0.34111184 #> 19      Sacramento       3      -0.05742726 #> 20  San_Bernardino       3       0.31723247 #> 21       San_Diego       3       0.12797878 #> 22   San_Francisco       1       0.48410890 #> 23     San_Joaquin       3       0.33842850 #> 24 San_Luis_Obispo       3       0.18757659 #> 25       San_Mateo       1       0.52419567 #> 26   Santa_Barbara       3       0.01665411 #> 27     Santa_Clara       1       0.44736113 #> 28      Santa_Cruz       1       0.24697230 #> 29          Shasta       2       0.30699059 #> 30          Solano       3      -0.14532901 #> 31          Sonoma       1       0.31486796 #> 32      Stanislaus       3       0.25150478 #> 33          Sutter       3       0.05108068 #> 34          Tulare       3       0.40141294 #> 35         Ventura       3       0.16109587 #> 36            Yolo       3      -0.22996449  #overall silhouette width utils_cluster_silhouette(   labels = psi_hclust_labels,   d = psi_matrix,   mean = TRUE ) #> [1] 0.2506571"},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerces Vector to a Given Time Class — utils_coerce_time_class","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"Coerces Vector Given Time Class","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"","code":"utils_coerce_time_class(x = NULL, to = \"Date\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"x (required, vector class Date POSIXct) time vector convert. Default: NULL (required, class name) either Date, POSIXct, numeric. Default: Date","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"time vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"","code":"x <- utils_coerce_time_class(   x = c(\"2024-01-01\", \"2024-02-01\"),   to = \"Date\" )  x #> [1] \"2024-01-01\" \"2024-02-01\" class(x) #> [1] \"Date\"  x <- utils_coerce_time_class(   x = c(\"2024-01-01\", \"2024-02-01\"),   to = \"POSIXct\" )  x #> [1] \"2024-01-01 UTC\" \"2024-02-01 UTC\" class(x) #> [1] \"POSIXct\" \"POSIXt\"   x <- utils_coerce_time_class(   x = c(\"2024-01-01\", \"2024-02-01\"),   to = \"numeric\" )  x #> [1] 19723 19754 class(x) #> [1] \"numeric\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"Auto Breaks Matrix Plotting Functions","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"","code":"utils_color_breaks(m = NULL, n = 100)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"m (required, numeric matrix) distance cost matrix generated psi_dist_matrix() psi_cost_matrix(), numeric matrix work. Default: NULL n (required, integer) number colors compute breaks . Default: 100","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_continuous_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Continuous Color Palette — utils_color_continuous_default","title":"Default Continuous Color Palette — utils_color_continuous_default","text":"Uses function grDevices::hcl.colors() generate continuous color palette.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_continuous_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Continuous Color Palette — utils_color_continuous_default","text":"","code":"utils_color_continuous_default(n = NULL, palette = \"Zissou 1\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_continuous_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Continuous Color Palette — utils_color_continuous_default","text":"n (required, integer) number colors generate. Default = NULL palette (required, character string) Argument palette grDevices::hcl.colors(). Default: \"Zissou 1\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_continuous_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Continuous Color Palette — utils_color_continuous_default","text":"color vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_continuous_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Continuous Color Palette — utils_color_continuous_default","text":"","code":"utils_color_continuous_default(n = 20) #>  [1] \"#3B99B1\" \"#35A2AC\" \"#3FAAA6\" \"#52B19F\" \"#6AB699\" \"#81BB95\" \"#98BF95\" #>  [8] \"#AAC392\" \"#BEC78D\" \"#D4CA84\" \"#EAC527\" \"#EAB821\" \"#E9AC1C\" \"#E89F16\" #> [15] \"#E7920D\" \"#E78400\" \"#E87500\" \"#EB6200\" \"#EF4900\" \"#F5191C\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_discrete_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Discrete Color Palettes — utils_color_discrete_default","title":"Default Discrete Color Palettes — utils_color_discrete_default","text":"Uses function grDevices::palette.colors() generate discrete color palettes using following rules: n <= 9: \"Okabe-Ito\". n == 10: \"Tableau 10\" n > 10 && n <= 12: \"Paired\" n > 12 && n <= 26: \"Alphabet\" n > 26 && n <= 36: \"Polychrome 36\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_discrete_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Discrete Color Palettes — utils_color_discrete_default","text":"","code":"utils_color_discrete_default(n = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_discrete_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Discrete Color Palettes — utils_color_discrete_default","text":"n (required, integer) number colors (36) generate. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_discrete_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Discrete Color Palettes — utils_color_discrete_default","text":"color vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_discrete_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Discrete Color Palettes — utils_color_discrete_default","text":"","code":"utils_color_discrete_default(n = 9) #> [1] \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\" #> [8] \"#CC79A7\" \"#999999\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Decimal Places — utils_digits","title":"Number of Decimal Places — utils_digits","text":"Number Decimal Places","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Decimal Places — utils_digits","text":"","code":"utils_digits(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Decimal Places — utils_digits","text":"x (required, numeric) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Decimal Places — utils_digits","text":"integer","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Decimal Places — utils_digits","text":"","code":"utils_digits(x = 0.234) #> [1] 3"},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"Internal function split distantia data frame groups arguments 'distance', 'diagonal', 'weighted', 'ignore_blocks', 'lock_step'.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"","code":"utils_distantia_df_split(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"df (required, data frame) Output distantia() distantia_aggregate(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )  #dissimilarity analysis with four combinations of parameters df <- distantia(   tsl = tsl,   distance = c(     \"euclidean\",     \"manhattan\"     ),   lock_step = c(     TRUE,     FALSE   ) )  #split by combinations of parameters df_split <- utils_distantia_df_split(   df = df )  #print output df_split #> $`1` #>    distance diagonal weighted ignore_blocks lock_step       x      y       psi #> 4 euclidean     TRUE     TRUE         FALSE      TRUE Germany  Spain 1.3962157 #> 5 euclidean     TRUE     TRUE         FALSE      TRUE Germany Sweden 0.8364652 #> 6 euclidean     TRUE     TRUE         FALSE      TRUE   Spain Sweden 1.5703931 #>   group #> 4     1 #> 5     1 #> 6     1 #>  #> $`2` #>     distance diagonal weighted ignore_blocks lock_step       x      y       psi #> 10 manhattan     TRUE     TRUE         FALSE      TRUE Germany  Spain 1.3737381 #> 11 manhattan     TRUE     TRUE         FALSE      TRUE Germany Sweden 0.8271986 #> 12 manhattan     TRUE     TRUE         FALSE      TRUE   Spain Sweden 1.5755002 #>    group #> 10     2 #> 11     2 #> 12     2 #>  #> $`3` #>    distance diagonal weighted ignore_blocks lock_step       x      y       psi #> 1 euclidean     TRUE     TRUE         FALSE     FALSE Germany  Spain 1.0360268 #> 2 euclidean     TRUE     TRUE         FALSE     FALSE Germany Sweden 0.7285701 #> 3 euclidean     TRUE     TRUE         FALSE     FALSE   Spain Sweden 1.0237508 #>   group #> 1     3 #> 2     3 #> 3     3 #>  #> $`4` #>    distance diagonal weighted ignore_blocks lock_step       x      y      psi #> 7 manhattan     TRUE     TRUE         FALSE     FALSE Germany  Spain 1.134012 #> 8 manhattan     TRUE     TRUE         FALSE     FALSE Germany Sweden 0.761250 #> 9 manhattan     TRUE     TRUE         FALSE     FALSE   Spain Sweden 1.166331 #>   group #> 7     4 #> 8     4 #> 9     4 #>   #class and length of the output class(df_split) #> [1] \"list\" length(df_split) #> [1] 4"},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame to Matrix — utils_distantia_df_to_matrix","title":"Data Frame to Matrix — utils_distantia_df_to_matrix","text":"Internal function convert distantia data frame matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame to Matrix — utils_distantia_df_to_matrix","text":"","code":"utils_distantia_df_to_matrix(df = NULL, x = \"x\", y = \"y\", value = \"psi\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame to Matrix — utils_distantia_df_to_matrix","text":"df (required, data frame) data frame typically resulting distantia(), others accepted long columns x, y, value available. Default: NULL x (required, character string) Name column names matrix columns. Default: \"x\" y (required, character string) Name column names matrix rows. Default: \"y\" value (required, character string) Name column values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame to Matrix — utils_distantia_df_to_matrix","text":"dist matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Frame to Matrix — utils_distantia_df_to_matrix","text":"","code":"tsl <- tsl_simulate(   n = 3,   time_range = c(     \"2010-01-01 12:00:25\",     \"2024-12-31 11:15:45\"   ) )  df <- distantia(   tsl = tsl )  m <- utils_distantia_df_to_matrix(   df = df )  m #>          A        B        C #> A 0.000000 2.248162 5.061887 #> B 2.248162 0.000000 6.084643 #> C 5.061887 6.084643 0.000000"},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"Internal function compute global scaling parameters (mean standard deviation) time series lists. Used within tsl_transform() scaling functions f_center(), f_scale(), base::scale() used inputs argument f. Warning: function removes exclusive columns data. See function tsl_subset().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"","code":"utils_global_scaling_params(tsl = NULL, f = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"tsl (required, list) Time series list. Default: NULL f (required, function) function name. Usually, one f_center(), f_scale(), base::scale(). Default: NULL ... (optional, arguments f) Optional arguments transformation function. Used f = scale arguments center scale.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_importance_df_to_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame with Contribution of Individual Variables to Dissimilarity to Wide Format — utils_importance_df_to_wide","title":"Data Frame with Contribution of Individual Variables to Dissimilarity to Wide Format — utils_importance_df_to_wide","text":"Takes input data frame returned distantia_importance() return data frame one pair time series per row, following columns: most_similar: name variable highest contribution similarity (negative value importance column) pair time series. most_dissimilar: name variable highest contribution dissimilarity (positive value importance column) pair time series. importance__variable_name: contribution similarity (negative values) dissimilarity (positive values) given variable. psi_only_with__variable_name: dissimilarity two time series using given variable. psi_without__variable_name: dissimilarity two time series removing given variable.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_importance_df_to_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame with Contribution of Individual Variables to Dissimilarity to Wide Format — utils_importance_df_to_wide","text":"","code":"utils_importance_df_to_wide(df = NULL, sep = \"__\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_importance_df_to_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame with Contribution of Individual Variables to Dissimilarity to Wide Format — utils_importance_df_to_wide","text":"df (required, data frame) Output distantia_importance(). Default: NULL sep (required, character string) Separator name importance metric time series variable. Default: \"__\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_importance_df_to_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame with Contribution of Individual Variables to Dissimilarity to Wide Format — utils_importance_df_to_wide","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_importance_df_to_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Frame with Contribution of Individual Variables to Dissimilarity to Wide Format — utils_importance_df_to_wide","text":"","code":"#prepare time series data(\"fagus_dynamics\")  tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" ) |>   tsl_transform(     f = f_scale   )  #importance data frame df <- distantia_importance(   tsl = tsl ) df #>         x      y       psi    variable importance               effect #> 1 Germany  Spain 1.3429956         evi   6.512321 decreases similarity #> 2 Germany  Spain 1.3429956    rainfall  12.505764 decreases similarity #> 3 Germany  Spain 1.3429956 temperature -26.509115 increases similarity #> 4 Germany Sweden 0.8571217         evi  29.026504 decreases similarity #> 5 Germany Sweden 0.8571217    rainfall  -4.209397 increases similarity #> 6 Germany Sweden 0.8571217 temperature -26.661768 increases similarity #> 7   Spain Sweden 1.4803954         evi  -6.625437 increases similarity #> 8   Spain Sweden 1.4803954    rainfall  -4.416941 increases similarity #> 9   Spain Sweden 1.4803954 temperature  13.668290 decreases similarity #>   psi_difference psi_without psi_only_with  distance diagonal weighted #> 1     0.08746019   1.3091727     1.3966329 euclidean     TRUE     TRUE #> 2     0.16795186   1.2442260     1.4121779 euclidean     TRUE     TRUE #> 3    -0.35601625   1.4170621     1.0610458 euclidean     TRUE     TRUE #> 4     0.24879247   0.7850271     1.0338196 euclidean     TRUE     TRUE #> 5    -0.03607966   0.8800855     0.8440058 euclidean     TRUE     TRUE #> 6    -0.22852381   0.9121250     0.6836012 euclidean     TRUE     TRUE #> 7    -0.09808266   1.5155933     1.4175106 euclidean     TRUE     TRUE #> 8    -0.06538819   1.5451489     1.4797607 euclidean     TRUE     TRUE #> 9     0.20234474   1.4411407     1.6434855 euclidean     TRUE     TRUE #>   ignore_blocks lock_step robust #> 1         FALSE     FALSE   TRUE #> 2         FALSE     FALSE   TRUE #> 3         FALSE     FALSE   TRUE #> 4         FALSE     FALSE   TRUE #> 5         FALSE     FALSE   TRUE #> 6         FALSE     FALSE   TRUE #> 7         FALSE     FALSE   TRUE #> 8         FALSE     FALSE   TRUE #> 9         FALSE     FALSE   TRUE  #to wide format df_wide <- utils_importance_df_to_wide(   df = df ) df_wide #>         x      y       psi most_similar most_dissimilar importance__evi #> 1 Germany  Spain 1.3429956  temperature        rainfall        6.512321 #> 2 Germany Sweden 0.8571217  temperature             evi       29.026504 #> 3   Spain Sweden 1.4803954          evi     temperature       -6.625437 #>   importance__rainfall importance__temperature psi_only_with__evi #> 1            12.505764               -26.50912           1.396633 #> 2            -4.209397               -26.66177           1.033820 #> 3            -4.416941                13.66829           1.417511 #>   psi_only_with__rainfall psi_only_with__temperature psi_without__evi #> 1               1.4121779                  1.0610458        1.3091727 #> 2               0.8440058                  0.6836012        0.7850271 #> 3               1.4797607                  1.6434855        1.5155933 #>   psi_without__rainfall psi_without__temperature #> 1             1.2442260                 1.417062 #> 2             0.8800855                 0.912125 #> 3             1.5451489                 1.441141"},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — utils_is_time","title":"Title — utils_is_time","text":"Title","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — utils_is_time","text":"","code":"utils_is_time(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — utils_is_time","text":"x (required, vector) Vector test. class vector elements 'numeric', 'POSIXct', 'Date', function returns TRUE. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — utils_is_time","text":"logical","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — utils_is_time","text":"","code":"utils_is_time(   x = c(\"2024-01-01\", \"2024-02-01\") ) #> [1] FALSE  utils_is_time(   x = utils_as_time(     x = c(\"2024-01-01\", \"2024-02-01\")     ) ) #> [1] TRUE"},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Handles Line Colors for Sequence Plots — utils_line_color","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"internal function, can used better understand line colors handled within plotting functions.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"","code":"utils_line_color(x = NULL, color = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"x (required, sequence) zoo time series time series list. Default: NULL color (optional, character vector) vector colors time series columns. Selected palette depends number columns plot. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"color vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":null,"dir":"Reference","previous_headings":"","what":"Guide for Time Series Plots — utils_line_guide","title":"Guide for Time Series Plots — utils_line_guide","text":"Guide Time Series Plots","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guide for Time Series Plots — utils_line_guide","text":"","code":"utils_line_guide(   x,   position = \"topright\",   color = NULL,   width = 1,   length = 1,   text_cex = 0.7,   ncol = 1,   subpanel = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guide for Time Series Plots — utils_line_guide","text":"x (required, sequence) zoo time series time series list. Default: NULL position (optional, vector xy coordinates character string). condensed version x y arguments graphics::legend() function. Coordinates (range 0 1) keyword position legend. Accepted keywords : \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"topright\", \"right\" \"center\". Default: \"topright\". color (optional, character vector) vector colors time series columns. NULL, uses palette \"Zissou 1\" provided function grDevices::hcl.colors(). Default: NULL width (optional, numeric vector) Widths time series lines. Default: 1 length (optional, numeric) maps argument seg.len graphics::legend(). Length lines drawn legend. Default: 1 text_cex (optional, numeric) Multiplier text size. Default: 0.7 ncol (optional, integer) Number columns set legend items. Default: 1. subpanel (optional, logical) internal argument used generating multipanel plot produced distantia_plot().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guide for Time Series Plots — utils_line_guide","text":"plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guide for Time Series Plots — utils_line_guide","text":"","code":"x <- zoo_simulate()  if(interactive()){    zoo_plot(x, guide = FALSE)    utils_line_guide(     x = x,     position = \"right\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Guide for Matrix Plot — utils_matrix_guide","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"Plots color legend distance cost matrix multi-panel plots external image editors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"","code":"utils_matrix_guide(   m = NULL,   color = NULL,   breaks = NULL,   title = NULL,   text_cex = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"m (required, numeric matrix) distance cost matrix generated psi_dist_matrix() psi_cost_matrix(), numeric matrix work. Default: NULL color (optional, character vector) vector colors. Default: NULL breaks (optional, numeric vector) vector breaks color guide. Default: NULL title (optional, character string) guide title. Default: NULL text_cex (optional, numeric) multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"Plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"","code":"#prepare time series list tsl <- tsl_simulate(   n = 2,   independent = TRUE )  #distance matrix between time series dm <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]] )  if(interactive()){   utils_matrix_guide(m = dm) }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"function simplified version fields::imagePlot(), Douglas Nychka. original version recommended case customization provided needed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"","code":"utils_matrix_plot(   m = NULL,   color = NULL,   title = NULL,   subtitle = NULL,   xlab = NULL,   ylab = NULL,   text_cex = 1,   path = NULL,   path_width = 1,   path_color = \"black\",   guide = TRUE,   subpanel = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"m (required, numeric matrix) distance cost matrix generated psi_dist_matrix() psi_cost_matrix(), numeric matrix work. Default: NULL color (optional, character vector) vector colors. Uses palette \"Zissou 1\" default. Default: NULL title (optional, character string) plot title. default, names sequences used compute matrix m. Default: NULL subtitle (optional, character string) plot subtitle. Default: NULL xlab (optional, character string) title x axis (matrix columns). default, name one sequences used compute matrix m. Default: NULL ylab (optional, character string) title y axis (matrix rows). default, name one sequences used compute matrix m. Default: NULL text_cex (optional, numeric) multiplicator text size plot labels titles. Default: 1 path (optional, data frame) least cost path generated psi_cost_path(). data frame must attribute type == \"cost_path, must computed sequences used compute matrix m. Default: NULL. path_width (optional, numeric) width least-cost path. Default: 1 path_color (optional, character string) color least-cost path. Default: \"black\" guide (optional, logical) TRUE, color guide matrix m added utils_matrix_guide(). subpanel (optional, logical) internal argument used generating multi-panel plot produced distantia_plot().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"","code":"#prepare time series list tsl <- tsl_simulate(   n = 2,   independent = TRUE )  #distance matrix between time series dm <- psi_dist_matrix(   x = tsl[[1]],   y = tsl[[2]] )  #cost matrix cm <- psi_cost_matrix(   dist_matrix = dm   )  #least cost path cp <- psi_cost_path(   dist_matrix = dm,   cost_matrix = cm )  #plot cost matrix and least cost path if(interactive()){   utils_matrix_plot(     m = cm,     path = cp,     guide = TRUE   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":null,"dir":"Reference","previous_headings":"","what":"New Time for Time Series Aggregation — utils_new_time","title":"New Time for Time Series Aggregation — utils_new_time","text":"Internal function called tsl_aggregate() tsl_resample() help transform input argument new_time proper format time series aggregation resampling.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Time for Time Series Aggregation — utils_new_time","text":"","code":"utils_new_time(tsl = NULL, new_time = NULL, keywords = \"aggregate\")  utils_new_time_type(   tsl = NULL,   new_time = NULL,   keywords = c(\"resample\", \"aggregate\") )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New Time for Time Series Aggregation — utils_new_time","text":"tsl (required, list) Time series list. Default: NULL new_time (required, zoo object, numeric, numeric vector, Date vector, POSIXct vector, keyword) breakpoints defining aggregation groups. Options : numeric vector: \"numeric\" time class, defines breakpoints time series aggregation. \"Date\" \"POSIXct\" vector: , time classes \"Date\" \"POSIXct.\" case, input vector coerced time class tsl argument. numeric: defines fixed time intervals time series aggregation. Used time class \"numeric\", coerced integer interpreted days time classes \"Date\" \"POSIXct\". keyword (see utils_time_units() tsl_time_summary()): common options time classes \"Date\" \"POSIXct\" : \"millennia\", \"centuries\", \"decades\", \"years\", \"quarters\", \"months\", \"weeks\". Exclusive keywords \"POSIXct\" time class : \"days\", \"hours\", \"minutes\", \"seconds\". time class \"numeric\" accepts keywords coded scientific numbers, \"1e8\" \"1e-8\". keywords (optional, character string vector) Defines keywords returned. \"aggregate\", returns valid keywords zoo_aggregate(). \"resample\", returns valid keywords zoo_resample(). Default: \"aggregate\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New Time for Time Series Aggregation — utils_new_time","text":"Vector class numeric, Date, POSIXct","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Time for Time Series Aggregation — utils_new_time","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   id_column = \"site\",   time_column = \"date\" )  # new time for aggregation using keywords #-----------------------------------  #get valid keywords for aggregation tsl_time_summary(   tsl = tsl,   keywords = \"aggregate\" )$keywords #> [1] \"decades\"  \"years\"    \"quarters\"  #if no keyword is used, for aggregation the highest resolution keyword is selected automatically new_time <- utils_new_time(   tsl = tsl,   new_time = NULL,   keywords = \"aggregate\" ) #> Aggregating 'tsl' with keyword 'quarters'.  new_time #>  [1] \"2001-01-01\" \"2001-04-01\" \"2001-07-01\" \"2001-10-01\" \"2002-01-01\" #>  [6] \"2002-04-01\" \"2002-07-01\" \"2002-10-01\" \"2003-01-01\" \"2003-04-01\" #> [11] \"2003-07-01\" \"2003-10-01\" \"2004-01-01\" \"2004-04-01\" \"2004-07-01\" #> [16] \"2004-10-01\" \"2005-01-01\" \"2005-04-01\" \"2005-07-01\" \"2005-10-01\" #> [21] \"2006-01-01\" \"2006-04-01\" \"2006-07-01\" \"2006-10-01\" \"2007-01-01\" #> [26] \"2007-04-01\" \"2007-07-01\" \"2007-10-01\" \"2008-01-01\" \"2008-04-01\" #> [31] \"2008-07-01\" \"2008-10-01\" \"2009-01-01\" \"2009-04-01\" \"2009-07-01\" #> [36] \"2009-10-01\" \"2010-01-01\" \"2010-04-01\" \"2010-07-01\" \"2010-10-01\" #> [41] \"2011-01-01\" \"2011-04-01\" \"2011-07-01\" \"2011-10-01\" \"2012-01-01\" #> [46] \"2012-04-01\" \"2012-07-01\" \"2012-10-01\" \"2013-01-01\" \"2013-04-01\" #> [51] \"2013-07-01\" \"2013-10-01\" \"2014-01-01\" \"2014-04-01\" \"2014-07-01\" #> [56] \"2014-10-01\" \"2015-01-01\" \"2015-04-01\" \"2015-07-01\" \"2015-10-01\" #> [61] \"2016-01-01\" \"2016-04-01\" \"2016-07-01\" \"2016-10-01\" \"2017-01-01\" #> [66] \"2017-04-01\" \"2017-07-01\" \"2017-10-01\" \"2018-01-01\" \"2018-04-01\" #> [71] \"2018-07-01\" \"2018-10-01\"  #if no keyword is used #for resampling a regular version #of the original time based on the #average resolution is used instead new_time <- utils_new_time(   tsl = tsl,   new_time = NULL,   keywords = \"resample\" ) #> Resampling 'tsl' with a regular version of its own time.  new_time #>   [1] \"2001-01-01\" \"2001-01-31\" \"2001-03-02\" \"2001-04-02\" \"2001-05-02\" #>   [6] \"2001-06-02\" \"2001-07-02\" \"2001-08-02\" \"2001-09-01\" \"2001-10-01\" #>  [11] \"2001-11-01\" \"2001-12-01\" \"2002-01-01\" \"2002-01-31\" \"2002-03-03\" #>  [16] \"2002-04-02\" \"2002-05-02\" \"2002-06-02\" \"2002-07-02\" \"2002-08-02\" #>  [21] \"2002-09-01\" \"2002-10-02\" \"2002-11-01\" \"2002-12-01\" \"2003-01-01\" #>  [26] \"2003-01-31\" \"2003-03-03\" \"2003-04-02\" \"2003-05-03\" \"2003-06-02\" #>  [31] \"2003-07-02\" \"2003-08-02\" \"2003-09-01\" \"2003-10-02\" \"2003-11-01\" #>  [36] \"2003-12-02\" \"2004-01-01\" \"2004-02-01\" \"2004-03-02\" \"2004-04-01\" #>  [41] \"2004-05-02\" \"2004-06-01\" \"2004-07-02\" \"2004-08-01\" \"2004-09-01\" #>  [46] \"2004-10-01\" \"2004-10-31\" \"2004-12-01\" \"2004-12-31\" \"2005-01-31\" #>  [51] \"2005-03-02\" \"2005-04-02\" \"2005-05-02\" \"2005-06-01\" \"2005-07-02\" #>  [56] \"2005-08-01\" \"2005-09-01\" \"2005-10-01\" \"2005-11-01\" \"2005-12-01\" #>  [61] \"2005-12-31\" \"2006-01-31\" \"2006-03-02\" \"2006-04-02\" \"2006-05-02\" #>  [66] \"2006-06-02\" \"2006-07-02\" \"2006-08-01\" \"2006-09-01\" \"2006-10-01\" #>  [71] \"2006-11-01\" \"2006-12-01\" \"2007-01-01\" \"2007-01-31\" \"2007-03-03\" #>  [76] \"2007-04-02\" \"2007-05-02\" \"2007-06-02\" \"2007-07-02\" \"2007-08-02\" #>  [81] \"2007-09-01\" \"2007-10-02\" \"2007-11-01\" \"2007-12-01\" \"2008-01-01\" #>  [86] \"2008-01-31\" \"2008-03-02\" \"2008-04-01\" \"2008-05-02\" \"2008-06-01\" #>  [91] \"2008-07-01\" \"2008-08-01\" \"2008-08-31\" \"2008-10-01\" \"2008-10-31\" #>  [96] \"2008-12-01\" \"2008-12-31\" \"2009-01-30\" \"2009-03-02\" \"2009-04-01\" #> [101] \"2009-05-02\" \"2009-06-01\" \"2009-07-02\" \"2009-08-01\" \"2009-08-31\" #> [106] \"2009-10-01\" \"2009-10-31\" \"2009-12-01\" \"2009-12-31\" \"2010-01-31\" #> [111] \"2010-03-02\" \"2010-04-02\" \"2010-05-02\" \"2010-06-01\" \"2010-07-02\" #> [116] \"2010-08-01\" \"2010-09-01\" \"2010-10-01\" \"2010-11-01\" \"2010-12-01\" #> [121] \"2010-12-31\" \"2011-01-31\" \"2011-03-02\" \"2011-04-02\" \"2011-05-02\" #> [126] \"2011-06-02\" \"2011-07-02\" \"2011-08-01\" \"2011-09-01\" \"2011-10-01\" #> [131] \"2011-11-01\" \"2011-12-01\" \"2012-01-01\" \"2012-01-31\" \"2012-03-01\" #> [136] \"2012-04-01\" \"2012-05-01\" \"2012-06-01\" \"2012-07-01\" \"2012-08-01\" #> [141] \"2012-08-31\" \"2012-09-30\" \"2012-10-31\" \"2012-11-30\" \"2012-12-31\" #> [146] \"2013-01-30\" \"2013-03-02\" \"2013-04-01\" \"2013-05-02\" \"2013-06-01\" #> [151] \"2013-07-01\" \"2013-08-01\" \"2013-08-31\" \"2013-10-01\" \"2013-10-31\" #> [156] \"2013-12-01\" \"2013-12-31\" \"2014-01-30\" \"2014-03-02\" \"2014-04-01\" #> [161] \"2014-05-02\" \"2014-06-01\" \"2014-07-02\" \"2014-08-01\" \"2014-08-31\" #> [166] \"2014-10-01\" \"2014-10-31\" \"2014-12-01\" \"2014-12-31\" \"2015-01-31\" #> [171] \"2015-03-02\" \"2015-04-01\" \"2015-05-02\" \"2015-06-01\" \"2015-07-02\" #> [176] \"2015-08-01\" \"2015-09-01\" \"2015-10-01\" \"2015-10-31\" \"2015-12-01\" #> [181] \"2015-12-31\" \"2016-01-31\" \"2016-03-01\" \"2016-04-01\" \"2016-05-01\" #> [186] \"2016-06-01\" \"2016-07-01\" \"2016-07-31\" \"2016-08-31\" \"2016-09-30\" #> [191] \"2016-10-31\" \"2016-11-30\" \"2016-12-31\" \"2017-01-30\" \"2017-03-01\" #> [196] \"2017-04-01\" \"2017-05-01\" \"2017-06-01\" \"2017-07-01\" \"2017-08-01\" #> [201] \"2017-08-31\" \"2017-09-30\" \"2017-10-31\" \"2017-11-30\" \"2017-12-31\" #> [206] \"2018-01-30\" \"2018-03-02\" \"2018-04-01\" \"2018-05-01\" \"2018-06-01\" #> [211] \"2018-07-01\" \"2018-08-01\" \"2018-08-31\" \"2018-10-01\" \"2018-10-31\" #> [216] \"2018-12-01\"  #aggregation time vector form keyword \"years\" new_time <- utils_new_time(   tsl = tsl,   new_time = \"years\",   keywords = \"aggregate\" )  new_time #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2005-01-01\" #>  [6] \"2006-01-01\" \"2007-01-01\" \"2008-01-01\" \"2009-01-01\" \"2010-01-01\" #> [11] \"2011-01-01\" \"2012-01-01\" \"2013-01-01\" \"2014-01-01\" \"2015-01-01\" #> [16] \"2016-01-01\" \"2017-01-01\" \"2018-01-01\"  #same from shortened keyword #see utils_time_keywords_dictionary() utils_new_time(   tsl = tsl,   new_time = \"year\",   keywords = \"aggregate\" ) #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2005-01-01\" #>  [6] \"2006-01-01\" \"2007-01-01\" \"2008-01-01\" \"2009-01-01\" \"2010-01-01\" #> [11] \"2011-01-01\" \"2012-01-01\" \"2013-01-01\" \"2014-01-01\" \"2015-01-01\" #> [16] \"2016-01-01\" \"2017-01-01\" \"2018-01-01\"  #same for abbreviated keyword utils_new_time(   tsl = tsl,   new_time = \"y\",   keywords = \"aggregate\" ) #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2005-01-01\" #>  [6] \"2006-01-01\" \"2007-01-01\" \"2008-01-01\" \"2009-01-01\" \"2010-01-01\" #> [11] \"2011-01-01\" \"2012-01-01\" \"2013-01-01\" \"2014-01-01\" \"2015-01-01\" #> [16] \"2016-01-01\" \"2017-01-01\" \"2018-01-01\"  #from a integer defining a time interval in days utils_new_time(   tsl = tsl,   new_time = 365,   keywords = \"aggregate\" ) #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2004-12-31\" #>  [6] \"2005-12-31\" \"2006-12-31\" \"2007-12-31\" \"2008-12-30\" \"2009-12-30\" #> [11] \"2010-12-30\" \"2011-12-30\" \"2012-12-29\" \"2013-12-29\" \"2014-12-29\" #> [16] \"2015-12-29\" \"2016-12-28\" \"2017-12-28\"  #using this vector as input for aggregation tsl_aggregated <- tsl_aggregate(   tsl = tsl,   new_time = new_time )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"Internal function used zoo_resample(). finds span parameter univariate Loess (Locally Estimated Scatterplot Smoothing.) model y ~ x fitted stats::loess() minimizes root mean squared error (rmse) observations predictions, returns model fitted span.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"","code":"utils_optimize_loess(x = NULL, y = NULL, max_complexity = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"x (required, numeric vector) predictor, time vector coerced numeric. Default: NULL y (required, numeric vector) response, column zoo object. Default: NULL max_complexity (required, logical). TRUE, RMSE optimization ignored, model maximum complexity returned. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"Loess model.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"","code":"#zoo time series xy <- zoo_simulate(   cols = 1,   rows = 30 )  #optimize loess model m <- utils_optimize_loess(   x = as.numeric(zoo::index(xy)), #predictor   y = xy[, 1] #response )  print(m) #> Call: #> stats::loess(formula = y ~ x, data = model_df, enp.target = complexity_value,  #>     degree = 1, surface = \"direct\") #>  #> Number of Observations: 30  #> Equivalent Number of Parameters: 17.3  #> Residual Standard Error: 0.04367   #plot observation plot(   x = zoo::index(xy),   y = xy[, 1],   col = \"forestgreen\",   type = \"l\",   lwd = 2   )  #plot prediction points(   x = zoo::index(xy),   y = stats::predict(     object = m,     newdata = as.numeric(zoo::index(xy))     ),   col = \"red4\"   )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"Internal function used zoo_resample(). finds optimal df parameter smoothing spline model y ~ x fitted stats::smooth.spline()  minimizes root mean squared error (rmse) observations predictions, returns model fitted df.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"","code":"utils_optimize_spline(x = NULL, y = NULL, max_complexity = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"x (required, numeric vector) predictor, time vector coerced numeric. Default: NULL y (required, numeric vector) response, column zoo object. Default: NULL max_complexity (required, logical). TRUE, RMSE optimization ignored, model maximum complexity returned. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"Object class \"smooth.spline\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"","code":"#zoo time series xy <- zoo_simulate(   cols = 1,   rows = 30 )  #optimize splines model m <- utils_optimize_spline(   x = as.numeric(zoo::index(xy)), #predictor   y = xy[, 1] #response )  print(m) #> Call: #> stats::smooth.spline(x = model_df$x, y = model_df$y, df = complexity_value,  #>     all.knots = TRUE) #>  #> Smoothing Parameter  spar= -1.043904  lambda= 4.562062e-16 (25 iterations) #> Equivalent Degrees of Freedom (Df): 30 #> Penalized Criterion (RSS): 1.244311e-20 #> GCV: 0.0006169311  #plot observation plot(   x = zoo::index(xy),   y = xy[, 1],   col = \"forestgreen\",   type = \"l\",   lwd = 2   )  #plot prediction points(   x = zoo::index(xy),   y = stats::predict(     object = m,     x = as.numeric(zoo::index(xy))   )$y,   col = \"red\" )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to a List of Data Frames — utils_prepare_df","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"Convert Data Frame List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"","code":"utils_prepare_df(x = NULL, id_column = NULL, time_column = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"x (required, data frame) Input data frame. Default: NULL. id_column (optional, column name) Column name used split x list data frames. omitted, split done column instead. Default: NULL time_column (optional, column name) Name column representing time, . Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"List data frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Matrix to Data Frame — utils_prepare_matrix","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"Convert Matrix Data Frame","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"","code":"utils_prepare_matrix(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"x (required, matrix) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"Convert List Matrices List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"","code":"utils_prepare_matrix_list(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"x (required, list matrices) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"List Data Frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Handles Time Column in a List of Data Frames — utils_prepare_time","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"Handles Time Column List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"","code":"utils_prepare_time(x = NULL, time_column = NULL, lock_step = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"x (required, named list data frames). List named data frames. Default: NULL. time_column (optional lock_step = FALSE, required otherwise, column name) Name numeric column representing time. Default: NULL. lock_step (optional, logical) TRUE, input sequences subset common times according values time_column. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"List data frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"Convert List Vectors List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"","code":"utils_prepare_vector_list(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"x (required, list vectors) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"List data frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"Convert List Data Frames List Zoo Objects","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"","code":"utils_prepare_zoo_list(x = NULL, time_column = NULL, lock_step = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"x (required, list data frames) named list data frames. Default: NULL. time_column (optional lock_step = FALSE, required otherwise, column name) Name column representing time, . Default: NULL. lock_step (optional, logical) TRUE, input sequences subset common times according values time_column.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"named list data frames, matrices, vectors.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"","code":"data(mis) x <- tsl_initialize(   x = mis,   id_column = \"mis\" )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"Rescale Numeric Vector New Data Range","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"","code":"utils_rescale_vector(   x = NULL,   new_min = 0,   new_max = 1,   old_min = NULL,   old_max = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"x (required, numeric vector) Numeric vector. Default: NULL new_min (optional, numeric) New minimum value. Default: 0 new_max (optional_numeric) New maximum value. Default: 1 old_min (optional, numeric) Old minimum value. Default: NULL old_max (optional_numeric) Old maximum value. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"","code":"out <- utils_rescale_vector(    x = stats::rnorm(100),    new_min = 0,    new_max = 100,    )   out #>   [1]  29.086621  23.199202   2.845986  51.679253  38.043773   9.522079 #>   [7]  10.170772  52.292780  56.689488   5.138961  20.217833  45.308971 #>  [13]  71.706874  41.425704  15.003059  12.047408  43.222873  53.462374 #>  [19]  49.392275  51.471826  15.466067  25.121503  46.849407  40.489756 #>  [25]  28.379049  44.968103  48.653172  41.614896  74.551580  17.468843 #>  [31]  25.814682  89.782857  61.815791  53.216857   0.000000  56.064191 #>  [37]  23.349111  38.730467  54.314514  59.133788  15.274319  17.319443 #>  [43]  42.585680  29.559929  37.822402  30.623254  19.256045  43.781062 #>  [49]  26.683451  47.300464  73.593771  43.399101  38.709961  18.998030 #>  [55]  56.416552 100.000000  11.059775  42.298127  38.639211  76.061023 #>  [61]  20.278665   3.525209  57.633862  55.679919   8.580571  28.402294 #>  [67]  30.662182  57.707963  39.159951  45.871171   8.919116  22.511051 #>  [73]  23.745572  61.488610  43.368927  61.670191  55.663387  31.340706 #>  [79]  73.422910  53.446833  51.934409  40.907975  44.966750  24.733900 #>  [85]  46.227559  42.090719  87.426804  52.802740  46.247340  42.574402 #>  [91]  41.446773  18.450158  28.445864  43.764621  32.158923  23.752575 #>  [97]  35.862729  54.813933  46.934541  47.806239"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Aggregation Keywords — utils_time_keywords","title":"Valid Aggregation Keywords — utils_time_keywords","text":"Internal function obtain valid aggregation keywords zoo object time series list.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Aggregation Keywords — utils_time_keywords","text":"","code":"utils_time_keywords(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid Aggregation Keywords — utils_time_keywords","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid Aggregation Keywords — utils_time_keywords","text":"Character string, aggregation keyword, \"none\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valid Aggregation Keywords — utils_time_keywords","text":"","code":"#one minute time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.time() - 60,     Sys.time()   ) )  #valid keywords for aggregation and/or resampling utils_time_keywords(   tsl = tsl ) #> [1] \"seconds\"  #10 minutes time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.time() - 600,     Sys.time()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"minutes\" \"seconds\"  #10 hours time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.time() - 6000,     Sys.time()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"hours\"   \"minutes\" \"seconds\"  #10 days time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.Date() - 10,     Sys.Date()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"weeks\" \"days\"   #10 years time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.Date() - 3650,     Sys.Date()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"years\"    \"quarters\" \"months\"   \"weeks\"    \"decades\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Time Keywords — utils_time_keywords_dictionary","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"Called utils_time_keywords_translate() generate data frame helps translate misnamed abbreviated time keywords, like \"day\", \"daily\", \"d\", correct ones \"days\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"","code":"utils_time_keywords_dictionary()"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"","code":"df <- utils_time_keywords_dictionary()"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"Internal function translate misnamed abbreviated keywords valid ones. Uses utils_time_keywords_dictionary() reference dictionary.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"","code":"utils_time_keywords_translate(keyword = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"keyword (optional, character string) time keyword \"day\". Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"Time keyword.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"","code":"#millennia utils_time_keywords_translate(   keyword = \"1000 years\" ) #> [1] \"millennia\"  utils_time_keywords_translate(   keyword = \"1000 y\" ) #> [1] \"millennia\"  utils_time_keywords_translate(   keyword = \"thousands\" ) #> [1] \"millennia\"  #years utils_time_keywords_translate(   keyword = \"year\" ) #> [1] \"years\"  utils_time_keywords_translate(   keyword = \"y\" ) #> [1] \"years\"  #days utils_time_keywords_translate(   keyword = \"d\" ) #> [1] \"days\"  utils_time_keywords_translate(   keyword = \"day\" ) #> [1] \"days\"  #seconds utils_time_keywords_translate(   keyword = \"s\" ) #> [1] \"seconds\"  utils_time_keywords_translate(   keyword = \"sec\" ) #> [1] \"seconds\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame with Supported Time Units — utils_time_units","title":"Data Frame with Supported Time Units — utils_time_units","text":"Returns data frame names supported time units, classes can handle time unit, threshold used identify time units can used aggregating time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame with Supported Time Units — utils_time_units","text":"","code":"utils_time_units(all_columns = FALSE, class = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame with Supported Time Units — utils_time_units","text":"all_columns (optional, logical) TRUE, columns returned. Default: FALSE class (optional, class name). Used filter rows columns. Accepted values \"numeric\", \"Date\", \"POSIXct\". Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame with Supported Time Units — utils_time_units","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Frame with Supported Time Units — utils_time_units","text":"","code":"df <- utils_time_units() head(df) #>   base_units     units Date POSIXct numeric integer #> 1       days millennia TRUE    TRUE   FALSE   FALSE #> 2       days centuries TRUE    TRUE   FALSE   FALSE #> 3       days   decades TRUE    TRUE   FALSE   FALSE #> 4       days     years TRUE    TRUE   FALSE   FALSE #> 5       days  quarters TRUE    TRUE   FALSE   FALSE #> 6       days    months TRUE    TRUE   FALSE   FALSE"},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"Internal function used distantia() distantia_importance() generate data frame combinations time series function arguments.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"","code":"utils_tsl_pairs(tsl = NULL, args_list = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"tsl (required, list) Time series list. Default: NULL args_list (required, list) arguments combine pairs time series. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Cases in Zoo Time Series — zoo_aggregate","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"Aggregate Cases Zoo Time Series","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"","code":"zoo_aggregate(x = NULL, new_time = NULL, method = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"x (required, zoo object) Time series aggregate. Default: NULL new_time (optional, zoo object, keyword, time vector) New time aggregate x . available options : NULL: highest resolution keyword returned zoo_time(x)$keywords used generate new time vector aggregate x. zoo object: index given zoo object used template aggregate x. time vector: vector new times resample x . time x class \"numeric\", vector must numeric well. Otherwise, vectors classes \"Date\" \"POSIXct\" can used indistinctly. keyword: valid keyword returned zoo_time(x)$keywords, used generate time vector relevant units. numeric length 1: interpreted new time interval, highest resolution units returned zoo_time(x)$units. method (optional, quoted unquoted function name) Name standard custom function aggregate numeric vectors. Typical examples mean, max,min, median, quantile. Default: mean. ... (optional, additional arguments) additional arguments method.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"","code":"#full range of calendar dates x <- zoo_simulate(   rows = 1000,   time_range = c(     \"0000-01-01\",     as.character(Sys.Date())     ) )  #plot time series if(interactive()){   zoo_plot(x) }   #find valid aggregation keywords x_time <- zoo_time(x) x_time$keywords #> [[1]] #> [1] \"millennia\" \"centuries\" \"decades\"   \"years\"     \"quarters\"  #>   #mean value by millennia (extreme case!!!) x_millennia <- zoo_aggregate(   x = x,   new_time = \"millennia\",   method = mean )  if(interactive()){   zoo_plot(x_millennia) }  #max value by centuries x_centuries <- zoo_aggregate(   x = x,   new_time = \"centuries\",   method = max )  if(interactive()){   zoo_plot(x_centuries) }  #quantile 0.75 value by centuries x_centuries <- zoo_aggregate(   x = x,   new_time = \"centuries\",   method = stats::quantile,   probs = 0.75 #argument of stats::quantile() )  if(interactive()){   zoo_plot(x_centuries) }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"Fast permutation zoo time series null model testing using fast efficient C++ implementations different restricted free permutation methods. available  permutation methods : \"free\" (see permute_free_cpp()): Unrestricted independent re-shuffling individual cases across rows columns. Individual values relocated new row column within dimensions original matrix. \"free_by_row\" (see permute_free_by_row_cpp()): Unrestricted re-shuffling complete rows. individual row given new random row number, data  matrix re-ordered accordingly. \"restricted\" (see permute_restricted_cpp()): Data re-shuffling across rows columns restricted blocks contiguous rows. algorithm divides data matrix set blocks contiguous rows, individual cases assigned new row column within original block. \"restricted_by_row\" (see permute_restricted_by_row_cpp()): Re-shuffling complete rows restricted blocks contiguous rows. algorithm divides data matrix set blocks contiguous rows, individual row given new random row number within original block, block reordered accordingly generate permuted output.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"","code":"zoo_permute(   x = NULL,   repetitions = 1L,   permutation = \"restricted_by_row\",   block_size = NULL,   seed = 1L )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"x (required, zoo object) zoo time series. Default: NULL repetitions (optional, integer) number permutations compute. Large numbers may compromise R session. Default: 1 permutation (optional, character string) permutation method. Valid values listed higher lower induced randomness: \"free\": unrestricted re-shuffling individual cases across rows columns. Ignores block_size. \"free_by_row\": unrestricted re-shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling across rows columns within blocks rows. \"restricted_by_row\": restricted re-shuffling rows within blocks. block_size (optional, integer) Block size number rows restricted permutations. relevant permutation methods \"restricted\" \"restricted_by_row\". block size n indicates original data pre-divided blocks size, given row can permuted within original block. NULL, defaults rounded one tenth number rows x. Default: NULL. seed (optional, integer) initial random seed use permutations. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"Time Series List","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"","code":"#simulate zoo time series x <- zoo_simulate(cols = 2)  if(interactive()){   zoo_plot(x) }  #free x_free <- zoo_permute(   x = x,   permutation = \"free\",   repetitions = 2 ) #> Argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_free,     guide = FALSE     ) }  #free by row x_free_by_row <- zoo_permute(   x = x,   permutation = \"free_by_row\",   repetitions = 2 ) #> Argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_free_by_row,     guide = FALSE   ) }  #restricted x_restricted <- zoo_permute(   x = x,   permutation = \"restricted\",   repetitions = 2 ) #> Argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_restricted,     guide = FALSE   ) }  #restricted by row x_restricted_by_row <- zoo_permute(   x = x,   permutation = \"restricted_by_row\",   repetitions = 2 ) #> Argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_restricted_by_row,     guide = FALSE   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Zoo Time Series — zoo_plot","title":"Plot Zoo Time Series — zoo_plot","text":"Plot Zoo Time Series","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Zoo Time Series — zoo_plot","text":"","code":"zoo_plot(   x = NULL,   xlim = NULL,   ylim = NULL,   color = NULL,   width = 1,   title = NULL,   xlab = NULL,   ylab = NULL,   text_cex = 1,   guide = TRUE,   guide_cex = 0.8,   vertical = FALSE,   subpanel = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Zoo Time Series — zoo_plot","text":"x (required, zoo object) zoo time series. Default: NULL xlim (optional, numeric vector) Numeric vector limits x axis. Default: NULL ylim (optional, numeric vector) Numeric vector limits x axis. Default: NULL color (optional, character vector) vector colors distance cost matrix. NULL, uses appropriate palette generated grDevices::palette.colors(). Default: NULL width (optional, numeric vector) Width time series lines. Default: 1 title (optional, character string) Main title plot. NULL, set name time series. Default: NULL xlab (optional, character string) Title x axis. Disabled subpanel vertical TRUE. NULL, word \"Time\" used. Default: NULL ylab (optional, character string) Title x axis. Disabled subpanel vertical TRUE. NULL, left empty. Default: NULL text_cex (optional, numeric) Multiplicator text size. Default: 1 guide (optional, logical) TRUE, plots legend. Default: TRUE guide_cex (optional, numeric) Size guide's text separation guide's rows. Default: 0.7. vertical (optional, logical) internal use within package multipanel plots. Switches plot axes. Disabled subpanel = FALSE. Default: FALSE subpanel (optional, logical) internal use within package multipanel plots. Strips plot sub-panel. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Zoo Time Series — zoo_plot","text":"plot.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Zoo Time Series — zoo_plot","text":"","code":"#simulate zoo time series x <- zoo_simulate()  if(interactive()){    zoo_plot(     x = x,     xlab = \"Date\",     ylab = \"Value\",     title = \"My time series\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Zoo Objects to a New Time — zoo_resample","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"Objective Time series resampling involves interpolating new values time steps available original time series. operation useful : Transform irregular time series regular. Align time series different temporal resolutions. Increase (upsampling) decrease (downsampling) temporal resolution time series. hand, time series resampling used extrapolate new values outside original time range time series, increase resolution time series factor two . operations known produce non-sensical results. Methods function offers three methods time series interpolation: \"linear\" (default): interpolation via piecewise linear regression implemented zoo::na.approx(). \"spline\": cubic smoothing spline regression implemented stats::smooth.spline(). \"loess\": local polynomial regression fitting implemented stats::loess(). methods used fit models y ~ x y represents values univariate time series x represents numeric version time. functions utils_optimize_spline() utils_optimize_loess() used hood optimize complexity methods \"spline\" \"loess\" finding configuration minimizes root mean squared error (RMSE)  observed predicted y. However, argument max_complexity = TRUE, complexity optimization ignored, maximum complexity model used instead. New time argument new_time offers several alternatives help define new time resulting time series: NULL: target time series (x) resampled regular time within original time range number observations. zoo object: zoo object used template resampling. Useful objective equalizing frequency two separate zoo objects. time vector: time vector class compatible time x. keyword: character string defining resampling keyword, obtained via zoo_time(x, keywords = \"resample\")$keywords.. numeric: single number representing desired interval consecutive samples units x (relevant units can obtained via zoo_time(x)$units). Step Step steps resample time series list : time interpolation range taken index zoo object. step ensures extrapolation occurs resampling. new_time provided, values new_time outside minimum maximum interpolation times removed avoid extrapolation. new_time provided, regular time within interpolation time range zoo object generated. univariate time time series, model y ~ x, y time series x time coerced numeric fitted. max_complexity == FALSE method = \"spline\" method = \"loess\", model complexity minimizes root mean squared error observed predicted y returned. max_complexity == TRUE method = \"spline\" method = \"loess\", first valid model closest maximum complexity returned. fitted model predicted new_time generate resampled time series. Details Please use operation care, limits amount resampling can done without distorting data. safest option keep distance new time points within magnitude distance old time points.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"","code":"zoo_resample(   x = NULL,   new_time = NULL,   method = \"linear\",   max_complexity = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"x (required, zoo object) Time series resample. Default: NULL new_time (optional, zoo object, keyword, time vector) New time resample x . available options : NULL: regular version time x generated used resampling. zoo object: index given zoo object used template resample x. time vector: vector new times resample x . time x class \"numeric\", vector must numeric well. Otherwise, vectors classes \"Date\" \"POSIXct\" can used indistinctly. keyword: valid keyword returned zoo_time(x)$keywords, used generate time vector relevant units. numeric length 1: interpreted new time interval, highest resolution units returned zoo_time(x)$units. method (optional, character string) Name method resample time series. One \"linear\", \"spline\" \"loess\". Default: \"linear\". max_complexity (required, logical). relevant methods \"spline\" \"loess\". TRUE, model optimization ignored, model maximum complexity (overfitted model) used resampling. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"","code":"#simulate irregular time series x <- zoo_simulate(   cols = 2,   rows = 50,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   irregular = TRUE   )  #plot time series if(interactive()){   zoo_plot(x) }  #intervals between samples x_intervals <- diff(zoo::index(x)) x_intervals #> Time differences in days #>  [1]  36.88889  36.88889 110.66667  36.88889  36.88889  36.88889 110.66667 #>  [8]  36.88889 184.44444  73.77778 110.66667  36.88889  36.88889  73.77778 #> [15] 221.33333  36.88889  36.88889  36.88889  36.88889 110.66667 110.66667 #> [22]  36.88889 110.66667  73.77778 184.44444  36.88889  73.77778  73.77778 #> [29]  36.88889 147.55556 110.66667  36.88889  36.88889  36.88889  73.77778 #> [36]  36.88889  73.77778 110.66667  73.77778  73.77778  73.77778  73.77778 #> [43]  73.77778  73.77778  36.88889  36.88889  73.77778  36.88889  36.88889  #create regular time from the minimum of the observed intervals new_time <- seq.Date(   from = min(zoo::index(x)),   to = max(zoo::index(x)),   by = floor(min(x_intervals)) )  new_time #>  [1] \"2010-02-06\" \"2010-03-14\" \"2010-04-19\" \"2010-05-25\" \"2010-06-30\" #>  [6] \"2010-08-05\" \"2010-09-10\" \"2010-10-16\" \"2010-11-21\" \"2010-12-27\" #> [11] \"2011-02-01\" \"2011-03-09\" \"2011-04-14\" \"2011-05-20\" \"2011-06-25\" #> [16] \"2011-07-31\" \"2011-09-05\" \"2011-10-11\" \"2011-11-16\" \"2011-12-22\" #> [21] \"2012-01-27\" \"2012-03-03\" \"2012-04-08\" \"2012-05-14\" \"2012-06-19\" #> [26] \"2012-07-25\" \"2012-08-30\" \"2012-10-05\" \"2012-11-10\" \"2012-12-16\" #> [31] \"2013-01-21\" \"2013-02-26\" \"2013-04-03\" \"2013-05-09\" \"2013-06-14\" #> [36] \"2013-07-20\" \"2013-08-25\" \"2013-09-30\" \"2013-11-05\" \"2013-12-11\" #> [41] \"2014-01-16\" \"2014-02-21\" \"2014-03-29\" \"2014-05-04\" \"2014-06-09\" #> [46] \"2014-07-15\" \"2014-08-20\" \"2014-09-25\" \"2014-10-31\" \"2014-12-06\" #> [51] \"2015-01-11\" \"2015-02-16\" \"2015-03-24\" \"2015-04-29\" \"2015-06-04\" #> [56] \"2015-07-10\" \"2015-08-15\" \"2015-09-20\" \"2015-10-26\" \"2015-12-01\" #> [61] \"2016-01-06\" \"2016-02-11\" \"2016-03-18\" \"2016-04-23\" \"2016-05-29\" #> [66] \"2016-07-04\" \"2016-08-09\" \"2016-09-14\" \"2016-10-20\" \"2016-11-25\" #> [71] \"2016-12-31\" \"2017-02-05\" \"2017-03-13\" \"2017-04-18\" \"2017-05-24\" #> [76] \"2017-06-29\" \"2017-08-04\" \"2017-09-09\" \"2017-10-15\" \"2017-11-20\" #> [81] \"2017-12-26\" \"2018-01-31\" \"2018-03-08\" \"2018-04-13\" \"2018-05-19\" #> [86] \"2018-06-24\" \"2018-07-30\" \"2018-09-04\" \"2018-10-10\" \"2018-11-15\" #> [91] \"2018-12-21\" \"2019-01-26\" \"2019-03-03\" \"2019-04-08\" \"2019-05-14\" #> [96] \"2019-06-19\" \"2019-07-25\" \"2019-08-30\" diff(new_time) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  #resample using piecewise linear regression x_linear <- zoo_resample(   x = x,   new_time = new_time,   method = \"linear\" )  #resample using max complexity splines x_spline <- zoo_resample(   x = x,   new_time = new_time,   method = \"spline\",   max_complexity = TRUE ) #> Warning: Class of argument 'x' must be one of 'POSIXct', 'Date', 'numeric', 'integer'.  #resample using max complexity loess x_loess <- zoo_resample(   x = x,   new_time = new_time,   method = \"loess\",   max_complexity = TRUE ) #> Warning: Class of argument 'x' must be one of 'POSIXct', 'Date', 'numeric', 'integer'.   #intervals between new samples diff(zoo::index(x_linear)) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 diff(zoo::index(x_spline)) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 diff(zoo::index(x_loess)) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  #plotting results if(interactive()){    par(mfrow = c(4, 1), mar = c(3,3,2,2))    zoo_plot(     x,     guide = FALSE,     title = \"Original\"     )    zoo_plot(     x_linear,     guide = FALSE,     title = \"Method: linear\"   )    zoo_plot(     x_spline,     guide = FALSE,     title = \"Method: spline\"     )    zoo_plot(     x_loess,     guide = FALSE,     title = \"Method: loess\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Zoo Time Series — zoo_simulate","title":"Simulate a Zoo Time Series — zoo_simulate","text":"Generates simulated zoo time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Zoo Time Series — zoo_simulate","text":"","code":"zoo_simulate(   cols = 5,   rows = 100,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   data_range = c(0, 1),   seasons = 0,   na_fraction = 0,   independent = FALSE,   irregular = TRUE,   seed = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Zoo Time Series — zoo_simulate","text":"cols (optional, integer) Number time series. Default: 5 rows (optional, integer) Length time series. Minimum 10, maximum limited. large numbers might crash R session. Default: 100 time_range (optional character numeric vector) Interval time series. Either character vector dates format YYYY-MM-DD numeric vector. mismatch time_range rows (example, number days time_range smaller rows), upper value time_range adapted rows. Default: c(\"2010-01-01\", \"2020-01-01\") data_range (optional, numeric vector length 2) Extremes simulated time series values. simulated time series independently adjusted random values within provided range. Default: c(0, 1) seasons (optional, integer) Number seasons resulting time series. maximum number seasons computed floor(rows/3). Default: 0 na_fraction (optional, numeric) Value 0 0.5 indicating approximate fraction NA data simulated time series. Default: 0. independent (optional, logical) TRUE, new column simulated time series averaged previous column. Irrelevant cols <= 2, hard perceive output seasons > 0. Default: FALSE irregular (optional, logical) TRUE, time series created 20 percent rows, random 20 percent rows removed random. Default: TRUE seed (optional, integer) Random seed used simulate zoo object. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Zoo Time Series — zoo_simulate","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Zoo Time Series — zoo_simulate","text":"","code":"#generates a different time series on each execution when 'seed = NULL' x <- zoo_simulate()  #returns a zoo object class(x) #> [1] \"zoo\"  #time series names are uppercase letters #this attribute is not defined in the zoo class and might be lost during data transformations attributes(x)$name #> [1] \"A\"  #column names are lowercase letters names(x) #> [1] \"a\" \"b\" \"c\" \"d\" \"e\"  #plotting methods if(interactive()){    #plot time series with default zoo method   plot(x)    #plot time series with distantia   distantia::zoo_plot(     x = x,     xlab = \"Date\",     ylab = \"Value\",     title = \"My time series\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Features from Zoo Objects — zoo_time","title":"Get Time Features from Zoo Objects — zoo_time","text":"function generates data frame summarizing time features (class, length, resolution, others) zoo time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Features from Zoo Objects — zoo_time","text":"","code":"zoo_time(x = NULL, keywords = c(\"resample\", \"aggregate\"))"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Features from Zoo Objects — zoo_time","text":"x (required, zoo object) Zoo time series analyze. Default: NULL. keywords (optional, character string vector) Defines keywords returned. \"aggregate\", returns valid keywords zoo_aggregate(). \"resample\", returns valid keywords zoo_resample(). , returns valid keywords. Default: c(\"aggregate\", \"resample\").","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Features from Zoo Objects — zoo_time","text":"Data frame following columns: name (string): time series name. rows (integer): number observations. class (string): time class, one \"Date\", \"POSIXct\", \"numeric.\" units (string): units time series. length (numeric): total length time series expressed units. resolution (numeric): average interval observations expressed units. begin (date numeric): begin time time series. end (date numeric): end time time series. keywords (character vector): valid keywords tsl_aggregate() tsl_resample(), depending value argument keywords.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Time Features from Zoo Objects — zoo_time","text":"","code":"#simulate a zoo time series x <- zoo_simulate(   rows = 150,   time_range = c(     Sys.Date() - 365,     Sys.Date()   ),   irregular = TRUE )  #time data frame zoo_time(   x = x ) #>   name rows class units   length resolution      begin        end     keywords #> 1    A  150  Date  days 362.5585   2.433279 2023-09-04 2024-08-31 quarters...."},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"Internal function wrap zoo object time series list.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"","code":"zoo_to_tsl(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"x (required, zoo object) Time series. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"time series list length one.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"","code":"#create zoo object x <- zoo_simulate() class(x) #> [1] \"zoo\"  #to time series list tsl <- zoo_to_tsl(   x = x )  class(tsl) #> [1] \"list\" class(tsl[[1]]) #> [1] \"zoo\" names(tsl) #> [1] \"\" attributes(tsl[[1]])$name #> [1] \"\""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-200","dir":"Changelog","previous_headings":"","what":"Version 2.0.0","title":"Version 2.0.0","text":"new version involves massive rewrite break previous code based package. install previous version (1.0.2): Version 2.0.0 complete package rewrite ground : core functions rewritten C++ increased speed memory efficiency, proper R wrappers functions provided. functions arguments follow modern naming conventions, simplified interfaces improve user experience. time series operations use zoo library underneath, ensuring data consistency, computational speed, memory efficiency. Lists zoo objects, named “time series lists” (“tsl” short) throughout package documentation, used organize time series data. complete toolset manage time series lists provided. functions belonging named using prefix tsl_...(). tools generate, aggregate, resample, transform, plot, map, analyze univariate multivariate regular irregular time series. functions taking time series lists inputs parallelized using future package, progress bars parallelized operations available well via progressr package. New example datasets different disciplines functions generate simulated time series shipped package improve learning experience.","code":"#install from CRAN archive remotes::install_version(   package = \"distantia\",    version = \"1.0.2\"   )  #install from archive branch in GitHub remotes::install_github(   repo = \"https://github.com/BlasBenito/distantia\",   ref = \"v1.0.2\"   )"},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-103","dir":"Changelog","previous_headings":"","what":"Version 1.0.3","title":"Version 1.0.3","text":"Fixed bug Hellinger distances reworked distance() function make slightly faster.","code":""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-102","dir":"Changelog","previous_headings":"","what":"Version 1.0.2","title":"Version 1.0.2","text":"CRAN release: 2019-10-28 Fixed issue parallelization tasks Windows platform. Now parallelized functions modify cluster settings depending user’s platform.","code":""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-101","dir":"Changelog","previous_headings":"","what":"Version 1.0.1","title":"Version 1.0.1","text":"CRAN release: 2019-08-06 Fixed bug function workflowImportance. argument ‘exclude.columns’ ignored. Fixed documentation functions workflowImportance workflowSlotting. outputs well documented. Fixed error workflowTransfer. Changed psi computed. ’s now respectful original formulation, handles similar sequences better. Fixed function workflowPsi add +1 least cost produced options paired.samples = TRUE diagonal = TRUE Added function workflowPsiHP, High Performance version workflowPsi. less options, much faster, much lower memory footprint.","code":""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-100-is-ready","dir":"Changelog","previous_headings":"","what":"Version 1.0.0 is ready!","title":"Version 1.0.0 is ready!","text":"CRAN release: 2019-07-04","code":""}]
