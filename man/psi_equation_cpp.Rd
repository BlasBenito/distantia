% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{psi_equation_cpp}
\alias{psi_equation_cpp}
\title{(C++) Equation of the Psi Dissimilarity Score}
\usage{
psi_equation_cpp(a, b, diagonal = TRUE)
}
\arguments{
\item{a}{(required, numeric) output of \code{\link[=cost_path_sum_cpp]{cost_path_sum_cpp()}} on a least cost path.}

\item{b}{(required, numeric) auto sum of both sequences,
result of \code{\link[=auto_sum_cpp]{auto_sum_cpp()}}.}

\item{diagonal}{(optional, logical). Must be TRUE when diagonals are used in
dynamic time warping and for lock-step distances. Default: FALSE.}
}
\value{
numeric
}
\description{
Equation to compute the \code{psi} dissimilarity score
(Birks and Gordon 1985). Psi is computed as \eqn{\psi = (2a / b) - 1},
where \eqn{a} is the sum of distances between the relevant samples of two
time series, and \eqn{b} is the cumulative sum of distances between
consecutive samples in the two time series.
If \code{a} is computed with dynamic time warping, and diagonals are used in the
computation of the least cost path, then one is added to the result of the equation above.
}
\seealso{
Other Rcpp: 
\code{\link{auto_distance_cpp}()},
\code{\link{auto_sum_cpp}()},
\code{\link{auto_sum_full_cpp}()},
\code{\link{auto_sum_path_cpp}()},
\code{\link{cost_matrix_diagonal_cpp}()},
\code{\link{cost_matrix_diagonal_weighted_cpp}()},
\code{\link{cost_matrix_orthogonal_cpp}()},
\code{\link{cost_path_cpp}()},
\code{\link{cost_path_diagonal_cpp}()},
\code{\link{cost_path_orthogonal_cpp}()},
\code{\link{cost_path_slotting_cpp}()},
\code{\link{cost_path_sum_cpp}()},
\code{\link{cost_path_trim_cpp}()},
\code{\link{distance_canberra_cpp}()},
\code{\link{distance_chebyshev_cpp}()},
\code{\link{distance_chi_cpp}()},
\code{\link{distance_cosine_cpp}()},
\code{\link{distance_euclidean_cpp}()},
\code{\link{distance_hamming_cpp}()},
\code{\link{distance_hellinger_cpp}()},
\code{\link{distance_jaccard_cpp}()},
\code{\link{distance_lock_step_cpp}()},
\code{\link{distance_manhattan_cpp}()},
\code{\link{distance_matrix_cpp}()},
\code{\link{distance_russelrao_cpp}()},
\code{\link{importance_dynamic_time_warping_legacy_cpp}()},
\code{\link{importance_dynamic_time_warping_robust_cpp}()},
\code{\link{importance_lock_step_cpp}()},
\code{\link{null_psi_dynamic_time_warping_cpp}()},
\code{\link{null_psi_lock_step_cpp}()},
\code{\link{permute_free_by_row_cpp}()},
\code{\link{permute_free_cpp}()},
\code{\link{permute_restricted_by_row_cpp}()},
\code{\link{permute_restricted_cpp}()},
\code{\link{psi_dynamic_time_warping_cpp}()},
\code{\link{psi_lock_step_cpp}()},
\code{\link{subset_matrix_by_rows_cpp}()}
}
\concept{Rcpp}
