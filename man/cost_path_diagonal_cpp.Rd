% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{cost_path_diagonal_cpp}
\alias{cost_path_diagonal_cpp}
\title{(C++) Least Cost Path Considering Diagonals}
\usage{
cost_path_diagonal_cpp(dist_matrix, cost_matrix)
}
\arguments{
\item{dist_matrix}{(required, numeric matrix). Distance matrix between two
time series.}

\item{cost_matrix}{(required, numeric matrix). Cost matrix generated from
\code{dist_matrix}.}
}
\value{
data frame
}
\description{
Computes the least cost matrix from a distance matrix.
Considers diagonals during computation of least-costs. In case of ties,
diagonals are favored.
}
\examples{
#simulate two time series
x <- zoo_simulate(seed = 1)
y <- zoo_simulate(seed = 2)

#distance matrix
dist_matrix <- distance_matrix_cpp(
  x = x,
  y = y,
  distance = "euclidean"
)

#least cost matrix
cost_matrix <- cost_matrix_cpp(
  dist_matrix = dist_matrix
)

#least cost path
cost_path <- cost_path_diagonal_cpp(
  dist_matrix = dist_matrix,
  cost_matrix = cost_matrix
)

cost_path
}
\seealso{
Other Rcpp: 
\code{\link{auto_distance_cpp}()},
\code{\link{auto_sum_full_cpp}()},
\code{\link{auto_sum_path_cpp}()},
\code{\link{cost_matrix_cpp}()},
\code{\link{cost_matrix_diag_cpp}()},
\code{\link{cost_matrix_weighted_diag_cpp}()},
\code{\link{cost_path_orthogonal_cpp}()},
\code{\link{cost_path_sum_cpp}()},
\code{\link{cost_path_trim_cpp}()},
\code{\link{distance_canberra_cpp}()},
\code{\link{distance_chebyshev_cpp}()},
\code{\link{distance_chi_cpp}()},
\code{\link{distance_cosine_cpp}()},
\code{\link{distance_euclidean_cpp}()},
\code{\link{distance_hamming_cpp}()},
\code{\link{distance_hellinger_cpp}()},
\code{\link{distance_jaccard_cpp}()},
\code{\link{distance_lock_step_cpp}()},
\code{\link{distance_manhattan_cpp}()},
\code{\link{distance_matrix_cpp}()},
\code{\link{distance_russelrao_cpp}()},
\code{\link{importance_legacy_cpp}()},
\code{\link{importance_lock_step_cpp}()},
\code{\link{importance_robust_cpp}()},
\code{\link{null_psi_cpp}()},
\code{\link{null_psi_lock_step_cpp}()},
\code{\link{permute_free_by_row_cpp}()},
\code{\link{permute_free_cpp}()},
\code{\link{permute_restricted_by_row_cpp}()},
\code{\link{permute_restricted_cpp}()},
\code{\link{psi_cpp}()},
\code{\link{psi_formula_cpp}()},
\code{\link{psi_lock_step_cpp}()},
\code{\link{subset_matrix_by_rows_cpp}()}
}
\concept{Rcpp}
