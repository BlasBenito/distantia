% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zoo_resample.R
\name{zoo_resample}
\alias{zoo_resample}
\title{Resamples Zoo Time Series to a New Time}
\usage{
zoo_resample(x = NULL, new_time = NULL)
}
\arguments{
\item{x}{(required, zoo object) Time series to resample Default: NULL}

\item{new_time}{(required, zoo object, or vector of the classes numeric, Date, or POSIXct) New time of the resampled zoo object. Must be of the same class of the time in `x`. If one of them is "numeric" and the other is not, an error is returned. If a zoo object is provided, its time is used as a template to resample `x`. If NULL, irregular time series are predicted into a regular version of their own time, and regular time series are returned as is. Default: NULL}
}
\value{
zoo object
}
\description{
Given a zoo object and a time vector, this function uses Generalized Additive Models (GAM) to resample a zoo object to a new time. This operation is useful to align time series with different frequencies, or to transform irregular time series into regular.

The new time vector must be of the same class as the time of the zoo object (either  numeric, Date, or POSIXct). This new time vector can be either created from scratch, or can be extracted from another zoo object with [zoo::index()].

Each time series within the zoo object is modelled as a function of the original time of the zoo object with [mgcv::gam()], and then predicted to te new time.

Please use this operation with care, as there are limits to the amount of resampling that can be done without distorting the data. The safest option is to keep the distance between new time points within the same magnitude of the distance between the old time points.

This function supports progress bars generated by the `progressr` package. See examples.

This function also accepts a parallelization setup via [future::plan()], but it might only be worth it for very long time series.
}
\examples{

#simulate zoo object
x <- zoo_simulate(
  cols = 2,
  rows = 50
)

#plot zoo object
zoo_plot(x)

#check time
zoo::index(x)

#new time to first day of each month
new_time <- seq.Date(
  from = as.Date("2010-01-01"),
  to = as.Date("2019-09-01"),
  by = "1 month"
)

#RESAMPLING

#parallelization setup (not needed for small data)
future::plan(multisession, workers = 3)

#progress bar (not really needed for small data)
progressr::handlers(global = TRUE)

#resampling
x_new <- zoo_resample(
  x = x,
  new_time = new_time
)

#plot resampled zoo object
zoo_plot(x_new)

#new time is set to the first day of each month
zoo::index(x_new)
}
