% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zoo_resample.R
\name{zoo_resample}
\alias{zoo_resample}
\title{Resamples Zoo Time Series to a New Time}
\usage{
zoo_resample(x = NULL, time = NULL, method = "spline", max_complexity = FALSE)
}
\arguments{
\item{x}{(required, zoo object) Time series to resample. Default: NULL}

\item{time}{(required, zoo object, or vector of the classes numeric, Date, or POSIXct) New time of the resampled zoo object. Must be of the same class of the time in \code{x}. If one of them is "numeric" and the other is not, an error is returned. If a zoo object is provided, its time is used as a template to resample \code{x}. If NULL, irregular time series are predicted into a regular version of their own time, and regular time series are returned as is. Default: NULL}

\item{method}{(optional, string) Name of the method to resample the time series. One of "spline" (see \code{\link[=utils_optimize_spline]{utils_optimize_spline()}}), "gam" (see \code{\link[=utils_optimize_gam]{utils_optimize_gam()}})  or "loess" (see \code{\link[=utils_optimize_loess]{utils_optimize_loess()}}). Default: "spline".}

\item{max_complexity}{(required, logical). If TRUE, RMSE optimization is ignored, and the result of a model of maximum complexity is returned. Default: FALSE}
}
\value{
zoo object
}
\description{
Given a zoo object and a time vector, this function uses Generalized Additive Models (GAM) to resample a zoo object to a new time. This operation is useful to align time series with different frequencies, or to transform irregular time series into regular.

The new time vector must be of the same class as the time of the zoo object (either  numeric, Date, or POSIXct). This new time vector can be either created from scratch, or can be extracted from another zoo object with \code{\link[zoo:index]{zoo::index()}}.

Each time series within the zoo object is modelled as a function of the original time with \code{\link[mgcv:gam]{mgcv::gam()}}, and then predicted to the new time.

Please use this operation with care, as there are limits to the amount of resampling that can be done without distorting the data. The safest option is to keep the distance between new time points within the same order of magnitude of the distance between the old time points.
}
\examples{
#simulate irregular time series
x <- zoo_simulate(
  cols = 2,
  rows = 100,
  time_range = c("2010-01-01", "2020-01-01"),
  irregular = TRUE
  )

#plot time series
if(interactive()){
  zoo_plot(x)
}

#intervals between samples
diff(zoo::index(x))

#create regular time for resampling
regular_time <- seq.Date(
  from = as.Date("2010-01-01"),
  to = as.Date("2020-01-01"),
  by = "1 month"
)

#resample to regular time
x_resampled <- zoo_resample(
  x = x,
  time = regular_time
)

#notice the loss of detail in the resampled data
if(interactive()){
  zoo_plot(x_resampled)
}

#intervals between new samples
diff(zoo::index(x_resampled))
}
