% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{importance_legacy_cpp}
\alias{importance_legacy_cpp}
\title{(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version)}
\usage{
importance_legacy_cpp(
  y,
  x,
  distance = "euclidean",
  diagonal = FALSE,
  weighted = TRUE,
  ignore_blocks = FALSE
)
}
\arguments{
\item{y}{(required, numeric matrix) multivariate time series
with the same number of columns as 'x'.}

\item{x}{(required, numeric matrix) multivariate time series.}

\item{distance}{(optional, character string) distance name from the "names"
column of the dataset \code{distances} (see \code{distances$name}). Default: "euclidean".}

\item{diagonal}{(optional, logical). If TRUE, diagonals are included in the
computation of the cost matrix. Default: FALSE.}

\item{weighted}{(optional, logical). If TRUE, diagonal is set to TRUE, and
diagonal cost is weighted by a factor of 1.414214. Default: FALSE.}

\item{ignore_blocks}{(optional, logical). If TRUE, blocks of consecutive path
coordinates are trimmed to avoid inflating the psi distance. Default: FALSE.}
}
\value{
data frame
}
\description{
Computes the contribution of individual variables to the
similarity/dissimilarity between two irregular multivariate time series.
In opposition to the robust version, least-cost paths for each combination
of variables are computed independently, which makes the results of individual
variables harder to compare. This function should only be used when the objective is
replicating importance scores generated with previous versions of the package \code{distantia}.
This function generates a data frame with the following columns:
\itemize{
\item variable: name of the individual variable for which the importance
is being commputed, from the column names of the arguments \code{x} and \code{y}.
\item psi: global dissimilarity score \code{psi} of the two time series.
\item psi_only_with: dissimilarity between \code{x} and \code{y} computed from the given variable alone.
\item psi_without: dissimilarity between \code{x} and \code{y} computed from all other variables.
\item psi_difference: difference between \code{psi_only_with} and \code{psi_without}.
\item importance: contribution of the variable to the similarity/dissimilarity
between \code{x} and \code{y}, computed as \code{((psi_all - psi_without) * 100) / psi_all}.
Positive scores represent contribution to dissimilarity,
while negative scores represent contribution to similarity.
}
}
\examples{
#simulate two regular time series
x <- zoo_simulate(
  seed = 1,
  rows = 100
  )

y <- zoo_simulate(
  seed = 2,
  rows = 150
  )

#different number of rows
#this is not a requirement though!
nrow(x) == nrow(y)

#compute importance
df <- importance_legacy_cpp(
  x = x,
  y = y,
  distance = "euclidean"
)

df
}
\seealso{
Other Rcpp: 
\code{\link{auto_distance_cpp}()},
\code{\link{auto_sum_cpp}()},
\code{\link{auto_sum_full_cpp}()},
\code{\link{auto_sum_path_cpp}()},
\code{\link{cost_matrix_cpp}()},
\code{\link{cost_matrix_diag_cpp}()},
\code{\link{cost_matrix_weighted_diag_cpp}()},
\code{\link{cost_path_cpp}()},
\code{\link{cost_path_diagonal_cpp}()},
\code{\link{cost_path_orthogonal_cpp}()},
\code{\link{cost_path_slotting_cpp}()},
\code{\link{cost_path_sum_cpp}()},
\code{\link{cost_path_trim_cpp}()},
\code{\link{distance_canberra_cpp}()},
\code{\link{distance_chebyshev_cpp}()},
\code{\link{distance_chi_cpp}()},
\code{\link{distance_cosine_cpp}()},
\code{\link{distance_euclidean_cpp}()},
\code{\link{distance_hamming_cpp}()},
\code{\link{distance_hellinger_cpp}()},
\code{\link{distance_jaccard_cpp}()},
\code{\link{distance_lock_step_cpp}()},
\code{\link{distance_manhattan_cpp}()},
\code{\link{distance_matrix_cpp}()},
\code{\link{distance_russelrao_cpp}()},
\code{\link{importance_lock_step_cpp}()},
\code{\link{importance_robust_cpp}()},
\code{\link{null_psi_cpp}()},
\code{\link{null_psi_lock_step_cpp}()},
\code{\link{permute_free_by_row_cpp}()},
\code{\link{permute_free_cpp}()},
\code{\link{permute_restricted_by_row_cpp}()},
\code{\link{permute_restricted_cpp}()},
\code{\link{psi_cpp}()},
\code{\link{psi_formula_cpp}()},
\code{\link{psi_lock_step_cpp}()},
\code{\link{subset_matrix_by_rows_cpp}()}
}
\concept{Rcpp}
