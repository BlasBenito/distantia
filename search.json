[{"path":"https://blasbenito.github.io/distantia/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Blas M. Benito Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Dynamic Time Warping vs Lock-Step","text":"R package distantia provides tools comparing time series two distinct methods: dynamic time warping (DTW) lock-step (LS). approaches cater different analysis needs: DTW handling temporal shifts LS preserving temporal alignment. article explores conceptual foundations methods, implementation distantia, showcases practical use code examples.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Dynamic Time Warping vs Lock-Step","text":"packages required run code article distantia dtw. latter dependency distantia, help put context key details DTW works.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Dynamic Time Warping vs Lock-Step","text":"cities_temperature dataset contains monthly temperature records 20 cities. code transforms Time Series List (TSL) selects subset three cities temperature time series 2000 2005.  transformed TSL contains two synchronous time series Northern Hemisphere similar temperature ranges (London Paris) one Southern Hemisphere (Kinshasa) higher average shifted temporal pattern. facilitate comparison DTW LS, code applies functions tsl_transform() f_detrend_linear remove long-term trends data, f_scale scale center time series separately.","code":"tsl_raw <- distantia::tsl_initialize(   x = cities_temperature,   name_column = \"name\",   time_column = \"time\" ) |>    distantia::tsl_subset(     names = c(\"London\", \"Paris\", \"Kinshasa\"),     time = c(\"2000-01-01\", \"2005-01-01\")   )  distantia::tsl_plot(   tsl = tsl_raw,   ylim = \"relative\",   guide = FALSE ) tsl_scaled <- tsl_raw |>    distantia::tsl_transform(     f = distantia::f_detrend_linear   ) |>    distantia::tsl_transform(     f = distantia::f_scale_local   )    distantia::tsl_plot(   tsl = tsl_scaled,   ylim = \"relative\",   guide = FALSE )"},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"lock-step-ls","dir":"Articles","previous_headings":"","what":"Lock-Step (LS)","title":"Dynamic Time Warping vs Lock-Step","text":"Lock-step methods compare values corresponding time points, requiring time series length sampled identical times. approach well-suited cases maintaining temporal alignment compared time series crucial. method straightforward computationally efficient. distantia, lock-step comparisons carried three steps: 1.- Sum distances pairs samples observed times. 2.- Sum distances consecutive samples within time series. 3.- Compute normalized dissimilarity score psi. Let’s look first native R implementation idea using euclidean distances keep simple. function distantia() performs task lock_step = TRUE (default FALSE). can done function distantia_ls(), simplified version distantia() lock-step analysis. functions can compute lock-step dissimilarity scores time series argument tsl . expected, London Paris show similar temperature time series, London Kinshasa different ones.","code":"#extracting the data to shorten variable names x <- tsl_scaled$London y <- tsl_scaled$Kinshasa  #1.- sum of distances between pairs of samples step_1 <- sum(sqrt((x - y)^2))  #2.- sum of distances between consecutive samples step_2 <- sum(   sqrt(diff(x)^2) + sqrt(diff(y)^2)   )  #3.- compute normalized dissimilarity score ((2 * step_1) / step_2) #> [1] 2.791279 df <- distantia::distantia(   tsl = tsl_scaled[c(\"London\", \"Kinshasa\")],   lock_step = TRUE,   distance = \"euclidean\" )  df$psi #> [1] 2.791279 df <- distantia::distantia_ls(   tsl = tsl_scaled[c(\"London\", \"Kinshasa\")] )  df$psi #> [1] 2.791279 df <- distantia::distantia_ls(   tsl = tsl_scaled )  df[, c(\"x\", \"y\", \"psi\")] #>        x        y       psi #> 1 London    Paris 0.2298458 #> 3  Paris Kinshasa 2.7046009 #> 2 London Kinshasa 2.7912785"},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"dynamic-time-warping","dir":"Articles","previous_headings":"","what":"Dynamic Time Warping","title":"Dynamic Time Warping vs Lock-Step","text":"Dynamic Time Warping (DTW) warps time axes two time series maximize pattern similarity, even temporal shifts present. makes DTW ideal comparing time series similar shapes misaligned time points. However, computationally intensive less efficient lock-step method, particularly large datasets. DTW involves three conceptual steps, similar lock-step method, additional complexity first step: 1.- Sum distances pairs samples. 1a Compute distance matrix pairs samples. 1b Build least-cost matrix. 1c Find least-cost path. 1d Sum distances along least-cost path. 2.- Sum distances consecutive samples within time series. 3.- Calculate normalized dissimilarity score psi (slightly different formula!). Now, let’s dive code. objective step 1 computing sum distances pairs samples matched together time warping algorithm. Step 1a computes distance matrix pairs samples timme series. Notice functions demonstrate computation normalized dissimilarity score psi follow naming convention psi...().  Step 1b involves transforming distance matrix cost matrix. transformation requires dynamic algorithm new cell adds distance distance accumulated preceding neighbor. two implementations method distantia: orthogonal : distance cost computed x y axis, ignoring diagonals. orthogonal diagonal: distance cost also computed diagonals, weighted factor 1.414214. options wrapped function psi_cost_matrix(), default, like distantia() uses weighted diagonals.  step 1c, distance cost matrices used find least-cost path. Notice cost path data frame ordered bottom top. columns “x” “y” represent sample indices time series London Kinshasa. figure shows least cost path top cost matrix.  step 1d finalizes DTW logic adding distances pair samples connected least-cost path. step just sum(m.cost.path$dist), implemented psi_cost_path_sum(), also checks least cost data frame correct. Step 2 returns distances consecutive samples within time series, computed psi_auto_sum(). Finally, step 3 computes normalized dissimilarity score. individual steps can performed function distantia() setting argument lock_step FALSE, function distantia_dtw(). , functions can compute dynamic time warping dissimilarity time series argument tsl . function distantia_dtw_plot() offers good graphical representation warping result decomposes computation psi dissimilarity score.","code":"m.dist <- distantia::psi_distance_matrix(   x = x,   y = y,   distance = \"euclidean\" )  distantia::utils_matrix_plot(   m = m.dist,   diagonal_width = 0   ) m.cost <- distantia::psi_cost_matrix(   dist_matrix = m.dist,   diagonal = TRUE #default )  distantia::utils_matrix_plot(   m = m.cost,   diagonal_width = 0   ) m.cost.path <- distantia::psi_cost_path(   dist_matrix = m.dist,   cost_matrix = m.cost,   diagonal = TRUE #default )  tail(m.cost.path) #>    x y       dist     cost #> 71 6 3 0.09082845 5.397220 #> 72 5 2 0.19227643 4.524156 #> 73 4 1 0.71503492 4.178789 #> 74 3 1 0.88127572 3.463754 #> 75 2 1 1.14678108 2.582479 #> 76 1 1 1.43569743 1.435697 distantia::utils_matrix_plot(   m = m.cost,   path = m.cost.path ) step_1 <- distantia::psi_cost_path_sum(   path = m.cost.path )  step_1 #> [1] 41.48562 step_2 <- distantia::psi_auto_sum(   x = x,   y = y,   distance = \"euclidean\" )  step_2 distantia::psi_equation(   a = step_1,   b = step_2,   diagonal = TRUE ) df <- distantia::distantia(   tsl = tsl_scaled[c(\"London\", \"Kinshasa\")],   lock_step = FALSE,   distance = \"euclidean\" )  df[, c(\"x\", \"y\", \"psi\")] #>        x        y      psi #> 1 London Kinshasa 1.206093 df <- distantia::distantia_dtw(   tsl = tsl_scaled[c(\"London\", \"Kinshasa\")] )  df[, c(\"x\", \"y\", \"psi\")] #>        x        y      psi #> 1 London Kinshasa 1.206093 df <- distantia::distantia_dtw(   tsl = tsl_scaled )  df[, c(\"x\", \"y\", \"psi\")] #>        x        y       psi #> 1 London    Paris 0.2298458 #> 2 London Kinshasa 1.2060927 #> 3  Paris Kinshasa 1.2384104 distantia_dtw_plot(   tsl = tsl_scaled[c(\"London\", \"Kinshasa\")] )"},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"pitfalls","dir":"Articles","previous_headings":"Dynamic Time Warping","what":"Pitfalls","title":"Dynamic Time Warping vs Lock-Step","text":"DTW ideal method compare time series temporal shifts, applicable regular irregular time series different numbers samples. However, DTW highly sensitive differences data magnitudes. result, data properly scaled may distort warping, leading . plot represents DTW alignment London Kinshasa raw temperature data. shows DTW gets stuck two local optima, one y axis (long horizontal line) minimum temperature Kinshasa (winter 2001), another x axis (long vertical line) maximum temperature London (summer 2003). also shows distinctively large dissimilarity score.  long horizontal vertical lines shown provide immediate diagnostic issue. particular issue DTW algorithm implemented distantia, general behavior time warping methods. code shows similar analysis performed R package dtw. default implementation ignores diagonals building cost matrix.  “twoway” plot provided dtw shows alingment line bar, sample matches represented dotted lines, two vertical lines highlighting local optima  two strategies can combined control issue: data scaling, constrained DTW.","code":"distantia_dtw_plot(   tsl = tsl_raw[c(\"London\", \"Kinshasa\")] ) xy_dtw <- dtw::dtw(   x = tsl_raw$London$temperature,   y = tsl_raw$Kinshasa$temperature,   keep = TRUE   )  plot(xy_dtw, type = \"threeway\") plot(xy_dtw, type = \"twoway\") abline(v=0.13, col=\"red3\", lwd = 2) abline(v=0.70, col=\"black\", lwd = 2)"},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"constrained-dtw","dir":"Articles","previous_headings":"","what":"Constrained DTW","title":"Dynamic Time Warping vs Lock-Step","text":"function distantia() implements Itakura parallelograms restrict flexibility warping path via bandwidth argument. argument represents fraction space sides least cost matrix diagonal allowed warping. plots show effect decreasing bandwidth area covered Itakura parallelograms (shown white dashed lines) restricts spread alignment London Kinshasa raw temperature values.     Itakura parallelograms fix bad alignments (’s data scaling ), can help diagnose , given tolerance level. code runs distantia() raw temperature data two bandwidths: 1 unrestricted dynamic time warping, 0.25 reference level. Now, can compute psi differences across bandwidths pair time series pairs time series psi_diff higher zero show warping paths go beyond 0.25 bandwidth.","code":"distantia_dtw_plot(   tsl = tsl_raw[c(\"London\", \"Kinshasa\")],   bandwidth = 0.2 ) distantia_dtw_plot(   tsl = tsl_raw[c(\"London\", \"Kinshasa\")],   bandwidth = 0.1 ) distantia_dtw_plot(   tsl = tsl_raw[c(\"London\", \"Kinshasa\")],   bandwidth = 0.05 ) distantia_dtw_plot(   tsl = tsl_raw[c(\"London\", \"Kinshasa\")],   bandwidth = 0.025 ) df <- distantia(   tsl = tsl_raw,   bandwidth = c(1, 0.25) )  df[, c(\"x\", \"y\", \"psi\", \"bandwidth\")] #>        x        y        psi bandwidth #> 1 London    Paris  0.4422241      1.00 #> 4 London    Paris  0.4422241      0.25 #> 3  Paris Kinshasa  7.2974857      1.00 #> 6  Paris Kinshasa  7.6164475      0.25 #> 5 London Kinshasa 10.2968144      0.25 #> 2 London Kinshasa 10.7168885      1.00 df |>    dplyr::group_by(     x, y   ) |>    dplyr::summarise(     psi_diff = diff(psi)   ) #> `summarise()` has grouped output by 'x'. You can override using the `.groups` #> argument. #> # A tibble: 3 × 3 #> # Groups:   x [2] #>   x      y        psi_diff #>   <chr>  <chr>       <dbl> #> 1 London Kinshasa    0.420 #> 2 London Paris       0     #> 3 Paris  Kinshasa    0.319"},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"comparing-dtw-and-ls","dir":"Articles","previous_headings":"","what":"Comparing DTW and LS","title":"Dynamic Time Warping vs Lock-Step","text":"Dynamic Time Warping (DTW) Lock-Step (LS) methods differ scope application. DTW ideal comparing data may shifted time due positional differences, phenological time series observed across different hemispheres elevations. also facilitates comparison time series varying lengths, observation periods, sampling resolutions. versatility makes DTW general-purpose tool time series analysis. contrast, LS designed synchronized time series , minimum, must length. scope narrower, LS intuitive accurate DTW comparing time series without time shifts, measures raw differences directly. essence, DTW, ability adjust time axis, answers question, similar can two time series ?, LS addresses question, “different two time series?” code computes dissimilarity score temperatures Paris, London, Kinshasa using DTW LS compares data frame. London Paris, DTW LS show similar values, time series similar DTW much else adjust even . hand, DTW shows much lower values LS Kinshasa comes play, compensates seasonal shifts time series. sense, LS provides accurate image raw differences time series. clear advantage, LS require data normalization univariate time series, therefore can provide dissimilarity score units variable hand. Comparing dissimilarity scores mean temperatures three cities can give sense approximate LS scores expect.","code":"df_dtw <- distantia(   tsl = tsl_scaled )  df_ls <- distantia(   tsl = tsl_scaled,   lock_step = TRUE )  data.frame(   x = df_dtw$x,   y = df_dtw$y,   psi_dtw = round(df_dtw$psi, 3),   psi_ls = round(df_ls$psi, 3) ) #>        x        y psi_dtw psi_ls #> 1 London    Paris   0.230  0.230 #> 2 London Kinshasa   1.206  2.705 #> 3  Paris Kinshasa   1.238  2.791 df_ls <- distantia(   tsl = tsl_raw,   lock_step = TRUE )  df_ls[, c(\"x\", \"y\", \"psi\")] #>        x        y       psi #> 1 London    Paris 0.4879081 #> 3  Paris Kinshasa 7.5416106 #> 2 London Kinshasa 9.3361647 df_stats <- tsl_stats(   tsl = tsl_raw,   lags = 0 )  df_stats[, c(\"name\", \"mean\")] #>       name     mean #> 1   London 10.55682 #> 2    Paris 11.53803 #> 3 Kinshasa 24.48500"},{"path":"https://blasbenito.github.io/distantia/articles/dynamic_time_warping_and_lock_step.html","id":"closing-thoughts","dir":"Articles","previous_headings":"","what":"Closing Thoughts","title":"Dynamic Time Warping vs Lock-Step","text":"distantia package strikes balance flexibility simplicity, enabling nuanced exploration time series data. support dynamic time warping lock-step methods, provides users tools needed uncover insights respecting unique constraints data. Whether ’re working sequence alignment strict temporal comparisons, distantia designed adapt analytical needs. encourage give try see fits workflows.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Mapping Time Series Dissimilarity","text":"article focuses spatial representation dissimilarity scores. TODO","code":""},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Mapping Time Series Dissimilarity","text":"","code":"library(distantia, warn.conflicts = FALSE) library(dplyr, warn.conflicts = FALSE) library(mapview, warn.conflicts = FALSE)"},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"Mapping Time Series Dissimilarity","text":"examples illustrate map dissimilarity scores using datasets covid_prevalence covid_polygons included distantia. dataset comprises time series weekly Covid-19 prevalence several California counties. map displays polygons distantia::covid_counties using mapview().","code":"tsl <- distantia::tsl_initialize(   x = distantia::covid_prevalence,   name_column = \"name\",   time_column = \"time\" )  distantia::tsl_plot(   tsl = tsl[1:10],   columns = 2,   guide = FALSE ) mapview::mapview(   distantia::covid_counties,   label = \"name\" )"},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"dissimilarity-analysis","dir":"Articles","previous_headings":"","what":"Dissimilarity Analysis","title":"Mapping Time Series Dissimilarity","text":"code section prepares several datasets use different mapping examples: df_psi: lock-step dissimilarity data frame psi scores p-values. df_stats: dissimilarity stats time series others. df_cluster: hierarchical clustering based dissimilarity scores df_psi. lock-step dissimilarity analysis shown includes p-values restricted permutation test. p-values useful criteria select relevant mapping features. code aggregates psi scores data frame df_psi summarize overall dissimilarity time series others. function distantia_cluster_hclust() runs hierarchical clustering using psi scores df_psi clustering criteria.","code":"#parallelization setup future::plan(   future::multisession,   workers = parallelly::availableCores() - 1   )  #lock-step dissimilarity analysis df_psi <- distantia::distantia(   tsl = tsl,   distance = \"euclidean\",   lock_step = TRUE,   repetitions = 1000,   permutation = \"restricted\",   block_size = 12 #weeks )  #disable parallelization future::plan(   future::sequential   )  #check resulting data frame df_psi |>    dplyr::select(x, y, psi, p_value) |>    dplyr::glimpse() #> Rows: 630 #> Columns: 4 #> $ x       <chr> \"Napa\", \"Alameda\", \"Alameda\", \"Sacramento\", \"San_Joaquin\", \"Sa… #> $ y       <chr> \"Solano\", \"San_Mateo\", \"Contra_Costa\", \"Sonoma\", \"Stanislaus\",… #> $ psi     <dbl> 0.8726115, 1.0656371, 1.1620553, 1.2578125, 1.2919255, 1.29793… #> $ p_value <dbl> 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,… df_stats <- distantia::distantia_stats(   df = df_psi )  df_stats |>    dplyr::select(     name, mean   ) |>    dplyr::glimpse() #> Rows: 36 #> Columns: 2 #> $ name <chr> \"Alameda\", \"Butte\", \"Contra_Costa\", \"El_Dorado\", \"Fresno\", \"Humbo… #> $ mean <dbl> 3.214531, 3.266749, 3.358524, 3.546757, 3.270684, 4.028824, 3.834… df_cluster <- distantia::distantia_cluster_hclust(   df = df_psi )$df  df_cluster |>    dplyr::select(name, cluster) |>   dplyr::glimpse() #> Rows: 36 #> Columns: 2 #> $ name    <chr> \"Napa\", \"Alameda\", \"Sacramento\", \"San_Joaquin\", \"Santa_Clara\",… #> $ cluster <dbl> 1, 2, 2, 1, 3, 2, 2, 3, 2, 1, 1, 1, 2, 1, 2, 4, 2, 1, 1, 1, 2,…"},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"network-map","dir":"Articles","previous_headings":"","what":"Network Map","title":"Mapping Time Series Dissimilarity","text":"function distantia_spatial() transforms result distantia() sf data frame edges connecting time series coordinates polygons. result can interpreted dissimilarity network. resulting sf data frame field edge name, columns x y names connected time series, psi scores p-values dissimilarity data frame, geometry column type LINESTRING defining network edges, length edges. sf data frame can mapped right away, case many pairs counties achieve meaningful map. Focusing particular aspects data hand may help untangle mess. example, code subsets edges connecting San Francisco similar counties terms Covid19 prevalence. function distantia_spatial() also one--many mode designed help map dissimilarity one time series others. option create edges, instead uses geometry introduced sf argument. sf data frame mapped follows: one site “x” column selected, result shows dissimilarity scores sites selected one.","code":"sf_network <- distantia::distantia_spatial(   df = df_psi,   sf = distantia::covid_counties |>      dplyr::select(       name, geometry     ),   network = TRUE )  dplyr::glimpse(sf_network) #> Rows: 630 #> Columns: 9 #> $ edge_name <chr> \"Napa - Solano\", \"Alameda - San_Mateo\", \"Alameda - Contra_Co… #> $ y         <chr> \"Solano\", \"San_Mateo\", \"Contra_Costa\", \"Sonoma\", \"Stanislaus… #> $ x         <chr> \"Napa\", \"Alameda\", \"Alameda\", \"Sacramento\", \"San_Joaquin\", \"… #> $ psi       <dbl> 0.8726115, 1.0656371, 1.1620553, 1.2578125, 1.2919255, 1.297… #> $ p_value   <dbl> 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.00… #> $ null_mean <dbl> 2.625197, 2.578533, 2.442545, 2.802703, 2.889379, 2.878997, … #> $ null_sd   <dbl> 0.2299226, 0.2870942, 0.2767464, 0.3073369, 0.2018697, 0.238… #> $ geometry  <LINESTRING [°]> LINESTRING (-122.3298 38.50..., LINESTRING (-121.… #> $ length    <dbl> 43101.68, 46400.19, 30278.10, 135022.90, 48050.18, 33550.83,… mapview::mapview(   sf_network,   layer.name = \"Psi\",   label = \"edge_name\",   zcol = \"psi\",   color = distantia::color_continuous() ) #select pairs of counties counties <- c(   \"Los_Angeles\",    \"San_Francisco\",    \"Fresno\",    \"San_Joaquin\",   \"Monterey\"   )  sf_network_subset <- sf_network[   which(     sf_network$x %in% counties &        sf_network$y %in% counties     ),    ]  #map country polygons and dissimilarity edges mapview::mapview(   covid_counties,   col.regions = NA,   alpha.regions = 0,   color = \"black\",   label = \"name\",   legend = FALSE,   map.type = \"OpenStreetMap\" ) +   mapview::mapview(     sf_network_subset,     layer.name = \"Psi\",     label = \"edge_name\",     zcol = \"psi\",     lwd = 5,     color = distantia::color_continuous(       rev = TRUE       )   ) sf_network <- distantia::distantia_spatial(   df = df_psi,   sf = distantia::covid_counties |>      dplyr::select(       name, geometry     ),   network = FALSE )  dplyr::glimpse(sf_network) #> Rows: 1,295 #> Columns: 7 #> $ x         <chr> \"Alameda\", \"Alameda\", \"Alameda\", \"Alameda\", \"Alameda\", \"Alam… #> $ y         <chr> \"Alameda\", \"Butte\", \"Contra_Costa\", \"El_Dorado\", \"Fresno\", \"… #> $ psi       <dbl> 0.000000, 2.962963, 1.162055, 2.483755, 3.456869, 3.960000, … #> $ p_value   <dbl> 0.000, 0.038, 0.001, 0.002, 0.334, 0.979, 0.208, 0.109, 0.98… #> $ null_mean <dbl> 0.000000, 3.253452, 2.442545, 3.050181, 3.565789, 3.638864, … #> $ null_sd   <dbl> 0.00000000, 0.16577079, 0.27674638, 0.20253761, 0.23818318, … #> $ geometry  <MULTIPOLYGON [°]> MULTIPOLYGON (((-121.9907 3..., MULTIPOLYGON ((… #subset one county sf_network_subset <- sf_network[   sf_network$x == \"San_Francisco\",    ]  #one-to-many visualization mapview::mapview(     sf_network_subset,     layer.name = \"Psi\",     label = \"y\",     zcol = \"psi\",     col.regions = distantia::color_continuous(       rev = TRUE       )   )"},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"dissimilarity-stats-map","dir":"Articles","previous_headings":"","what":"Dissimilarity Stats Map","title":"Mapping Time Series Dissimilarity","text":"Mapping dissimilarity stats time series may help identify places somewhat special show high dissimilarity others, places average distinctive features. Merging dissimilarity stats sf data frame containing county polygons generates spatial data required map. map uses warm colors highlight places high dissimilarity others, Humboldt county north west state.","code":"sf_stats <- merge(   x = distantia::covid_counties,   y = df_stats ) |>    dplyr::select(     mean,     name   ) mapview::mapview(   sf_stats,   layer.name = \"Psi mean\",   zcol = \"mean\",   label = \"name\",   col.regions = distantia::color_continuous(),   alpha.regions = 1 )"},{"path":"https://blasbenito.github.io/distantia/articles/mapping_dissimilarity.html","id":"clustering-map","dir":"Articles","previous_headings":"","what":"Clustering Map","title":"Mapping Time Series Dissimilarity","text":"section shows map similarity groups resulting distantia::distantia_cluster_hclust() distantia::distantia_cluster_kmeans(). first block code joins county polygons distantia::covid_polygons clustering data frame df_cluster. block also generates variable “alpha” column “silhouette_width”, represents strength membership assigned clustering group. second block generates map, using colors cluster membership, variable alpha code strenght membership. setup allows identifying groups similar counties highlighting counties somehow fully belong given group. case Butte, group 5, low silhouette score.","code":"#join county polygons with clustering groups sf_cluster <- distantia::covid_counties |>    dplyr::select(name, geometry) |>    dplyr::inner_join(     y = df_cluster,     by = \"name\"   ) |>    #remap silhouette score to transparency values   dplyr::mutate(     alpha = f_rescale_local(       x = silhouette_width,       new_min = 0.1       )   )  mapview::mapview(   sf_cluster,   layer.name = \"Group\",   zcol = \"cluster\",   label = \"name\",   col.regions = distantia::color_continuous(     n = max(sf_cluster$cluster)   ),   alpha.regions = sf_cluster$alpha )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Handling Time Series Lists","text":"R package distantia 2.0 introduces Time Series Lists obect organize time series dissimilarity analyses, provides complete toolset manage . article describes Time Series Lists detail, showcases common data handling procedures enabled new functions included package.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"introduction-to-time-series-lists","dir":"Articles","previous_headings":"","what":"Introduction to Time Series Lists","title":"Handling Time Series Lists","text":"new version distantia, groups time series organized named lists zoo objects. lists named Time Series Lists (TSL) within package, designed facilitate parallelization dissimilarity analyses. TSL class choice, idea keeping simple possible grant users autonomy create modify needed.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"zoo-time-series","dir":"Articles","previous_headings":"Introduction to Time Series Lists","what":"Zoo Time Series","title":"Handling Time Series Lists","text":"R package zoo provides S3 class name designed handle observations ordered index. supports various index classes, Date, POSIXct, even custom numeric character indices, handles regular irregular time series equally well. advantages using zoo objects include seamless intergration base R methods, built-tools alignment, merging, subsetting. Let’s take look little zoo object.  Zoo objects two main components, data matrix time series observations, index representing time sample order. data matrix extracted zoo::coredata(). core data zoo object can also vector time series univariate. However, frowned upon distantia, vectors always converted matrices. index zoo time series extracted zoo::index(). classes zoo indices explicitly supported distantia Date, POSIXct, numeric. function distantia::zoo_time() helps summarize time features zoo object, including time class. Additionally, distantia zoo objects expected attribute name. attribute, part zoo class, used facilitate plotting operations, managed internally tsl_...() functions. several functions distantia manage names zoo objects. package comes several functions manipulate zoo objects: zoo_name_set(), zoo_name_get() zoo_name_clean(): handle attribute “name”. zoo_time(): details zoo index. zoo_aggregate(): time aggregation zoo objects. zoo_resample(): interpolation extrapolation different time, irregular regular time. zoo_smooth(): rolling-window smoothing. zoo_permute(): restricted permutation. zoo_vector_to_matrix() zoo_to_tsl(): internal functions facilitate handling zoo objects within TSLs.","code":"library(distantia) #> Loading required package: doFuture #> Loading required package: foreach #> Loading required package: future  z <- distantia::zoo_simulate(   name = \"my_zoo\",   cols = 3,   rows = 10,   time_range = c(     \"2024-01-01\",      \"2024-12-31\"     ),   na_fraction = 0.1,   irregular = TRUE,   seed = 1 )  zoo_plot(x = z) zoo::coredata(z) #>                    a         b         c #> 2024-01-01 0.2766156        NA 0.4311940 #> 2024-01-20 0.2757911 0.2576964 0.5035254 #> 2024-02-08 0.6195721 0.6088013 0.7032048 #> 2024-02-27 0.7287392 0.7720906 0.8115532 #> 2024-04-25 0.6145089 0.6955610 0.6016670 #> 2024-07-11 0.4504343 0.3641707 0.2375049 #> 2024-08-18        NA        NA 0.2669233 #> 2024-09-06 0.3662741 0.3615319 0.2490074 #> 2024-11-03 0.3074425 0.3016022 0.4022756 #> 2024-12-11 0.3435016 0.1728781 0.3047951 #> attr(,\"name\") #> [1] \"my_zoo\" class(zoo::coredata(z)) #> [1] \"matrix\" \"array\" x <- zoo::zoo(x = runif(10)) is.vector(zoo::coredata(x)) #> [1] TRUE x <- distantia::zoo_vector_to_matrix(x = x) is.vector(zoo::coredata(x)) #> [1] FALSE is.matrix(zoo::coredata(x)) #> [1] TRUE zoo::index(z) #>  [1] \"2024-01-01\" \"2024-01-20\" \"2024-02-08\" \"2024-02-27\" \"2024-04-25\" #>  [6] \"2024-07-11\" \"2024-08-18\" \"2024-09-06\" \"2024-11-03\" \"2024-12-11\" class(zoo::index(z)) #> [1] \"Date\" distantia::zoo_time(x = z) #>     name rows class units   length resolution      begin        end #> 1 my_zoo   10  Date  days 345.7895   38.42105 2024-01-01 2024-12-11 #>       keywords #> 1 years, q.... attributes(z)$name #> [1] \"my_zoo\" #reset zoo name z <- distantia::zoo_name_set(   x = z,   name = \"My_Zoo\" )  #get zoo name distantia::zoo_name_get(x = z) #> [1] \"My_Zoo\"  #clean zoo name z <- distantia::zoo_name_clean(   x = z,   lowercase = TRUE )  distantia::zoo_name_get(x = z) #> [1] \"my_zoo\""},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"time-series-lists-tsl","dir":"Articles","previous_headings":"Introduction to Time Series Lists","what":"Time Series Lists (TSL)","title":"Handling Time Series Lists","text":"TSLs named lists zoo time series. example shows build TSL scratch zoo objects. common comfortable case, please, visit section Creating Time Series Lists find convert data easily TSL. TSLs ready dissimilarity analyses must follow several rules ensure dissimilarity analyses run without issues: elements list zoo objects must named. Time series names duplicated. coredata zoo objects must class matrix. NA, Inf, NaN zoo objects. zoo columns must named. zoo columns must numeric. zoo objects within TSL must share least one column name. index zoo objects must class. understand way many rules, functions tsl_diagnose() tsl_repair() help forget . applying tsl_diagnose() my_tsl can see several issues. , can either follow suggestions, apply tsl_repair() directly, done . function identifies issues raised tsl_diagnose() repairs possible. tsl_diagnose() run , stay silent everything ok. point, TSL ready go!","code":"#create simple tsl my_tsl <- list(   A = distantia::zoo_simulate(     cols = 4,     na_fraction = 0.2   ),   B = distantia::zoo_simulate() )  names(my_tsl) #> [1] \"A\" \"B\"  class(my_tsl) #> [1] \"list\"  #names of the zoo objects lapply(X = my_tsl, FUN = distantia::zoo_name_get) #> $A #> [1] \"A\" #>  #> $B #> [1] \"A\"  #class of the objects within the list lapply(X = my_tsl, FUN = class) #> $A #> [1] \"zoo\" #>  #> $B #> [1] \"zoo\" distantia::tsl_diagnose(tsl = my_tsl) #> distantia::tsl_diagnose(): issues in TSL structure: #> --------------------------------------------------- #>  #>   - list and time series names must match and be unique: reset names with distantia::tsl_names_set(). #>  #> distantia::tsl_diagnose(): issues in TSL values: #> -------------------------------------------------- #>  #>   - there are NA, Inf, -Inf, or NaN cases in the time series: interpolate or remove them with distantia::tsl_handle_NA(). my_tsl <- distantia::tsl_repair(tsl = my_tsl) #> distantia::tsl_repair(): repairs in TSL structure: #> -------------------------------------------------- #>  #>   - fixed naming issues. #>  #>   - removed exclusive columns not shared across time series. #>  #> distantia::tsl_repair(): repairs in TSL values: #> ------------------------------------------------- #>  #>   - interpolated NA cases in zoo objects with distantia::tsl_handle_NA(). distantia::tsl_diagnose(   tsl = my_tsl ) distantia::tsl_plot(   tsl = my_tsl,   guide = FALSE )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"creating-tsls","dir":"Articles","previous_headings":"","what":"Creating TSLs","title":"Handling Time Series Lists","text":"function tsl_initialize() (alias tsl_init()) designed help transform several data structures Time Series List.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"long-data-frame-to-tsl","dir":"Articles","previous_headings":"Creating TSLs","what":"Long Data Frame to TSL","title":"Handling Time Series Lists","text":"Long tidy data frames convenient structures store multivariate time series reasonable size. example, data frame fagus_dynamics shown column “name” identifying separate time series, column “time” observation dates, three numeric columns environmental observations. Transforming data frame TSL quite straightforward:  manipulated /analyzed, TSL can converted back data frame tsl_to_df().","code":"head(fagus_dynamics) #>    name       time    evi rainfall temperature #> 1 Spain 2001-01-01 0.1929    199.8         8.1 #> 5 Spain 2001-02-01 0.2423     50.6         7.8 #> 6 Spain 2001-03-01 0.2761    170.9        11.0 #> 7 Spain 2001-04-01 0.3961     62.7        10.4 #> 8 Spain 2001-05-01 0.4445     52.7        14.1 #> 9 Spain 2001-06-01 0.6434     23.1        17.6 tsl <- distantia::tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  #even shorter! tsl <- distantia::tsl_init(   x = fagus_dynamics,   name = \"name\",   time = \"time\" )  distantia::tsl_plot(   tsl  = tsl ) df <- distantia::tsl_to_df(tsl = tsl) head(df) #>      name       time    evi rainfall temperature #> 1 Germany 2001-01-01 0.3539     68.6         2.1 #> 2 Germany 2001-02-01 0.2940     56.6         3.8 #> 3 Germany 2001-03-01 0.3453    128.2         6.8 #> 4 Germany 2001-04-01 0.3924     82.5         8.2 #> 5 Germany 2001-05-01 0.6880     32.7        15.9 #> 6 Germany 2001-06-01 0.6837     70.8        16.0"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"wide-data-frame-to-tsl","dir":"Articles","previous_headings":"Creating TSLs","what":"Wide Data Frame to TSL","title":"Handling Time Series Lists","text":"wide data frame useful structure store univariate time series observed different places times. name_column provided, tsl_initialize() assumes column univariate time series.  case, column names univariate zoo objects “x”. name can reset needed tsl_colnames_set(). TSL can converted data frame, time result long data frame.","code":"head(evi_wide) #>         time evi_Spain evi_Germany evi_Sweden #> 1 2001-01-01    0.1929      0.3539     0.1827 #> 5 2001-02-01    0.2423      0.2940     0.1819 #> 6 2001-03-01    0.2761      0.3453     0.2155 #> 7 2001-04-01    0.3961      0.3924     0.2369 #> 8 2001-05-01    0.4445      0.6880     0.5192 #> 9 2001-06-01    0.6434      0.6837     0.5917 tsl <- distantia::tsl_initialize(   x = evi_wide,   time_column = \"time\"   )  tsl_plot(   tsl = tsl,   guide = FALSE ) distantia::tsl_colnames_get(tsl = tsl) #> $evi_Spain #> [1] \"x\" #>  #> $evi_Germany #> [1] \"x\" #>  #> $evi_Sweden #> [1] \"x\" tsl <- distantia::tsl_colnames_set(   tsl = tsl,   names = \"evi\" )  distantia::tsl_colnames_get(tsl = tsl) #> $evi_Spain #> [1] \"evi\" #>  #> $evi_Germany #> [1] \"evi\" #>  #> $evi_Sweden #> [1] \"evi\" df <- distantia::tsl_to_df(tsl = tsl) head(df) #>        name       time    evi #> 1 evi_Spain 2001-01-01 0.1929 #> 2 evi_Spain 2001-02-01 0.2423 #> 3 evi_Spain 2001-03-01 0.2761 #> 4 evi_Spain 2001-04-01 0.3961 #> 5 evi_Spain 2001-05-01 0.4445 #> 6 evi_Spain 2001-06-01 0.6434"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"vectors-and-matrices-to-tsl","dir":"Articles","previous_headings":"Creating TSLs","what":"Vectors and Matrices to TSL","title":"Handling Time Series Lists","text":"list numeric vectors can also converted TSL. case, zoo index sequence integers.  thing can done matrices well.","code":"tsl <- distantia::tsl_initialize(   x = list(     a = runif(10),     b = runif(10)   ) )  distantia::tsl_plot(   tsl = tsl,   guide = FALSE ) tsl <- distantia::tsl_initialize(   x = list(     a = matrix(data = runif(100), ncol = 2, nrow = 50),     b = matrix(data = runif(100), ncol = 2, nrow = 50)   ) )  distantia::tsl_plot(   tsl = tsl,   guide = FALSE )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"the-tsl-toolset","dir":"Articles","previous_headings":"","what":"The TSL Toolset","title":"Handling Time Series Lists","text":"functions distantia handle TSLs named pattern tsl_...(). functions designed explore better understand TSLs, others designed manipulate transform facilitate dissimilarity analyses. section offers complete overview functions applications.","code":""},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"parallelization-setup","dir":"Articles","previous_headings":"The TSL Toolset","what":"Parallelization Setup","title":"Handling Time Series Lists","text":"functions manage TSLs bunch lapply trench coat. use future.apply::future_lapply(), parallelized version lapply future.apply package, combine foreach::foreach() doFuture::%iterator% shameless parallelized loops. , support parallelization backend provided future package, shown . However, take mind parallelization worth large datasets. also support progress bars via progressr package. However, option, commented code , work Rmarkdown.","code":"library(future) library(parallelly)  future::plan(   future::multisession,   workers = parallelly::availableCores() - 1   ) #progress bar (does not work in Rmarkdown) #progressr::handlers(global = TRUE)"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"explore-tsls","dir":"Articles","previous_headings":"The TSL Toolset","what":"Explore TSLs","title":"Handling Time Series Lists","text":"section showcases tools available distantia better understand Time Series Lists. Logically, section starts distantia::tsl_simulate(), function nothing purpose.  simpler tools explore TSLs focused simpler things, like extracting TSL names dimensions. function tsl_time() summarizes time features time series TSL. function tsl_stats(), hand, computes stats time series variable summarize TSL values.","code":"tsl <- distantia::tsl_simulate(   n = 4,   cols = 5,   rows = 1000,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   data_range = c(0, 1),   seasons = 10,   na_fraction = 0.1,   irregular = TRUE )  tsl_plot(   tsl = tsl,   guide = FALSE   ) #time series names distantia::tsl_names_get(tsl = tsl) #>   A   B   C   D  #> \"A\" \"B\" \"C\" \"D\"  #column names distantia::tsl_colnames_get(tsl = tsl) #> $A #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $C #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $D #> [1] \"a\" \"b\" \"c\" \"d\" \"e\"  #number of columns distantia::tsl_ncol(tsl = tsl) #> $A #> [1] 5 #>  #> $B #> [1] 5 #>  #> $C #> [1] 5 #>  #> $D #> [1] 5  #number of rows distantia::tsl_nrow(tsl = tsl) #> $A #> [1] 895 #>  #> $B #> [1] 828 #>  #> $C #> [1] 948 #>  #> $D #> [1] 755 distantia::tsl_time(tsl = tsl) #>   name rows class units   length resolution      begin        end     keywords #> 1    A  895  Date  days 3624.449   4.054194 2010-01-15 2019-12-18 years, q.... #> 2    B  828  Date  days 3646.485   4.409293 2010-01-02 2019-12-27 decades,.... #> 3    C  948  Date  days 3638.513   3.842147 2010-01-05 2019-12-23 years, q.... #> 4    D  755  Date  days 3643.532   4.832271 2010-01-04 2019-12-27 years, q.... df_stats <- distantia::tsl_stats(   tsl = tsl,    lags = 1 #temporal autocorrelation lag   )  df_stats #>    name variable NA_count        min        q1    median        q3       max #> 1     A        a       95 0.09800680 0.2854132 0.3849914 0.5370719 0.7674207 #> 2     B        a       79 0.13872269 0.3007013 0.3942495 0.4940126 0.6487662 #> 3     C        a      109 0.27719376 0.4101711 0.4665759 0.5036950 0.6624000 #> 4     D        a       84 0.10229087 0.3040870 0.3835407 0.4393233 0.6986380 #> 5     A        b       92 0.18770587 0.4184237 0.5425625 0.7183262 0.9493957 #> 6     B        b       91 0.17210765 0.3897937 0.5482020 0.6652081 0.8337273 #> 7     C        b       82 0.18745969 0.4215132 0.5207325 0.5916581 0.8933747 #> 8     D        b       74 0.27306583 0.4311374 0.4926373 0.5442130 0.6738263 #> 9     A        c       86 0.27818993 0.3897210 0.5338184 0.6072574 0.6982036 #> 10    B        c       72 0.20903477 0.3370288 0.5106152 0.5814762 0.6790678 #> 11    C        c       84 0.24096347 0.3557717 0.5255553 0.6063718 0.7548251 #> 12    D        c       86 0.26436389 0.3780786 0.4232056 0.5317723 0.7708494 #> 13    A        d       74 0.09104849 0.2030033 0.3816940 0.5920768 0.8119424 #> 14    B        d       81 0.14081870 0.2190328 0.3864535 0.5775882 0.7702173 #> 15    C        d       93 0.14189279 0.3069329 0.3949073 0.4852792 0.6477854 #> 16    D        d       58 0.07457297 0.2129388 0.3626525 0.5392032 0.7086870 #> 17    A        e      100 0.09011920 0.4445964 0.5367143 0.6687842 0.8646269 #> 18    B        e       91 0.15213822 0.4179866 0.4870679 0.6072825 0.7692504 #> 19    C        e      106 0.20399463 0.3968680 0.4878493 0.5956665 0.7596875 #> 20    D        e       75 0.08108168 0.3135596 0.3926041 0.5660621 0.7388785 #>         mean         sd     range   iq_range     skewness   kurtosis  ac_lag_1 #> 1  0.4044377 0.15283312 0.6694139 0.25165869  0.135796703 -1.1614189 0.9923180 #> 2  0.3928407 0.12114009 0.5100435 0.19331131 -0.053857813 -1.1259414 0.9907480 #> 3  0.4597313 0.07042273 0.3852063 0.09352395  0.005461071 -0.4426902 0.9925611 #> 4  0.3795733 0.11119890 0.5963471 0.13523637  0.300669286  0.2207331 0.9857942 #> 5  0.5589036 0.18735525 0.7616898 0.29990253  0.009134059 -1.2069282 0.9956180 #> 6  0.5299596 0.16545720 0.6616196 0.27541447 -0.175211756 -1.2978824 0.9963093 #> 7  0.5136854 0.14010779 0.7059150 0.17014492  0.169843739 -0.5512491 0.9962088 #> 8  0.4833612 0.08858408 0.4007605 0.11307562 -0.404070295 -0.5451592 0.9947963 #> 9  0.5011489 0.11874399 0.4200137 0.21753637 -0.089411492 -1.6131048 0.9967500 #> 10 0.4623944 0.13293121 0.4700330 0.24444742 -0.216507414 -1.5854223 0.9975072 #> 11 0.4942972 0.13852011 0.5138616 0.25060008 -0.068798985 -1.4743774 0.9969533 #> 12 0.4593613 0.11521512 0.5064855 0.15369375  0.793200483 -0.3362831 0.9952735 #> 13 0.4019948 0.20923281 0.7208939 0.38907341  0.294977793 -1.4117867 0.9971173 #> 14 0.4008981 0.18935485 0.6293986 0.35855547  0.248743033 -1.5865958 0.9975460 #> 15 0.3961837 0.11144364 0.5058926 0.17834624  0.031279206 -0.9949715 0.9961713 #> 16 0.3773762 0.17764114 0.6341141 0.32626441  0.155830203 -1.4716906 0.9955135 #> 17 0.5404382 0.15653877 0.7745077 0.22418779 -0.086928464 -0.7879823 0.9936674 #> 18 0.5047805 0.12378891 0.6171122 0.18929582  0.023233593 -0.9391389 0.9928874 #> 19 0.4924585 0.12809646 0.5556929 0.19879847  0.138175689 -1.0669619 0.9964616 #> 20 0.4213054 0.15606866 0.6577968 0.25250251  0.064335980 -1.0802679 0.9962414"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"handle-na-cases","dir":"Articles","previous_headings":"The TSL Toolset","what":"Handle NA Cases","title":"Handling Time Series Lists","text":"dissimilarity analyses implemented version 2.0 distantia support NA cases time series lists. two alternate workflows handle NA cases time series list. first uses tsl_count_NA() tsl_handle_NA(). former function converts Inf NaN NA counts NA cases time series, latter either omits imputes NA cases via zoo::na.approx(). second workflow involves functions tsl_diagnose() tsl_repair(), general addresses potential issues .","code":"#count NA distantia::tsl_count_NA(tsl = tsl)  #> $A #> [1] 447 #>  #> $B #> [1] 414 #>  #> $C #> [1] 474 #>  #> $D #> [1] 377  #impute NA cases tsl_notNA <- distantia::tsl_handle_NA(   tsl = tsl,   na_action = \"impute\" )  #re-count distantia::tsl_count_NA(tsl = tsl_notNA)  #> $A #> [1] 0 #>  #> $B #> [1] 0 #>  #> $C #> [1] 0 #>  #> $D #> [1] 0 #diagnose issues with NA values distantia::tsl_diagnose(tsl = tsl) #>  #> distantia::tsl_diagnose(): issues in TSL values: #> -------------------------------------------------- #>  #>   - there are NA, Inf, -Inf, or NaN cases in the time series: interpolate or remove them with distantia::tsl_handle_NA().  #impute NA cases tsl <- tsl_repair(tsl = tsl) #>  #> distantia::tsl_repair(): repairs in TSL values: #> ------------------------------------------------- #>  #>   - interpolated NA cases in zoo objects with distantia::tsl_handle_NA().  #re-diagnose to check result distantia::tsl_diagnose(tsl = tsl)"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"subsetting","dir":"Articles","previous_headings":"The TSL Toolset","what":"Subsetting","title":"Handling Time Series Lists","text":"function tsl_subset() helps focus particular regions time series list. Additionally, default function returns numeric columns shared across time series TSL.  function tsl_burst() transforms multivariate TSL univariate TSL creating new zoo object column original zoo objects. function helps apply dissimilarity analysis individual variables multivariate time series.","code":"tsl_new <- distantia::tsl_subset(   tsl = tsl,   names = c(\"A\", \"C\", \"D\"),   colnames = c(\"a\", \"b\"),   time = c(\"2014-01-01\", \"2018-01-01\"),   numeric_cols = TRUE,   shared_cols = TRUE )  distantia::tsl_plot(   tsl = tsl_new   ) #burst multivariate time series to univariate tsl_univariate <- distantia::tsl_burst(   tsl = tsl_new )  #check new time series names distantia::tsl_names_get(tsl = tsl_univariate) #>   A__a   A__b   C__a   C__b   D__a   D__b  #> \"A__a\" \"A__b\" \"C__a\" \"C__b\" \"D__a\" \"D__b\"  #check new column names distantia::tsl_colnames_get(tsl = tsl_univariate) #> $A__a #> [1] \"x\" #>  #> $A__b #> [1] \"x\" #>  #> $C__a #> [1] \"x\" #>  #> $C__b #> [1] \"x\" #>  #> $D__a #> [1] \"x\" #>  #> $D__b #> [1] \"x\"  #plot univariate time series distantia::tsl_plot(   tsl = tsl_univariate,   guide = FALSE   )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"aggregation","dir":"Articles","previous_headings":"The TSL Toolset","what":"Aggregation","title":"Handling Time Series Lists","text":"Aggregation reduces time series frequency (.k.downsampling) summarizing multiple data points single value specified time interval. results reduction number samples, smooths noise , can transform irregular time series regular, can generate entirely new time series depending aggregation stats. hand, obscures fine grain detail alters statistical properties variance temporal autocorrelation. distantia, operation supported function tsl_aggregate(), two arguments: new_time: time vector keyword defining time intervals aggregate . f: aggregation function summarizing observations aggregation time intervals. code illustrates function’s usage compute yearly temperature precipitation indicators monthly observations dataset honeycomb_climate.  easiest way define aggregation intervals distantia use keyword. function tsl_time() returns supported keywords given TSL. Let’s focus “quarters” rest example. code subsets column “temperature” tsl, aggregates computing minimum, maximum, mean per quarter, adds suffix new aggregated column. Similar steps can followed process variable “precipitation”. Finally, join new TSLs together examine result.","code":"tsl <- distantia::tsl_init(   x = distantia::honeycomb_climate,   name = \"cell\",   time = \"time\" ) |>    tsl_subset(     names = 1:5 #subset first five elements   )  distantia::tsl_plot(   tsl = tsl ) df_time <- distantia::tsl_time(   tsl = tsl,   keywords = \"aggregate\"   )  df_time$keywords |>    unlist() |>    unique() #> [1] \"decades\"  \"years\"    \"quarters\" interval <- \"quarters\" #subset temperature column tsl_temperature <- distantia::tsl_subset(   tsl = tsl,   colnames = \"temperature\" )  #compute stats: minimum, maximum, and mean tsl_temperature_min <- distantia::tsl_aggregate(   tsl = tsl_temperature,   new_time = interval,   f = min ) |>    distantia::tsl_colnames_suffix(     suffix = \"_min\" #set suffix for aggregated column   )  tsl_temperature_max <- distantia::tsl_aggregate(   tsl = tsl_temperature,   new_time = interval,   f = max ) |>    distantia::tsl_colnames_suffix(     suffix = \"_max\"   )  tsl_temperature_mean <- distantia::tsl_aggregate(   tsl = tsl_temperature,   new_time = interval,   f = mean ) |>    distantia::tsl_colnames_suffix(     suffix = \"_mean\"   ) #subset temperature column tsl_precipitation <- distantia::tsl_subset(   tsl = tsl,   colnames = \"precipitation\" )  #compute stats: minimum, maximum, and mean tsl_precipitation_sum <- distantia::tsl_aggregate(   tsl = tsl_precipitation,   new_time = interval,   f = sum ) |>    distantia::tsl_colnames_suffix(     suffix = \"_sum\" #set suffix for aggregated column   )  tsl_precipitation_max <- distantia::tsl_aggregate(   tsl = tsl_precipitation,   new_time = interval,   f = max ) |>    distantia::tsl_colnames_suffix(     suffix = \"_max\"   )  tsl_precipitation_min <- distantia::tsl_aggregate(   tsl = tsl_precipitation,   new_time = interval,   f = min ) |>    distantia::tsl_colnames_suffix(     suffix = \"_min\"   ) tsl_climate_stats <- distantia::tsl_join(   tsl_temperature_min,   tsl_temperature_max,   tsl_temperature_mean,   tsl_precipitation_sum,   tsl_precipitation_max,   tsl_precipitation_min )  distantia::tsl_plot(   tsl = tsl_climate_stats,   ylim = \"relative\" )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"resampling","dir":"Articles","previous_headings":"The TSL Toolset","what":"Resampling","title":"Handling Time Series Lists","text":"Resampling model-based method change frequency time series via interpolation. useful align time series irregular different resolutions. important take mind resampling frequency much higher original definitely result interpolation artifacts distorted time series. code creates two irregular time series different number rows.  time features TSL show clear differences frequency time series. default, argument new_time omitted, linear model (computed via zoo:::na.approx()) used resample TSL average resolution intersection time ranges.  Otherwise, keyword can used define resampling frequency. , can find valid keywords using tsl_time(), replacing “aggregate” “resample” argument keywords.","code":"tsl <- distantia::tsl_init(   x = list(     A = zoo_simulate(rows = 100, seasons = 10),     B = zoo_simulate(rows = 50, seasons = 10)   ) )  distantia::tsl_plot(   tsl = tsl,    guide = FALSE   ) distantia::tsl_time(tsl = tsl)[   ,    c(\"name\", \"rows\", \"resolution\", \"begin\", \"end\")   ] #>   name rows resolution      begin        end #> 1    A  100   36.70352 2010-01-01 2019-12-13 #> 2    B   50   74.53061 2010-01-01 2020-01-01 tsl_resampled <- distantia::tsl_resample(   tsl = tsl )  distantia::tsl_time(tsl = tsl_resampled)[   ,    c(\"name\", \"rows\", \"resolution\", \"begin\", \"end\")   ] #>   name rows resolution      begin        end #> 1    A   75   49.10335 2010-01-01 2019-12-13 #> 2    B   75   49.10335 2010-01-01 2019-12-13  distantia::tsl_plot(   tsl = tsl_resampled,    guide = FALSE   ) df <- distantia::tsl_time(   tsl = tsl,   keywords = \"resample\"   )  df$keywords |>    unlist() |>    unique() #> [1] \"years\"    \"quarters\" \"months\"   \"weeks\" tsl_resampled <- distantia::tsl_resample(   tsl = tsl,   new_time = \"weeks\",   method = \"loess\" ) #> Warning in zoo_resample(x = x, new_time = new_time, method = method, #> max_complexity = max_complexity): The time intervals of 'new_time' and 'x' #> differ in one order of magnitude or more. The output time series might be #> highly distorted. #> Warning: UNRELIABLE VALUE: One of the 'future.apply' iterations #> ('future_lapply-1') unexpectedly generated random numbers without declaring so. #> There is a risk that those random numbers are not statistically sound and the #> overall results might be invalid. To fix this, specify 'future.seed=TRUE'. This #> ensures that proper, parallel-safe random numbers are produced via the #> L'Ecuyer-CMRG method. To disable this check, use 'future.seed = NULL', or set #> option 'future.rng.onMisuse' to \"ignore\".  tsl_time(tsl = tsl_resampled)[   ,    c(\"name\", \"rows\", \"resolution\", \"begin\", \"end\")   ] #>   name rows resolution      begin        end #> 1    A  519          7 2010-01-03 2019-12-08 #> 2    B  522          7 2010-01-03 2019-12-29  distantia::tsl_plot(   tsl = tsl_resampled,    guide = FALSE   )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"smoothing","dir":"Articles","previous_headings":"The TSL Toolset","what":"Smoothing","title":"Handling Time Series Lists","text":"Time series smoothing used mitigate noise high-frequency time series, highlight general trends rather fine-grain details. function tsl_smooth() implements two smoothing methods: rolling-window exponential. check methods work first need long noisy TSL.","code":"tsl <- distantia::tsl_simulate(   rows = 1000,   irregular = FALSE )  distantia::tsl_plot(   tsl = tsl,   guide = FALSE   )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"rolling-window-smoothing","dir":"Articles","previous_headings":"The TSL Toolset > Smoothing","what":"Rolling-Window Smoothing","title":"Handling Time Series Lists","text":"method computes statistic fixed-width window consecutive cases replaces central value computed statistic. applied highly irregular time series, ignores time distance. code applies method two different window sizes. window size determines smoothing scale, , type trend highlighted smoothing results.","code":"#smoothing with window 100 tsl_smooth_100 <- tsl_smooth(   tsl = tsl,   window = 100,   f = mean )  distantia::tsl_plot(   tsl = tsl_smooth_100,   guide = FALSE   )  #smoothing with window 10 tsl_smooth_10 <- tsl_smooth(   tsl = tsl,   window = 10,   f = mean )  distantia::tsl_plot(   tsl = tsl_smooth_10,   guide = FALSE   )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"exponential-smoothing","dir":"Articles","previous_headings":"The TSL Toolset > Smoothing","what":"Exponential Smoothing","title":"Handling Time Series Lists","text":"method generates new value weighted average current value past smoothed values. weight defined argument alpha tsl_smooth(). Alpha values closer zero produce smoother results, plots show.","code":"#smoothing with alpha 0.2 tsl_smooth_exp_0.2 <- tsl_smooth(   tsl = tsl,   alpha = 0.2 )  distantia::tsl_plot(   tsl = tsl_smooth_exp_0.2,   guide = FALSE   )  #smoothing with alpha 0.8 tsl_smooth_exp_0.8 <- tsl_smooth(   tsl = tsl,   alpha = 0.8 )  distantia::tsl_plot(   tsl = tsl_smooth_exp_0.8,   guide = FALSE   )"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"transformations","dir":"Articles","previous_headings":"The TSL Toolset","what":"Transformations","title":"Handling Time Series Lists","text":"function tsl_transform() applies function f transform values TSL. names available f functions can listed f_list().","code":"distantia::f_list() #>  [1] \"f_binary\"             \"f_clr\"                \"f_detrend_difference\" #>  [4] \"f_detrend_linear\"     \"f_detrend_poly\"       \"f_hellinger\"          #>  [7] \"f_log\"                \"f_percent\"            \"f_proportion\"         #> [10] \"f_proportion_sqrt\"    \"f_rescale_global\"     \"f_rescale_local\"      #> [13] \"f_scale_global\"       \"f_scale_local\"        \"f_trend_linear\"       #> [16] \"f_trend_poly\""},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"scale-adjustments","dir":"Articles","previous_headings":"The TSL Toolset > Transformations","what":"Scale Adjustments","title":"Handling Time Series Lists","text":"Scaling centering multivariate time series essential dynamic time warping ensure variables contribute equally, regardless range units. example, dataset fagus_dynamics variables different units.  Due differences magnitude variables, dynamic time warping analysis focus rainfall disproportionately, biasing results. solve issue, package distantia implements two flavors scaling /centering: Local: variable scaled /centered independently time series. Global: variable scaled /centering using mean standard deviation across time series. stats operations show global one preserves variable offsets locations, local one shows average 0 standard deviation 1 across variables. functions f_rescale_local f_rescale_global work principle rescale variable ranges. default, functions rescale time series 0 1, arguments new_min new_max can receive numeric vectors set different ranges different variables. stats show results local global rescaling.","code":"tsl <- distantia::tsl_init(   x = distantia::fagus_dynamics,   name = \"name\",   time = \"time\" )  distantia::tsl_plot(   tsl = tsl ) #local scaling tsl_local_scaling <- distantia::tsl_transform(   tsl = tsl,   f = distantia::f_scale_local )  #global scaling tsl_global_scaling <- distantia::tsl_transform(   tsl = tsl,   f = distantia::f_scale_global ) stats_cols <- c(\"name\", \"variable\", \"mean\", \"sd\")  #stats of local scaling distantia::tsl_stats(   tsl = tsl_local_scaling )[, stats_cols] #>      name    variable                       mean sd #> 1 Germany         evi -0.00000000000000006831308  1 #> 2   Spain         evi -0.00000000000000002052254  1 #> 3  Sweden         evi  0.00000000000000007098864  1 #> 4 Germany    rainfall -0.00000000000000004628439  1 #> 5   Spain    rainfall -0.00000000000000014522160  1 #> 6  Sweden    rainfall  0.00000000000000021712177  1 #> 7 Germany temperature -0.00000000000000010904564  1 #> 8   Spain temperature  0.00000000000000006240186  1 #> 9  Sweden temperature  0.00000000000000004371794  1  #stats of global scaling distantia::tsl_stats(   tsl = tsl_global_scaling )[, stats_cols] #>      name    variable         mean        sd #> 1 Germany         evi  0.274946362 0.8814083 #> 2   Spain         evi -0.198553830 0.7030354 #> 3  Sweden         evi -0.076392533 1.2715132 #> 4 Germany    rainfall -0.322755553 0.7018733 #> 5   Spain    rainfall  0.493472218 1.2122159 #> 6  Sweden    rainfall -0.170716665 0.8176955 #> 7 Germany temperature -0.009510512 1.0589824 #> 8   Spain temperature  0.360302107 0.7534701 #> 9  Sweden temperature -0.350791594 1.0324738 tsl_local_rescaling <- tsl_transform(   tsl = tsl,   f = f_rescale_local,   new_min = 0, #same for all variables   new_max = c(0, 100, 10) )  tsl_global_rescaling <- tsl_transform(   tsl = tsl,   f = f_rescale_global,   new_min = 0,   new_max = c(0, 100, 10) ) stats_cols <- c(\"name\", \"variable\", \"min\", \"max\")  distantia::tsl_stats(   tsl = tsl_local_rescaling )[, stats_cols] #>      name    variable min max #> 1 Germany         evi   0   0 #> 2   Spain         evi   0   0 #> 3  Sweden         evi   0   0 #> 4 Germany    rainfall   0 100 #> 5   Spain    rainfall   0 100 #> 6  Sweden    rainfall   0 100 #> 7 Germany temperature   0  10 #> 8   Spain temperature   0  10 #> 9  Sweden temperature   0  10  distantia::tsl_stats(   tsl = tsl_global_rescaling )[, stats_cols] #>      name    variable        min       max #> 1 Germany         evi 0.03304993 0.8519938 #> 2   Spain         evi 0.16944079 0.7209915 #> 3  Sweden         evi 0.00000000 1.0000000 #> 4 Germany    rainfall 0.00000000 0.6596244 #> 5   Spain    rainfall 0.03615023 1.0000000 #> 6  Sweden    rainfall 0.02206573 0.8732394 #> 7 Germany temperature 0.10035842 1.0000000 #> 8   Spain temperature 0.32974910 0.9462366 #> 9  Sweden temperature 0.00000000 0.8853047"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"trend-adjustments","dir":"Articles","previous_headings":"The TSL Toolset > Transformations","what":"Trend Adjustments","title":"Handling Time Series Lists","text":"Removing trends time series applying dynamic time warping may help prevents inflated dissimilarity scores caused non-stationary components. Detrending also ensures alignment generated dynamic time warping focuses meaningful shape features rather distorted long-term trends. transformation function f_trend_linear transforms time series linear trend help identify whether time series needs detrending . example applies function cities_temperature dataset.  can now compute stats linear trends identify cities steeper long-term temperature change. Now identified issue, function f_detrend_linear helps remove temporal trends data. code applies f_trend_linear demonstrate linear detrending worked expected.","code":"#loading cities_temperature as tsl tsl <- distantia::tsl_init(   x = distantia::cities_temperature,   name = \"name\",   time = \"time\" )  #computing linear trends tsl_trend <- distantia::tsl_transform(   tsl = tsl,   f = distantia::f_trend_linear )  #plotting linear trends tsl_plot(   tsl = tsl_trend,   columns = 2,   guide = FALSE,   line_color = \"red4\",   line_width = 1.5 ) #compute stats of linear trends df_stats <- distantia::tsl_stats(   tsl = tsl_trend,   lags = 0 )  #arrange from higher to lower range df_stats[   order(df_stats$range, decreasing = TRUE),    c(\"name\", \"range\")   ] #>                name     range #> 15           Moscow 1.6821989 #> 12           London 1.3864875 #> 19         Shanghai 1.3791695 #> 16            Paris 1.3286522 #> 6          Istanbul 1.3026069 #> 3             Cairo 1.2096175 #> 20            Tokyo 1.0892597 #> 8           Karachi 1.0320425 #> 18        São Paulo 0.8453958 #> 13      Los Angeles 0.8322052 #> 17   Rio De Janeiro 0.7802845 #> 10            Lagos 0.7670465 #> 9          Kinshasa 0.6908596 #> 7           Jakarta 0.6667040 #> 2            Bogotá 0.4577014 #> 5  Ho Chi Minh City 0.3983325 #> 14           Manila 0.3216708 #> 1           Bangkok 0.2431807 #> 11             Lima 0.2421891 #> 4             Dhaka 0.2317552 tsl_detrended <- distantia::tsl_transform(   tsl = tsl,   f = distantia::f_detrend_linear ) tsl_trend <- distantia::tsl_transform(   tsl = tsl_detrended,   f = distantia::f_trend_linear )  df_stats <- distantia::tsl_stats(   tsl = tsl_trend,   lags = 0 )  df_stats[, c(\"name\", \"range\")] #>                name                      range #> 1           Bangkok 0.000000000000000328592658 #> 2            Bogotá 0.000000000000000484878289 #> 3             Cairo 0.000000000000000943646582 #> 4             Dhaka 0.000000000000000329773971 #> 5  Ho Chi Minh City 0.000000000000000890841633 #> 6          Istanbul 0.000000000000000808987093 #> 7           Jakarta 0.000000000000001206220863 #> 8           Karachi 0.000000000000000581163990 #> 9          Kinshasa 0.000000000000002226721698 #> 10            Lagos 0.000000000000001024499755 #> 11             Lima 0.000000000000000709047629 #> 12           London 0.000000000000000614810456 #> 13      Los Angeles 0.000000000000000469843877 #> 14           Manila 0.000000000000000006671831 #> 15           Moscow 0.000000000000000851634434 #> 16            Paris 0.000000000000000317550377 #> 17   Rio De Janeiro 0.000000000000000841054716 #> 18        São Paulo 0.000000000000000464026082 #> 19         Shanghai 0.000000000000000087755817 #> 20            Tokyo 0.000000000000001516265533"},{"path":"https://blasbenito.github.io/distantia/articles/time_series_lists.html","id":"compositional-normalization","dir":"Articles","previous_headings":"The TSL Toolset > Transformations","what":"Compositional Normalization","title":"Handling Time Series Lists","text":"distantia package offers several transformations compositional data: f_percent: percentages. f_proportion: proportions. f_proportion_sqrt: square root proportions f_hellinger: transforms proportion applies Hellinger transformation. f_clr: centered log-ratio. f_log: logarithm transformation. f_binary: transform continuous data discrete events. example shows application several transformation counts dataset eemian_pollen. Transformation percentages f_percent. function f_binary helps transform continuous data discrete events. code converts percentages presence/absence using 5% threshold. Notice variable “Carpinus” shown plot facilitate visualization.  Transformation square root proportions f_proportion_sqrt.  function f_hellinger transforms taxa counts proportions applies Hellinger transformation.  Centered log-ration computed f_clr.","code":"tsl_counts <- distantia::tsl_init(   x = distantia::eemian_pollen,   name = \"name\",   time = \"time\" ) |>    distantia::tsl_subset(     names = c(1, 2)   )  distantia::tsl_plot(   tsl = tsl_counts,   guide_columns = 4   ) tsl_percent <- distantia::tsl_transform(   tsl = tsl_counts,   f = distantia::f_percent )  distantia::tsl_plot(   tsl = tsl_percent,   guide_columns = 4   ) tsl_binary <- distantia::tsl_transform(   tsl = tsl_percent,   f = distantia::f_binary,   threshold = 5 )  distantia::tsl_plot(   tsl = distantia::tsl_subset(     tsl = tsl_binary,     colnames = \"Carpinus\"     )   ) tsl_prop_sqrt <- distantia::tsl_transform(   tsl = tsl_counts,   f = distantia::f_proportion_sqrt )  distantia::tsl_plot(   tsl = tsl_prop_sqrt,   guide_columns = 4   ) tsl_hellinger <- distantia::tsl_transform(   tsl = tsl_counts,   f = distantia::f_hellinger )  tsl_plot(   tsl = tsl_hellinger,    guide_columns = 4   ) tsl_clr <- distantia::tsl_transform(   tsl = tsl_counts,   f = distantia::f_clr )  tsl_plot(   tsl = tsl_clr,    guide_columns = 4   )"},{"path":"https://blasbenito.github.io/distantia/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Blas M. Benito. Author, maintainer, copyright holder.","code":""},{"path":"https://blasbenito.github.io/distantia/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benito B, Birks H (2020). “distantia: open-source toolset quantify dissimilarity multivariate ecological time-series.” Ecography, 43(5), 660-667. doi:10.1111/ecog.04895, https://nsojournals.onlinelibrary.wiley.com/doi/pdf/10.1111/ecog.04895, https://nsojournals.onlinelibrary.wiley.com/doi/abs/10.1111/ecog.04895. Benito B (2024). distantia: Toolset Time Series Dissimilarity Analysis. R package version 2.0.0, https://blasbenito.github.io/distantia/.","code":"@Article{,   author = {Blas M. Benito and H. John B. Birks},   title = {distantia: an open-source toolset to quantify dissimilarity between multivariate ecological time-series},   journal = {Ecography},   volume = {43},   number = {5},   pages = {660-667},   doi = {10.1111/ecog.04895},   url = {https://nsojournals.onlinelibrary.wiley.com/doi/abs/10.1111/ecog.04895},   eprint = {https://nsojournals.onlinelibrary.wiley.com/doi/pdf/10.1111/ecog.04895},   year = {2020}, } @Manual{,   title = {distantia: A Toolset for Time Series Dissimilarity Analysis},   author = {Blas M. Benito},   year = {2024},   note = {R package version 2.0.0},   url = {https://blasbenito.github.io/distantia/}, }"},{"path":[]},{"path":"https://blasbenito.github.io/distantia/index.html","id":"warning","dir":"","previous_headings":"","what":"Warning","title":"A Toolset for Time Series Dissimilarity Analysis","text":"Version 2.0.0 distantia full re-write original package break existing workflows making better. Please refer Changelog details updating.","code":""},{"path":"https://blasbenito.github.io/distantia/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"A Toolset for Time Series Dissimilarity Analysis","text":"R package distantia offers efficient, feature-rich toolkit managing, comparing, analyzing time series data. designed handle wide range scenarios, including: Multivariate univariate time series. Regular irregular sampling. Time series different lengths.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/index.html","id":"comprehensive-analytical-tools","dir":"","previous_headings":"Summary > Key Features","what":"Comprehensive Analytical Tools","title":"A Toolset for Time Series Dissimilarity Analysis","text":"10 distance metrics: see distantia::distances. normalized dissimilarity metric psi. Free Restricted Dynamic Time Warping (DTW) shape-based comparisons. Lock-Step method sample--sample alignment. Restricted permutation tests robust inferential support. Variable Importance Analysis: assessment contribution dissimilarity individual variables multivariate time series. Hierarchical K-means clustering time series based dissimilarity matrices.","code":""},{"path":"https://blasbenito.github.io/distantia/index.html","id":"computational-efficiency","dir":"","previous_headings":"Summary > Key Features","what":"Computational Efficiency","title":"A Toolset for Time Series Dissimilarity Analysis","text":"C++ back-end powered Rcpp. Parallel processing managed future package. Efficient data handling via zoo.","code":""},{"path":"https://blasbenito.github.io/distantia/index.html","id":"time-series-management-tools","dir":"","previous_headings":"Summary > Key Features","what":"Time Series Management Tools","title":"A Toolset for Time Series Dissimilarity Analysis","text":"Introduces time series lists (TSL), versatile format handling collections time series stored lists zoo objects. Includes suite tsl_...() functions generating, resampling, transforming, analyzing, visualizing univariate multivariate time series.","code":""},{"path":"https://blasbenito.github.io/distantia/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A Toolset for Time Series Dissimilarity Analysis","text":"find package useful, please cite : Blas M. Benito, H. John B. Birks (2020). distantia: open-source toolset quantify dissimilarity multivariate ecological time-series. Ecography, 43(5), 660-667. doi: 10.1111/ecog.04895. Blas M. Benito (2024). distantia: Toolset Time Series Dissimilarity Analysis. R package version 2.0.0. url: https://blasbenito.github.io/distantia/.","code":""},{"path":"https://blasbenito.github.io/distantia/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"A Toolset for Time Series Dissimilarity Analysis","text":"package distantia can installed CRAN. development version can installed GitHub.","code":"install.packages(\"distantia\") remotes::install_github(   repo = \"blasbenito/distantia\",    ref = \"development\"   )"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"A Toolset for Time Series Dissimilarity Analysis","text":"section showcases several features package distantia. Please, check Articles section details.","code":""},{"path":"https://blasbenito.github.io/distantia/index.html","id":"setup","dir":"","previous_headings":"Getting Started","what":"Setup","title":"A Toolset for Time Series Dissimilarity Analysis","text":"heavy duty functions distantia support parallelization via future package, progress bars provided progressr package. Unfortunately, latter work Rmarkdown documents like one.","code":"library(distantia) library(future) library(parallelly) # library(progressr)   #parallelization setup #only worth it for very large datasets # future::plan( #   future::multisession, #   workers = parallelly::availableCores() - 1 #   )  #progress bar (does not work in Rmarkdown) #progressr::handlers(global = TRUE)"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"example-data","dir":"","previous_headings":"Getting Started","what":"Example Data","title":"A Toolset for Time Series Dissimilarity Analysis","text":"albatross data frame contains daily GPS data 4 individuals Waved Albatross Pacific captured summer 2008. first 10 rows data frame: code transforms data Time Series List tsl_initialize() applies global scaling centering tsl_transform() f_scale_global facilitate time series comparisons. ### Dissimilarity Analysis","code":"#>   name       time         x         y     speed temperature  heading #> 1 X132 2008-05-31 -89.62097 -1.389512 0.1473333    29.06667 212.0307 #> 2 X132 2008-06-01 -89.62101 -1.389508 0.2156250    28.25000 184.0337 #> 3 X132 2008-06-02 -89.62101 -1.389503 0.2143750    27.68750 123.1269 #> 4 X132 2008-06-03 -89.62099 -1.389508 0.2018750    27.81250 183.4600 #> 5 X132 2008-06-04 -89.62098 -1.389507 0.2256250    27.68750 114.8931 #> 6 X132 2008-06-05 -89.62925 -1.425734 1.3706667    25.73333 245.8033 tsl <- tsl_initialize(   x = albatross,   name_column = \"name\",   time_column = \"time\",   lock_step = TRUE ) |>    tsl_transform(     f = f_scale_global   )  tsl_plot(   tsl = tsl,   ylim = \"relative\" )"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"lock-step-analysis","dir":"","previous_headings":"Getting Started > Example Data","what":"Lock-Step Analysis","title":"A Toolset for Time Series Dissimilarity Analysis","text":"Lock-step analysis performs direct comparisons samples observed time without time distortion. requires time series length, observed times. “psi” column contains normalized dissimilarity values used sort data frame lowest highest dissimilarity. Hence, first row shows similar pair time series. function distantia_boxplot() enables quick identification time series either dissimilar (top) similar (bottom) others.","code":"df_ls <- distantia(   tsl = tsl,   lock_step = TRUE ) #> Loading required package: foreach  df_ls[, c(\"x\", \"y\", \"psi\")] #>      x    y      psi #> 1 X132 X134 1.888451 #> 3 X132 X153 2.128340 #> 5 X134 X153 2.187862 #> 4 X134 X136 2.270977 #> 2 X132 X136 2.427479 #> 6 X136 X153 2.666099 distantia_boxplot(df = df_ls, text_cex = 0.8)"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"dynamic-time-warping","dir":"","previous_headings":"Getting Started > Example Data","what":"Dynamic Time Warping","title":"A Toolset for Time Series Dissimilarity Analysis","text":"default, distantia() computes unrestricted dynamic time warping orthogonal diagonal least cost paths. function distantia_dtw_plot() provides detailed insights alignment pair time series resulting DTW.  Deviations perfect diagonal least-cost path reveal adjustments made DTW align time series shape rather time. article Dynamic Time Warping vs Lock-Step provides insights advantages disadvantages method different scenarios.","code":"df_dtw <- distantia(   tsl = tsl )  df_dtw[, c(\"x\", \"y\", \"psi\")] #>      x    y      psi #> 1 X132 X134 1.299380 #> 5 X134 X153 2.074241 #> 3 X132 X153 2.091923 #> 4 X134 X136 2.358040 #> 2 X132 X136 2.449381 #> 6 X136 X153 2.666099 distantia_dtw_plot(   tsl = tsl[c(\"X132\", \"X153\")] )"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"permutation-test","dir":"","previous_headings":"Getting Started","what":"Permutation Test","title":"A Toolset for Time Series Dissimilarity Analysis","text":"function distantia() implements restricted permutation tests assess significance dissimilarity scores. provides several setups support different assumptions. example, configuration rearranges complete rows within 7-day blocks, assuming strong dependencies within rows observations close time. “p_value” column represents fraction permutations yielding psi score lower observed value. indicates strength similarity two time series. significance threshold (e.g., 0.05, depending iterations) helps identify strongly similar dissimilar pairs.","code":"df_dtw <- distantia(   tsl = tsl,   repetitions = 1000,   permutation = \"restricted_by_row\",   block_size = 7 )  df_dtw[, c(\"x\", \"y\", \"psi\", \"p_value\")] #>      x    y      psi p_value #> 1 X132 X134 1.299380   0.001 #> 5 X134 X153 2.074241   0.001 #> 3 X132 X153 2.091923   0.002 #> 4 X134 X136 2.358040   0.177 #> 2 X132 X136 2.449381   0.544 #> 6 X136 X153 2.666099   0.005"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"variable-importance","dir":"","previous_headings":"Getting Started","what":"Variable Importance","title":"A Toolset for Time Series Dissimilarity Analysis","text":"comparing multivariate time series, certain variables contribute similarity dissimilarity. momentum() function uses leave-one-algorithm quantify variable’s contribution overall dissimilarity two time series. Positive “importance” values indicate variables contributing dissimilarity, negative values indicate contribution similarity. function documentation provides details importance scores computed. momentum_boxplot() function can provide insights variables contribute similarity dissimilarity.","code":"df_importance <- momentum(   tsl = tsl )  df_importance[, c(\"x\", \"y\", \"variable\", \"importance\", \"effect\")] #>       x    y    variable   importance               effect #> 1  X132 X134           x   87.6066043 decreases similarity #> 2  X132 X134           y   93.9587187 decreases similarity #> 3  X132 X134       speed  -21.9171171 increases similarity #> 4  X132 X134 temperature   72.8121621 decreases similarity #> 5  X132 X134     heading  -38.0165137 increases similarity #> 6  X132 X136           x   48.3845903 decreases similarity #> 7  X132 X136           y   93.5214543 decreases similarity #> 8  X132 X136       speed  -61.1729252 increases similarity #> 9  X132 X136 temperature  356.8824838 decreases similarity #> 10 X132 X136     heading -102.9830173 increases similarity #> 11 X132 X153           x  427.7381576 decreases similarity #> 12 X132 X153           y  156.1285451 decreases similarity #> 13 X132 X153       speed  -40.9249630 increases similarity #> 14 X132 X153 temperature  -14.2831545 increases similarity #> 15 X132 X153     heading  -79.3532025 increases similarity #> 16 X134 X136           x   61.3361468 decreases similarity #> 17 X134 X136           y  108.9650664 decreases similarity #> 18 X134 X136       speed  -59.2603918 increases similarity #> 19 X134 X136 temperature  310.6812842 decreases similarity #> 20 X134 X136     heading  -90.2797292 increases similarity #> 21 X134 X153           x  592.0783167 decreases similarity #> 22 X134 X153           y  116.4310429 decreases similarity #> 23 X134 X153       speed  -52.4149093 increases similarity #> 24 X134 X153 temperature    0.9936944 decreases similarity #> 25 X134 X153     heading  -85.0271172 increases similarity #> 26 X136 X153           x  507.6153648 decreases similarity #> 27 X136 X153           y   56.6957442 decreases similarity #> 28 X136 X153       speed  -65.4516103 increases similarity #> 29 X136 X153 temperature  240.9053814 decreases similarity #> 30 X136 X153     heading -116.2461929 increases similarity momentum_boxplot(   df = df_importance )"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"clustering","dir":"","previous_headings":"Getting Started","what":"Clustering","title":"A Toolset for Time Series Dissimilarity Analysis","text":"package distantia provides tools group together time series dissimilarity using hierarchical K-means clustering. example applies former albatross dataset find groups individuals similar movement time series.  just summary features implemented package. Please visit Articles section find distantia.","code":"dtw_hclust <- distantia_cluster_hclust(   df = df_dtw,   clusters = NULL, #automatic mode   method = NULL    #automatic mode   )  #cluster object dtw_hclust$cluster_object #>  #> Call: #> stats::hclust(d = d_dist, method = method) #>  #> Cluster method   : ward.D  #> Number of objects: 4  #number of clusters dtw_hclust$clusters #> [1] 2  #clustering data frame #group label in column \"cluster\" #negatives in column \"silhouette_width\" higlight anomalous cluster assignation dtw_hclust$df #>   name cluster silhouette_width #> 1 X132       1        0.3077225 #> 2 X134       1        0.2846556 #> 3 X136       2        0.0000000 #> 4 X153       1        0.2186781  #tree plot par(mar=c(3,1,1,3))  plot(   x = stats::as.dendrogram(     dtw_hclust$cluster_object     ),   horiz = TRUE )"},{"path":"https://blasbenito.github.io/distantia/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"A Toolset for Time Series Dissimilarity Analysis","text":"encounter bugs issues documentation, please file issue GitHub.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":null,"dir":"Reference","previous_headings":"","what":"Flight Path Time Series of Albatrosses in The Pacific — albatross","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"Daily mean flight path data 4 individuals Waved Albatross (Phoebastria irrorata) captured via GPS summer 2008. Sf data frame columns name, time, latitude, longitude, ground speed, heading, (uncalibrated) temperature. full dataset hourly resolution can downloaded https://github.com/BlasBenito/distantia/blob/main/data_full/albatross.rda (use \"Download raw file\" button).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"","code":"data(albatross)"},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"data frame","code":""},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"doi:10.5441/001/1.3hp3s250","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/albatross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flight Path Time Series of Albatrosses in The Pacific — albatross","text":"","code":"#load as tsl #scale al variables #aggregate to daily resolution #align all time series to same temporal span tsl <- tsl_initialize(   x = albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_local   ) |>   tsl_aggregate(     new_time = \"days\"   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 5     ) }"},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"Computes cumulative sum distances consecutive samples univariate multivariate time series. NA values removed using function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"","code":"auto_distance_cpp(x, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"x (required, numeric matrix) univariate multivariate time series. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_distance_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between Consecutive Samples in a Time Series — auto_distance_cpp","text":"","code":"#simulate a time series x <- zoo_simulate()  #compute auto distance auto_distance_cpp(   x = x,   distance = \"euclidean\"   ) #> [1] 10.61317"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"Sum auto-distances two time series. function switches auto_sum_full_cpp() auto_sum_path_cpp() depending value argument ignore_blocks.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"","code":"auto_sum_cpp(x, y, path, distance = \"euclidean\", ignore_blocks = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) number columns 'x'. path (required, data frame) output cost_path_orthogonal_cpp(). distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\" ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between Consecutive Samples in Two Time Series — auto_sum_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  nrow(cost_path) #> [1] 199  #remove blocks from least-cost path cost_path_trimmed <- cost_path_trim_cpp(   path = cost_path )  nrow(cost_path_trimmed) #> [1] 29  #auto sum auto_sum_cpp(   x = x,   y = y,   path = cost_path_trimmed,   distance = \"euclidean\",   ignore_blocks = FALSE ) #> [1] 17.12273"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"Computes cumulative auto sum autodistances two time series. output value used normalization factor computing dissimilarity scores.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"","code":"auto_sum_full_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_full_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between All Consecutive Samples in Two Time Series — auto_sum_full_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #auto sum auto_sum_full_cpp(   x = x,   y = y,   distance = \"euclidean\" ) #> [1] 17.12273"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"Computes cumulative auto sum auto-distances two time series coordinates trimmed least cost path. output value used normalization factor computing dissimilarity scores.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"","code":"auto_sum_path_cpp(x, y, path, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns 'x'. path (required, data frame) least-cost path produced cost_path_orthogonal_cpp(). Default: NULL distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/auto_sum_path_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances Between All Consecutive Samples in the Least Cost Path Between Two Time Series — auto_sum_path_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  nrow(cost_path) #> [1] 199  #remove blocks from least-cost path cost_path_trimmed <- cost_path_trim_cpp(   path = cost_path )  nrow(cost_path_trimmed) #> [1] 29  #auto sum auto_sum_path_cpp(   x = x,   y = y,   path = cost_path_trimmed,   distance = \"euclidean\" ) #> [1] 5.289003"},{"path":"https://blasbenito.github.io/distantia/reference/cities_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinates of 100 Major Cities — cities_coordinates","title":"Coordinates of 100 Major Cities — cities_coordinates","text":"City coordinates several environmental variables dataset cities_temperature. full dataset 100 cities can downloaded https://github.com/BlasBenito/distantia/blob/main/data_full/cities_coordinates.rda (use \"Download raw file\" button).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cities_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinates of 100 Major Cities — cities_coordinates","text":"","code":"data(cities_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/cities_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coordinates of 100 Major Cities — cities_coordinates","text":"sf data frame 5 columns 100 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":null,"dir":"Reference","previous_headings":"","what":"Long Term Monthly Temperature in 20 Major Cities — cities_temperature","title":"Long Term Monthly Temperature in 20 Major Cities — cities_temperature","text":"Average temperatures 1975 2010 20 major cities world. Source. Site coordinates dataset cities_coordinates. full dataset 100 cities can downloaded https://github.com/BlasBenito/distantia/blob/main/data_full/cities_temperature.rda (use \"Download raw file\" button).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Long Term Monthly Temperature in 20 Major Cities — cities_temperature","text":"","code":"data(cities_temperature)"},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Long Term Monthly Temperature in 20 Major Cities — cities_temperature","text":"data frame 3 columns 52100 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cities_temperature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Long Term Monthly Temperature in 20 Major Cities — cities_temperature","text":"","code":"data(\"cities_temperature\")  #to time series list cities <- tsl_initialize(   x = cities_temperature,   name_column = \"name\",   time_column = \"time\" )  #time series plot if(interactive()){   #only four cities are shown  tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:4     ),   guide = FALSE   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/color_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Continuous Color Palette — color_continuous","title":"Default Continuous Color Palette — color_continuous","text":"Uses function grDevices::hcl.colors() generate continuous color palette.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/color_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Continuous Color Palette — color_continuous","text":"","code":"color_continuous(n = 5, palette = \"Zissou 1\", rev = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/color_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Continuous Color Palette — color_continuous","text":"n (required, integer) number colors generate. Default = NULL palette (required, character string) Argument palette grDevices::hcl.colors(). Default: \"Zissou 1\" rev (optional, logical) TRUE, color palette reversed. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/color_continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Continuous Color Palette — color_continuous","text":"color vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/color_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Continuous Color Palette — color_continuous","text":"","code":"color_continuous(n = 20) #>  [1] \"#3B99B1\" \"#35A2AC\" \"#3FAAA6\" \"#52B19F\" \"#6AB699\" \"#81BB95\" \"#98BF95\" #>  [8] \"#AAC392\" \"#BEC78D\" \"#D4CA84\" \"#EAC527\" \"#EAB821\" \"#E9AC1C\" \"#E89F16\" #> [15] \"#E7920D\" \"#E78400\" \"#E87500\" \"#EB6200\" \"#EF4900\" \"#F5191C\""},{"path":"https://blasbenito.github.io/distantia/reference/color_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Discrete Color Palettes — color_discrete","title":"Default Discrete Color Palettes — color_discrete","text":"Uses function grDevices::palette.colors() generate discrete color palettes using following rules: n <= 9: \"Okabe-Ito\". n == 10: \"Tableau 10\" n > 10 && n <= 12: \"Paired\" n > 12 && n <= 26: \"Alphabet\" n > 26 && n <= 36: \"Polychrome 36\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/color_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Discrete Color Palettes — color_discrete","text":"","code":"color_discrete(n = NULL, rev = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/color_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Discrete Color Palettes — color_discrete","text":"n (required, integer) number colors generate. Default = NULL rev (optional, logical) TRUE, color palette reversed. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/color_discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Discrete Color Palettes — color_discrete","text":"color vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/color_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Discrete Color Palettes — color_discrete","text":"","code":"color_discrete(n = 9) #> [1] \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\" #> [8] \"#CC79A7\" \"#999999\""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_cpp","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_cpp","text":"Computes least cost matrix distance matrix. Considers diagonals computation least-costs.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_cpp","text":"","code":"cost_matrix_diagonal_cpp(dist_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_cpp","text":"dist_matrix (required, distance matrix). Square distance matrix, output distance_matrix_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Compute Orthogonal and Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_cpp","text":"Least cost matrix.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_weighted_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_weighted_cpp","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_weighted_cpp","text":"Computes least cost matrix distance matrix. Weights diagonals factor 1.414214 respect orthogonal paths.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_weighted_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_weighted_cpp","text":"","code":"cost_matrix_diagonal_weighted_cpp(dist_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_weighted_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_weighted_cpp","text":"dist_matrix (required, distance matrix). Distance matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_diagonal_weighted_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Compute Orthogonal and Weighted Diagonal Least Cost Matrix from a Distance Matrix — cost_matrix_diagonal_weighted_cpp","text":"Least cost matrix.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_orthogonal_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_orthogonal_cpp","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_orthogonal_cpp","text":"Computes least cost matrix distance matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_orthogonal_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_orthogonal_cpp","text":"","code":"cost_matrix_orthogonal_cpp(dist_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_orthogonal_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_orthogonal_cpp","text":"dist_matrix (required, distance matrix). Output distance_matrix_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_matrix_orthogonal_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Compute Orthogonal Least Cost Matrix from a Distance Matrix — cost_matrix_orthogonal_cpp","text":"Least cost matrix.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Least Cost Path — cost_path_cpp","title":"Least Cost Path — cost_path_cpp","text":"Least cost path two time series x y. NA values must removed x y using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least Cost Path — cost_path_cpp","text":"","code":"cost_path_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   bandwidth = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least Cost Path — cost_path_cpp","text":"x (required, numeric matrix) multivariate time series. y (required, numeric matrix) multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted y factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Least Cost Path — cost_path_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Orthogonal and Diagonal Least Cost Path — cost_path_diagonal_cpp","title":"(C++) Orthogonal and Diagonal Least Cost Path — cost_path_diagonal_cpp","text":"Computes least cost matrix distance matrix. Considers diagonals computation least-costs. case ties, diagonals favored.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Orthogonal and Diagonal Least Cost Path — cost_path_diagonal_cpp","text":"","code":"cost_path_diagonal_cpp(dist_matrix, cost_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Orthogonal and Diagonal Least Cost Path — cost_path_diagonal_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Cost matrix generated dist_matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Orthogonal and Diagonal Least Cost Path — cost_path_diagonal_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Orthogonal and Diagonal Least Cost Path — cost_path_diagonal_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_diagonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2    99  99 0.7648549 65.0343113 #> 3    98  98 0.6320462 63.5887700 #> 4    97  97 0.6777913 62.5184229 #> 5    96  96 0.6215667 61.2049937 #> 6    95  95 0.5904734 60.0198369 #> 7    94  94 0.5674837 58.8738118 #> 8    93  93 0.5636236 57.9576445 #> 9    92  92 0.5285802 56.9145449 #> 10   91  92 0.5443292 56.3859647 #> 11   90  92 0.4135332 55.8416355 #> 12   89  92 0.5039765 55.4281023 #> 13   88  92 0.5108834 54.9241258 #> 14   87  92 0.5230073 54.4132424 #> 15   86  91 0.5478903 53.8710065 #> 16   85  90 0.5387814 52.8671347 #> 17   84  89 0.6283737 51.9734536 #> 18   83  88 0.5491395 50.7950872 #> 19   82  87 0.5427198 50.1626329 #> 20   81  86 0.4458249 49.5607198 #> 21   80  86 0.4561570 49.1148949 #> 22   79  86 0.6058592 48.6587378 #> 23   78  85 0.5548788 48.0424610 #> 24   77  85 0.5108495 47.4875822 #> 25   76  84 0.5278081 46.9328961 #> 26   75  83 0.2749964 46.1840836 #> 27   74  82 0.3362982 45.8501683 #> 28   73  82 0.2755243 45.5138701 #> 29   72  82 0.2580913 45.2383457 #> 30   71  82 0.2466212 44.9802545 #> 31   70  82 0.2101682 44.7336333 #> 32   69  82 0.2373155 44.5234652 #> 33   68  82 0.2261700 44.2861497 #> 34   67  82 0.2031087 44.0599797 #> 35   66  82 0.1502621 43.8568710 #> 36   65  82 0.1305400 43.7066088 #> 37   64  82 0.1506714 43.5760688 #> 38   63  82 0.1762334 43.4253974 #> 39   62  82 0.1629928 43.2491640 #> 40   61  82 0.1612566 43.0861712 #> 41   60  82 0.1526246 42.9249147 #> 42   59  82 0.1434672 42.7722900 #> 43   58  82 0.1726055 42.6288228 #> 44   57  82 0.1296162 42.4562173 #> 45   56  82 0.2352345 42.3266012 #> 46   55  82 0.1600529 42.0913666 #> 47   54  82 0.1674942 41.9313137 #> 48   53  82 0.1540136 41.7638195 #> 49   52  82 0.1344377 41.6098058 #> 50   51  82 0.1418574 41.4753681 #> 51   50  82 0.1646179 41.3335107 #> 52   49  82 0.1936073 41.1688929 #> 53   48  82 0.1593103 40.9752856 #> 54   47  81 0.2380341 40.7828032 #> 55   46  80 0.2603981 40.3623305 #> 56   45  79 0.2337894 39.9922269 #> 57   44  78 0.2522322 39.5952233 #> 58   43  77 0.1743998 39.1583134 #> 59   42  76 0.2114731 38.9504137 #> 60   41  75 0.3089992 38.6840963 #> 61   40  74 0.3313175 38.1237119 #> 62   39  73 0.3631816 37.5619956 #> 63   38  72 0.3045351 36.9818444 #> 64   37  71 0.2396572 36.4507223 #> 65   36  70 0.1722297 36.0914306 #> 66   35  69 0.1440328 35.8244977 #> 67   35  68 0.1674252 35.6804649 #> 68   35  67 0.1786501 35.5130397 #> 69   35  66 0.1855774 35.3343896 #> 70   34  65 0.2061691 35.1081678 #> 71   33  64 0.1756490 34.7420115 #> 72   32  63 0.2995759 34.5006863 #> 73   31  62 0.2687903 33.9213091 #> 74   30  61 0.3267435 33.4793163 #> 75   29  60 0.2318210 32.8600078 #> 76   28  59 0.2170579 32.4780512 #> 77   28  58 0.2000520 32.2609933 #> 78   28  57 0.1736652 32.0609413 #> 79   28  56 0.2224500 31.8872762 #> 80   28  55 0.2671070 31.6648262 #> 81   28  54 0.2832049 31.3977192 #> 82   28  53 0.2639180 31.1145142 #> 83   28  52 0.2259958 30.8505963 #> 84   28  51 0.2121769 30.6246004 #> 85   28  50 0.1981827 30.4124235 #> 86   28  49 0.2011492 30.2142408 #> 87   28  48 0.2321620 30.0130917 #> 88   28  47 0.2843064 29.7809297 #> 89   28  46 0.2752997 29.4966233 #> 90   28  45 0.2724771 29.2213236 #> 91   28  44 0.2632239 28.9488465 #> 92   28  43 0.2831713 28.6856227 #> 93   28  42 0.3172355 28.4024514 #> 94   28  41 0.3024352 28.0852159 #> 95   28  40 0.3443351 27.7827807 #> 96   28  39 0.2905489 27.4384455 #> 97   28  38 0.3372605 27.1478966 #> 98   28  37 0.3560955 26.8106361 #> 99   28  36 0.3602208 26.4545406 #> 100  28  35 0.3714868 26.0943198 #> 101  28  34 0.3744984 25.7228330 #> 102  28  33 0.4085635 25.3483346 #> 103  28  32 0.3766831 24.9397711 #> 104  28  31 0.3424833 24.5630880 #> 105  28  30 0.3805911 24.2206047 #> 106  28  29 0.3524106 23.8400136 #> 107  28  28 0.3770721 23.4876031 #> 108  28  27 0.3917478 23.1105309 #> 109  28  26 0.4113225 22.7187831 #> 110  28  25 0.4055345 22.3074607 #> 111  28  24 0.4614801 21.9019262 #> 112  28  23 0.4232874 21.4404461 #> 113  28  22 0.3757436 21.0171587 #> 114  28  21 0.3505313 20.6414151 #> 115  28  20 0.3495128 20.2908837 #> 116  28  19 0.3387319 19.9413709 #> 117  28  18 0.3872206 19.6026390 #> 118  27  17 0.4057451 19.1673382 #> 119  27  16 0.3575246 18.7615932 #> 120  26  15 0.4855975 18.3344463 #> 121  26  14 0.4861830 17.8488487 #> 122  25  13 0.4680005 17.2726716 #> 123  24  12 0.5080264 16.5225224 #> 124  23  11 0.5276057 15.6622155 #> 125  22  10 0.4691932 14.6882277 #> 126  21  10 0.4937712 14.2190345 #> 127  20  10 0.5184232 13.7252633 #> 128  19  10 0.5520151 13.2068401 #> 129  18  10 0.5284255 12.6548250 #> 130  17  10 0.5819680 12.1263995 #> 131  16  10 0.4882528 11.5444315 #> 132  15  10 0.5451257 11.0561787 #> 133  14  10 0.5789974 10.5110529 #> 134  13   9 0.5616895  9.8869043 #> 135  12   9 0.5379617  9.3252149 #> 136  11   8 0.5804374  8.7376186 #> 137  10   7 0.5918210  8.0269721 #> 138   9   6 0.5530716  7.1489267 #> 139   8   5 0.5931723  6.2663526 #> 140   7   4 0.5099716  5.2771827 #> 141   6   3 0.5493263  4.3870978 #> 142   5   2 0.5387187  3.3114509 #> 143   4   1 0.5374539  2.3329749 #> 144   3   1 0.5176733  1.7955210 #> 145   2   1 0.6144512  1.2778477 #> 146   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_itakura_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Orthogonal and Diagonal Least Cost Path Restricted by Itakura Parallelogram — cost_path_diagonal_itakura_cpp","title":"(C++) Orthogonal and Diagonal Least Cost Path Restricted by Itakura Parallelogram — cost_path_diagonal_itakura_cpp","text":"Computes least cost matrix distance matrix. Considers diagonals computation least-costs. case ties, diagonals favored.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_itakura_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Orthogonal and Diagonal Least Cost Path Restricted by Itakura Parallelogram — cost_path_diagonal_itakura_cpp","text":"","code":"cost_path_diagonal_itakura_cpp(dist_matrix, cost_matrix, bandwidth = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_itakura_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Orthogonal and Diagonal Least Cost Path Restricted by Itakura Parallelogram — cost_path_diagonal_itakura_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Cost matrix generated dist_matrix. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_itakura_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Orthogonal and Diagonal Least Cost Path Restricted by Itakura Parallelogram — cost_path_diagonal_itakura_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_diagonal_itakura_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Orthogonal and Diagonal Least Cost Path Restricted by Itakura Parallelogram — cost_path_diagonal_itakura_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_diagonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2    99  99 0.7648549 65.0343113 #> 3    98  98 0.6320462 63.5887700 #> 4    97  97 0.6777913 62.5184229 #> 5    96  96 0.6215667 61.2049937 #> 6    95  95 0.5904734 60.0198369 #> 7    94  94 0.5674837 58.8738118 #> 8    93  93 0.5636236 57.9576445 #> 9    92  92 0.5285802 56.9145449 #> 10   91  92 0.5443292 56.3859647 #> 11   90  92 0.4135332 55.8416355 #> 12   89  92 0.5039765 55.4281023 #> 13   88  92 0.5108834 54.9241258 #> 14   87  92 0.5230073 54.4132424 #> 15   86  91 0.5478903 53.8710065 #> 16   85  90 0.5387814 52.8671347 #> 17   84  89 0.6283737 51.9734536 #> 18   83  88 0.5491395 50.7950872 #> 19   82  87 0.5427198 50.1626329 #> 20   81  86 0.4458249 49.5607198 #> 21   80  86 0.4561570 49.1148949 #> 22   79  86 0.6058592 48.6587378 #> 23   78  85 0.5548788 48.0424610 #> 24   77  85 0.5108495 47.4875822 #> 25   76  84 0.5278081 46.9328961 #> 26   75  83 0.2749964 46.1840836 #> 27   74  82 0.3362982 45.8501683 #> 28   73  82 0.2755243 45.5138701 #> 29   72  82 0.2580913 45.2383457 #> 30   71  82 0.2466212 44.9802545 #> 31   70  82 0.2101682 44.7336333 #> 32   69  82 0.2373155 44.5234652 #> 33   68  82 0.2261700 44.2861497 #> 34   67  82 0.2031087 44.0599797 #> 35   66  82 0.1502621 43.8568710 #> 36   65  82 0.1305400 43.7066088 #> 37   64  82 0.1506714 43.5760688 #> 38   63  82 0.1762334 43.4253974 #> 39   62  82 0.1629928 43.2491640 #> 40   61  82 0.1612566 43.0861712 #> 41   60  82 0.1526246 42.9249147 #> 42   59  82 0.1434672 42.7722900 #> 43   58  82 0.1726055 42.6288228 #> 44   57  82 0.1296162 42.4562173 #> 45   56  82 0.2352345 42.3266012 #> 46   55  82 0.1600529 42.0913666 #> 47   54  82 0.1674942 41.9313137 #> 48   53  82 0.1540136 41.7638195 #> 49   52  82 0.1344377 41.6098058 #> 50   51  82 0.1418574 41.4753681 #> 51   50  82 0.1646179 41.3335107 #> 52   49  82 0.1936073 41.1688929 #> 53   48  82 0.1593103 40.9752856 #> 54   47  81 0.2380341 40.7828032 #> 55   46  80 0.2603981 40.3623305 #> 56   45  79 0.2337894 39.9922269 #> 57   44  78 0.2522322 39.5952233 #> 58   43  77 0.1743998 39.1583134 #> 59   42  76 0.2114731 38.9504137 #> 60   41  75 0.3089992 38.6840963 #> 61   40  74 0.3313175 38.1237119 #> 62   39  73 0.3631816 37.5619956 #> 63   38  72 0.3045351 36.9818444 #> 64   37  71 0.2396572 36.4507223 #> 65   36  70 0.1722297 36.0914306 #> 66   35  69 0.1440328 35.8244977 #> 67   35  68 0.1674252 35.6804649 #> 68   35  67 0.1786501 35.5130397 #> 69   35  66 0.1855774 35.3343896 #> 70   34  65 0.2061691 35.1081678 #> 71   33  64 0.1756490 34.7420115 #> 72   32  63 0.2995759 34.5006863 #> 73   31  62 0.2687903 33.9213091 #> 74   30  61 0.3267435 33.4793163 #> 75   29  60 0.2318210 32.8600078 #> 76   28  59 0.2170579 32.4780512 #> 77   28  58 0.2000520 32.2609933 #> 78   28  57 0.1736652 32.0609413 #> 79   28  56 0.2224500 31.8872762 #> 80   28  55 0.2671070 31.6648262 #> 81   28  54 0.2832049 31.3977192 #> 82   28  53 0.2639180 31.1145142 #> 83   28  52 0.2259958 30.8505963 #> 84   28  51 0.2121769 30.6246004 #> 85   28  50 0.1981827 30.4124235 #> 86   28  49 0.2011492 30.2142408 #> 87   28  48 0.2321620 30.0130917 #> 88   28  47 0.2843064 29.7809297 #> 89   28  46 0.2752997 29.4966233 #> 90   28  45 0.2724771 29.2213236 #> 91   28  44 0.2632239 28.9488465 #> 92   28  43 0.2831713 28.6856227 #> 93   28  42 0.3172355 28.4024514 #> 94   28  41 0.3024352 28.0852159 #> 95   28  40 0.3443351 27.7827807 #> 96   28  39 0.2905489 27.4384455 #> 97   28  38 0.3372605 27.1478966 #> 98   28  37 0.3560955 26.8106361 #> 99   28  36 0.3602208 26.4545406 #> 100  28  35 0.3714868 26.0943198 #> 101  28  34 0.3744984 25.7228330 #> 102  28  33 0.4085635 25.3483346 #> 103  28  32 0.3766831 24.9397711 #> 104  28  31 0.3424833 24.5630880 #> 105  28  30 0.3805911 24.2206047 #> 106  28  29 0.3524106 23.8400136 #> 107  28  28 0.3770721 23.4876031 #> 108  28  27 0.3917478 23.1105309 #> 109  28  26 0.4113225 22.7187831 #> 110  28  25 0.4055345 22.3074607 #> 111  28  24 0.4614801 21.9019262 #> 112  28  23 0.4232874 21.4404461 #> 113  28  22 0.3757436 21.0171587 #> 114  28  21 0.3505313 20.6414151 #> 115  28  20 0.3495128 20.2908837 #> 116  28  19 0.3387319 19.9413709 #> 117  28  18 0.3872206 19.6026390 #> 118  27  17 0.4057451 19.1673382 #> 119  27  16 0.3575246 18.7615932 #> 120  26  15 0.4855975 18.3344463 #> 121  26  14 0.4861830 17.8488487 #> 122  25  13 0.4680005 17.2726716 #> 123  24  12 0.5080264 16.5225224 #> 124  23  11 0.5276057 15.6622155 #> 125  22  10 0.4691932 14.6882277 #> 126  21  10 0.4937712 14.2190345 #> 127  20  10 0.5184232 13.7252633 #> 128  19  10 0.5520151 13.2068401 #> 129  18  10 0.5284255 12.6548250 #> 130  17  10 0.5819680 12.1263995 #> 131  16  10 0.4882528 11.5444315 #> 132  15  10 0.5451257 11.0561787 #> 133  14  10 0.5789974 10.5110529 #> 134  13   9 0.5616895  9.8869043 #> 135  12   9 0.5379617  9.3252149 #> 136  11   8 0.5804374  8.7376186 #> 137  10   7 0.5918210  8.0269721 #> 138   9   6 0.5530716  7.1489267 #> 139   8   5 0.5931723  6.2663526 #> 140   7   4 0.5099716  5.2771827 #> 141   6   3 0.5493263  4.3870978 #> 142   5   2 0.5387187  3.3114509 #> 143   4   1 0.5374539  2.3329749 #> 144   3   1 0.5176733  1.7955210 #> 145   2   1 0.6144512  1.2778477 #> 146   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_cpp","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_cpp","text":"Computes orthogonal least-cost path within cost matrix. steps within least-cost path either moves x y direction, never diagonally.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_cpp","text":"","code":"cost_path_orthogonal_cpp(dist_matrix, cost_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Cost matrix generated dist_matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2   100  99 0.7161694 65.5663746 #> 3   100  98 0.6821893 64.8502052 #> 4   100  97 0.6874341 64.1680159 #> 5   100  96 0.6409757 63.4805819 #> 6   100  95 0.6222391 62.8396061 #> 7   100  94 0.5760614 62.2173671 #> 8   100  93 0.5696817 61.6413056 #> 9   100  92 0.5130193 61.0716239 #> 10   99  92 0.5365579 60.5586046 #> 11   98  92 0.4842729 60.0220467 #> 12   97  92 0.5063508 59.5377738 #> 13   96  92 0.5065797 59.0314230 #> 14   95  92 0.5285806 58.5248433 #> 15   94  92 0.5537613 57.9962626 #> 16   93  92 0.5279564 57.4425013 #> 17   92  92 0.5285802 56.9145449 #> 18   91  92 0.5443292 56.3859647 #> 19   90  92 0.4135332 55.8416355 #> 20   89  92 0.5039765 55.4281023 #> 21   88  92 0.5108834 54.9241258 #> 22   87  92 0.5230073 54.4132424 #> 23   86  92 0.5245394 53.8902351 #> 24   85  92 0.5034589 53.3656958 #> 25   84  92 0.5519456 52.8622369 #> 26   83  92 0.5296750 52.3102913 #> 27   82  92 0.5044439 51.7806162 #> 28   81  92 0.4569037 51.2761724 #> 29   80  92 0.4553854 50.8192686 #> 30   79  92 0.5364900 50.3638833 #> 31   78  92 0.4961084 49.8273933 #> 32   77  92 0.4352922 49.3312849 #> 33   76  92 0.4666304 48.8959928 #> 34   75  92 0.4616177 48.4293624 #> 35   74  92 0.3890522 47.9677447 #> 36   74  91 0.3405644 47.5786924 #> 37   74  90 0.3108773 47.2381280 #> 38   74  89 0.2788660 46.9272508 #> 39   74  88 0.2210212 46.6483848 #> 40   74  87 0.2117861 46.4273636 #> 41   73  87 0.1793031 46.2155775 #> 42   72  87 0.1897519 46.0362744 #> 43   71  87 0.1806690 45.8465225 #> 44   70  87 0.1951448 45.6658535 #> 45   70  86 0.1922087 45.4707087 #> 46   70  85 0.2126529 45.2785000 #> 47   70  84 0.2013065 45.0658471 #> 48   69  84 0.2369120 44.8645406 #> 49   68  84 0.2388685 44.6276286 #> 50   67  84 0.2120945 44.3887601 #> 51   66  84 0.1740653 44.1766656 #> 52   65  84 0.1460344 44.0026003 #> 53   64  84 0.1752535 43.8565659 #> 54   63  84 0.1988074 43.6813124 #> 55   62  84 0.1804145 43.4825050 #> 56   61  84 0.1764448 43.3020905 #> 57   60  84 0.1534586 43.1256457 #> 58   59  84 0.1526458 42.9721871 #> 59   58  84 0.1617319 42.8195412 #> 60   57  84 0.1282278 42.6578093 #> 61   56  84 0.2262139 42.5295815 #> 62   55  84 0.1591592 42.3033677 #> 63   54  84 0.1537377 42.1442085 #> 64   53  84 0.1346854 41.9904708 #> 65   52  84 0.1251040 41.8557854 #> 66   52  83 0.1411702 41.7306814 #> 67   51  83 0.1141431 41.5895112 #> 68   51  82 0.1418574 41.4753681 #> 69   50  82 0.1646179 41.3335107 #> 70   49  82 0.1936073 41.1688929 #> 71   48  82 0.1593103 40.9752856 #> 72   47  82 0.1801237 40.8159754 #> 73   46  82 0.1858304 40.6358517 #> 74   45  82 0.2078866 40.4500213 #> 75   44  82 0.2071551 40.2421347 #> 76   43  82 0.1588663 40.0349796 #> 77   43  81 0.1782292 39.8761133 #> 78   43  80 0.1676922 39.6978841 #> 79   43  79 0.1872008 39.5301919 #> 80   43  78 0.1846777 39.3429910 #> 81   43  77 0.1743998 39.1583134 #> 82   43  76 0.1675317 38.9839135 #> 83   43  75 0.2037025 38.8163818 #> 84   43  74 0.2177045 38.6126793 #> 85   43  73 0.2479942 38.3949749 #> 86   43  72 0.2327807 38.1469807 #> 87   42  72 0.2238950 37.9142000 #> 88   41  72 0.2529557 37.6903050 #> 89   40  72 0.2385352 37.4373493 #> 90   39  72 0.2314280 37.1988140 #> 91   39  71 0.2857965 36.9673861 #> 92   39  70 0.2457342 36.6815896 #> 93   38  70 0.2247903 36.4358554 #> 94   37  70 0.1502859 36.2110651 #> 95   37  69 0.1795865 36.0607792 #> 96   37  68 0.1642340 35.8811927 #> 97   37  67 0.1741271 35.7169587 #> 98   37  66 0.1624438 35.5428316 #> 99   37  65 0.1691243 35.3803878 #> 100  36  65 0.1518868 35.2112635 #> 101  36  64 0.1357962 35.0593767 #> 102  36  63 0.1166018 34.9235804 #> 103  36  62 0.1149776 34.8069786 #> 104  36  61 0.1339489 34.6920010 #> 105  35  61 0.1574512 34.5580521 #> 106  34  61 0.2326869 34.4006009 #> 107  33  61 0.2148496 34.1679141 #> 108  32  61 0.3005456 33.9530645 #> 109  31  61 0.2575778 33.6525189 #> 110  31  60 0.2423684 33.3949411 #> 111  30  60 0.2925649 33.1525727 #> 112  29  60 0.2318210 32.8600078 #> 113  29  59 0.2251552 32.6281867 #> 114  29  58 0.2169255 32.4030315 #> 115  29  57 0.1831173 32.1861061 #> 116  29  56 0.2093290 32.0029887 #> 117  29  55 0.2522001 31.7936598 #> 118  29  54 0.2679934 31.5414597 #> 119  29  53 0.2475634 31.2734662 #> 120  29  52 0.2070829 31.0259028 #> 121  29  51 0.2090501 30.8188199 #> 122  29  50 0.1973464 30.6097699 #> 123  28  50 0.1981827 30.4124235 #> 124  28  49 0.2011492 30.2142408 #> 125  28  48 0.2321620 30.0130917 #> 126  28  47 0.2843064 29.7809297 #> 127  28  46 0.2752997 29.4966233 #> 128  28  45 0.2724771 29.2213236 #> 129  28  44 0.2632239 28.9488465 #> 130  28  43 0.2831713 28.6856227 #> 131  28  42 0.3172355 28.4024514 #> 132  28  41 0.3024352 28.0852159 #> 133  28  40 0.3443351 27.7827807 #> 134  28  39 0.2905489 27.4384455 #> 135  28  38 0.3372605 27.1478966 #> 136  28  37 0.3560955 26.8106361 #> 137  28  36 0.3602208 26.4545406 #> 138  28  35 0.3714868 26.0943198 #> 139  28  34 0.3744984 25.7228330 #> 140  28  33 0.4085635 25.3483346 #> 141  28  32 0.3766831 24.9397711 #> 142  28  31 0.3424833 24.5630880 #> 143  28  30 0.3805911 24.2206047 #> 144  28  29 0.3524106 23.8400136 #> 145  28  28 0.3770721 23.4876031 #> 146  28  27 0.3917478 23.1105309 #> 147  28  26 0.4113225 22.7187831 #> 148  28  25 0.4055345 22.3074607 #> 149  28  24 0.4614801 21.9019262 #> 150  28  23 0.4232874 21.4404461 #> 151  28  22 0.3757436 21.0171587 #> 152  28  21 0.3505313 20.6414151 #> 153  28  20 0.3495128 20.2908837 #> 154  28  19 0.3387319 19.9413709 #> 155  28  18 0.3872206 19.6026390 #> 156  28  17 0.3471985 19.2154184 #> 157  28  16 0.3018819 18.8682199 #> 158  28  15 0.3426634 18.5663380 #> 159  28  14 0.3568688 18.2236746 #> 160  28  13 0.3037264 17.8668058 #> 161  28  12 0.3423200 17.5630794 #> 162  28  11 0.3280436 17.2207594 #> 163  28  10 0.3383397 16.8927157 #> 164  27  10 0.3358649 16.5543760 #> 165  26  10 0.3165562 16.2185111 #> 166  25  10 0.3677074 15.9019548 #> 167  24  10 0.3996376 15.5342474 #> 168  23  10 0.4463821 15.1346098 #> 169  22  10 0.4691932 14.6882277 #> 170  21  10 0.4937712 14.2190345 #> 171  20  10 0.5184232 13.7252633 #> 172  19  10 0.5520151 13.2068401 #> 173  18  10 0.5284255 12.6548250 #> 174  17  10 0.5819680 12.1263995 #> 175  16  10 0.4882528 11.5444315 #> 176  15  10 0.5451257 11.0561787 #> 177  14  10 0.5789974 10.5110529 #> 178  13  10 0.5093922  9.9320556 #> 179  12  10 0.4821676  9.4226633 #> 180  11  10 0.4692307  8.9404957 #> 181  10  10 0.4247215  8.4712650 #> 182   9  10 0.4053145  8.0465435 #> 183   8  10 0.3998707  7.6412291 #> 184   7  10 0.3402029  7.2413584 #> 185   7   9 0.3591259  6.9011555 #> 186   6   9 0.3618647  6.5420296 #> 187   5   9 0.3975981  6.1801649 #> 188   4   9 0.3812121  5.7825668 #> 189   3   9 0.3950188  5.4013548 #> 190   3   8 0.4043094  5.0063360 #> 191   3   7 0.4232290  4.6020265 #> 192   3   6 0.4405291  4.1787976 #> 193   3   5 0.4604920  3.7382684 #> 194   3   4 0.4791459  3.2777764 #> 195   3   3 0.5131015  2.7986305 #> 196   3   2 0.4900080  2.2855290 #> 197   3   1 0.5176733  1.7955210 #> 198   2   1 0.6144512  1.2778477 #> 199   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_itakura_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_itakura_cpp","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_itakura_cpp","text":"Computes orthogonal least-cost path within cost matrix. steps within least-cost path either moves x y direction, never diagonally.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_itakura_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_itakura_cpp","text":"","code":"cost_path_orthogonal_itakura_cpp(dist_matrix, cost_matrix, bandwidth = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_itakura_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_itakura_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Cost matrix generated dist_matrix. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_itakura_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_itakura_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_orthogonal_itakura_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Orthogonal Least Cost Path — cost_path_orthogonal_itakura_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_orthogonal_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2   100  99 0.7161694 65.5663746 #> 3   100  98 0.6821893 64.8502052 #> 4   100  97 0.6874341 64.1680159 #> 5   100  96 0.6409757 63.4805819 #> 6   100  95 0.6222391 62.8396061 #> 7   100  94 0.5760614 62.2173671 #> 8   100  93 0.5696817 61.6413056 #> 9   100  92 0.5130193 61.0716239 #> 10   99  92 0.5365579 60.5586046 #> 11   98  92 0.4842729 60.0220467 #> 12   97  92 0.5063508 59.5377738 #> 13   96  92 0.5065797 59.0314230 #> 14   95  92 0.5285806 58.5248433 #> 15   94  92 0.5537613 57.9962626 #> 16   93  92 0.5279564 57.4425013 #> 17   92  92 0.5285802 56.9145449 #> 18   91  92 0.5443292 56.3859647 #> 19   90  92 0.4135332 55.8416355 #> 20   89  92 0.5039765 55.4281023 #> 21   88  92 0.5108834 54.9241258 #> 22   87  92 0.5230073 54.4132424 #> 23   86  92 0.5245394 53.8902351 #> 24   85  92 0.5034589 53.3656958 #> 25   84  92 0.5519456 52.8622369 #> 26   83  92 0.5296750 52.3102913 #> 27   82  92 0.5044439 51.7806162 #> 28   81  92 0.4569037 51.2761724 #> 29   80  92 0.4553854 50.8192686 #> 30   79  92 0.5364900 50.3638833 #> 31   78  92 0.4961084 49.8273933 #> 32   77  92 0.4352922 49.3312849 #> 33   76  92 0.4666304 48.8959928 #> 34   75  92 0.4616177 48.4293624 #> 35   74  92 0.3890522 47.9677447 #> 36   74  91 0.3405644 47.5786924 #> 37   74  90 0.3108773 47.2381280 #> 38   74  89 0.2788660 46.9272508 #> 39   74  88 0.2210212 46.6483848 #> 40   74  87 0.2117861 46.4273636 #> 41   73  87 0.1793031 46.2155775 #> 42   72  87 0.1897519 46.0362744 #> 43   71  87 0.1806690 45.8465225 #> 44   70  87 0.1951448 45.6658535 #> 45   70  86 0.1922087 45.4707087 #> 46   70  85 0.2126529 45.2785000 #> 47   70  84 0.2013065 45.0658471 #> 48   69  84 0.2369120 44.8645406 #> 49   68  84 0.2388685 44.6276286 #> 50   67  84 0.2120945 44.3887601 #> 51   66  84 0.1740653 44.1766656 #> 52   65  84 0.1460344 44.0026003 #> 53   64  84 0.1752535 43.8565659 #> 54   63  84 0.1988074 43.6813124 #> 55   62  84 0.1804145 43.4825050 #> 56   61  84 0.1764448 43.3020905 #> 57   60  84 0.1534586 43.1256457 #> 58   59  84 0.1526458 42.9721871 #> 59   58  84 0.1617319 42.8195412 #> 60   57  84 0.1282278 42.6578093 #> 61   56  84 0.2262139 42.5295815 #> 62   55  84 0.1591592 42.3033677 #> 63   54  84 0.1537377 42.1442085 #> 64   53  84 0.1346854 41.9904708 #> 65   52  84 0.1251040 41.8557854 #> 66   52  83 0.1411702 41.7306814 #> 67   51  83 0.1141431 41.5895112 #> 68   51  82 0.1418574 41.4753681 #> 69   50  82 0.1646179 41.3335107 #> 70   49  82 0.1936073 41.1688929 #> 71   48  82 0.1593103 40.9752856 #> 72   47  82 0.1801237 40.8159754 #> 73   46  82 0.1858304 40.6358517 #> 74   45  82 0.2078866 40.4500213 #> 75   44  82 0.2071551 40.2421347 #> 76   43  82 0.1588663 40.0349796 #> 77   43  81 0.1782292 39.8761133 #> 78   43  80 0.1676922 39.6978841 #> 79   43  79 0.1872008 39.5301919 #> 80   43  78 0.1846777 39.3429910 #> 81   43  77 0.1743998 39.1583134 #> 82   43  76 0.1675317 38.9839135 #> 83   43  75 0.2037025 38.8163818 #> 84   43  74 0.2177045 38.6126793 #> 85   43  73 0.2479942 38.3949749 #> 86   43  72 0.2327807 38.1469807 #> 87   42  72 0.2238950 37.9142000 #> 88   41  72 0.2529557 37.6903050 #> 89   40  72 0.2385352 37.4373493 #> 90   39  72 0.2314280 37.1988140 #> 91   39  71 0.2857965 36.9673861 #> 92   39  70 0.2457342 36.6815896 #> 93   38  70 0.2247903 36.4358554 #> 94   37  70 0.1502859 36.2110651 #> 95   37  69 0.1795865 36.0607792 #> 96   37  68 0.1642340 35.8811927 #> 97   37  67 0.1741271 35.7169587 #> 98   37  66 0.1624438 35.5428316 #> 99   37  65 0.1691243 35.3803878 #> 100  36  65 0.1518868 35.2112635 #> 101  36  64 0.1357962 35.0593767 #> 102  36  63 0.1166018 34.9235804 #> 103  36  62 0.1149776 34.8069786 #> 104  36  61 0.1339489 34.6920010 #> 105  35  61 0.1574512 34.5580521 #> 106  34  61 0.2326869 34.4006009 #> 107  33  61 0.2148496 34.1679141 #> 108  32  61 0.3005456 33.9530645 #> 109  31  61 0.2575778 33.6525189 #> 110  31  60 0.2423684 33.3949411 #> 111  30  60 0.2925649 33.1525727 #> 112  29  60 0.2318210 32.8600078 #> 113  29  59 0.2251552 32.6281867 #> 114  29  58 0.2169255 32.4030315 #> 115  29  57 0.1831173 32.1861061 #> 116  29  56 0.2093290 32.0029887 #> 117  29  55 0.2522001 31.7936598 #> 118  29  54 0.2679934 31.5414597 #> 119  29  53 0.2475634 31.2734662 #> 120  29  52 0.2070829 31.0259028 #> 121  29  51 0.2090501 30.8188199 #> 122  29  50 0.1973464 30.6097699 #> 123  28  50 0.1981827 30.4124235 #> 124  28  49 0.2011492 30.2142408 #> 125  28  48 0.2321620 30.0130917 #> 126  28  47 0.2843064 29.7809297 #> 127  28  46 0.2752997 29.4966233 #> 128  28  45 0.2724771 29.2213236 #> 129  28  44 0.2632239 28.9488465 #> 130  28  43 0.2831713 28.6856227 #> 131  28  42 0.3172355 28.4024514 #> 132  28  41 0.3024352 28.0852159 #> 133  28  40 0.3443351 27.7827807 #> 134  28  39 0.2905489 27.4384455 #> 135  28  38 0.3372605 27.1478966 #> 136  28  37 0.3560955 26.8106361 #> 137  28  36 0.3602208 26.4545406 #> 138  28  35 0.3714868 26.0943198 #> 139  28  34 0.3744984 25.7228330 #> 140  28  33 0.4085635 25.3483346 #> 141  28  32 0.3766831 24.9397711 #> 142  28  31 0.3424833 24.5630880 #> 143  28  30 0.3805911 24.2206047 #> 144  28  29 0.3524106 23.8400136 #> 145  28  28 0.3770721 23.4876031 #> 146  28  27 0.3917478 23.1105309 #> 147  28  26 0.4113225 22.7187831 #> 148  28  25 0.4055345 22.3074607 #> 149  28  24 0.4614801 21.9019262 #> 150  28  23 0.4232874 21.4404461 #> 151  28  22 0.3757436 21.0171587 #> 152  28  21 0.3505313 20.6414151 #> 153  28  20 0.3495128 20.2908837 #> 154  28  19 0.3387319 19.9413709 #> 155  28  18 0.3872206 19.6026390 #> 156  28  17 0.3471985 19.2154184 #> 157  28  16 0.3018819 18.8682199 #> 158  28  15 0.3426634 18.5663380 #> 159  28  14 0.3568688 18.2236746 #> 160  28  13 0.3037264 17.8668058 #> 161  28  12 0.3423200 17.5630794 #> 162  28  11 0.3280436 17.2207594 #> 163  28  10 0.3383397 16.8927157 #> 164  27  10 0.3358649 16.5543760 #> 165  26  10 0.3165562 16.2185111 #> 166  25  10 0.3677074 15.9019548 #> 167  24  10 0.3996376 15.5342474 #> 168  23  10 0.4463821 15.1346098 #> 169  22  10 0.4691932 14.6882277 #> 170  21  10 0.4937712 14.2190345 #> 171  20  10 0.5184232 13.7252633 #> 172  19  10 0.5520151 13.2068401 #> 173  18  10 0.5284255 12.6548250 #> 174  17  10 0.5819680 12.1263995 #> 175  16  10 0.4882528 11.5444315 #> 176  15  10 0.5451257 11.0561787 #> 177  14  10 0.5789974 10.5110529 #> 178  13  10 0.5093922  9.9320556 #> 179  12  10 0.4821676  9.4226633 #> 180  11  10 0.4692307  8.9404957 #> 181  10  10 0.4247215  8.4712650 #> 182   9  10 0.4053145  8.0465435 #> 183   8  10 0.3998707  7.6412291 #> 184   7  10 0.3402029  7.2413584 #> 185   7   9 0.3591259  6.9011555 #> 186   6   9 0.3618647  6.5420296 #> 187   5   9 0.3975981  6.1801649 #> 188   4   9 0.3812121  5.7825668 #> 189   3   9 0.3950188  5.4013548 #> 190   3   8 0.4043094  5.0063360 #> 191   3   7 0.4232290  4.6020265 #> 192   3   6 0.4405291  4.1787976 #> 193   3   5 0.4604920  3.7382684 #> 194   3   4 0.4791459  3.2777764 #> 195   3   3 0.5131015  2.7986305 #> 196   3   2 0.4900080  2.2855290 #> 197   3   1 0.5176733  1.7955210 #> 198   2   1 0.6144512  1.2778477 #> 199   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"Computes least-cost matrix distance matrix. version differs cost_path_orthogonal_cpp() way solves ties. case tie, cost_path_orthogonal_cpp() uses first neighbor satisfying minimum distance condition, function selects neighbor changes axis movement within least-cost matrix. function used anywhere within package, left future reference.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"","code":"cost_path_slotting_cpp(dist_matrix, cost_matrix)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"dist_matrix (required, numeric matrix). Distance matrix two time series. cost_matrix (required, numeric matrix). Least-cost matrix generated dist_matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_slotting_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Least Cost Path for Sequence Slotting — cost_path_slotting_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_slotting_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path #>       x   y      dist       cost #> 1   100 100 0.6934760 66.9232470 #> 2   100  99 0.7161694 65.5663746 #> 3   100  98 0.6821893 64.8502052 #> 4   100  97 0.6874341 64.1680159 #> 5   100  96 0.6409757 63.4805819 #> 6   100  95 0.6222391 62.8396061 #> 7   100  94 0.5760614 62.2173671 #> 8   100  93 0.5696817 61.6413056 #> 9   100  92 0.5130193 61.0716239 #> 10   99  92 0.5365579 60.5586046 #> 11   98  92 0.4842729 60.0220467 #> 12   97  92 0.5063508 59.5377738 #> 13   96  92 0.5065797 59.0314230 #> 14   95  92 0.5285806 58.5248433 #> 15   94  92 0.5537613 57.9962626 #> 16   93  92 0.5279564 57.4425013 #> 17   92  92 0.5285802 56.9145449 #> 18   91  92 0.5443292 56.3859647 #> 19   90  92 0.4135332 55.8416355 #> 20   89  92 0.5039765 55.4281023 #> 21   88  92 0.5108834 54.9241258 #> 22   87  92 0.5230073 54.4132424 #> 23   86  92 0.5245394 53.8902351 #> 24   85  92 0.5034589 53.3656958 #> 25   84  92 0.5519456 52.8622369 #> 26   83  92 0.5296750 52.3102913 #> 27   82  92 0.5044439 51.7806162 #> 28   81  92 0.4569037 51.2761724 #> 29   80  92 0.4553854 50.8192686 #> 30   79  92 0.5364900 50.3638833 #> 31   78  92 0.4961084 49.8273933 #> 32   77  92 0.4352922 49.3312849 #> 33   76  92 0.4666304 48.8959928 #> 34   75  92 0.4616177 48.4293624 #> 35   74  92 0.3890522 47.9677447 #> 36   74  91 0.3405644 47.5786924 #> 37   74  90 0.3108773 47.2381280 #> 38   74  89 0.2788660 46.9272508 #> 39   74  88 0.2210212 46.6483848 #> 40   74  87 0.2117861 46.4273636 #> 41   73  87 0.1793031 46.2155775 #> 42   72  87 0.1897519 46.0362744 #> 43   71  87 0.1806690 45.8465225 #> 44   70  87 0.1951448 45.6658535 #> 45   70  86 0.1922087 45.4707087 #> 46   70  85 0.2126529 45.2785000 #> 47   70  84 0.2013065 45.0658471 #> 48   69  84 0.2369120 44.8645406 #> 49   68  84 0.2388685 44.6276286 #> 50   67  84 0.2120945 44.3887601 #> 51   66  84 0.1740653 44.1766656 #> 52   65  84 0.1460344 44.0026003 #> 53   64  84 0.1752535 43.8565659 #> 54   63  84 0.1988074 43.6813124 #> 55   62  84 0.1804145 43.4825050 #> 56   61  84 0.1764448 43.3020905 #> 57   60  84 0.1534586 43.1256457 #> 58   59  84 0.1526458 42.9721871 #> 59   58  84 0.1617319 42.8195412 #> 60   57  84 0.1282278 42.6578093 #> 61   56  84 0.2262139 42.5295815 #> 62   55  84 0.1591592 42.3033677 #> 63   54  84 0.1537377 42.1442085 #> 64   53  84 0.1346854 41.9904708 #> 65   52  84 0.1251040 41.8557854 #> 66   52  83 0.1411702 41.7306814 #> 67   51  83 0.1141431 41.5895112 #> 68   51  82 0.1418574 41.4753681 #> 69   50  82 0.1646179 41.3335107 #> 70   49  82 0.1936073 41.1688929 #> 71   48  82 0.1593103 40.9752856 #> 72   47  82 0.1801237 40.8159754 #> 73   46  82 0.1858304 40.6358517 #> 74   45  82 0.2078866 40.4500213 #> 75   44  82 0.2071551 40.2421347 #> 76   43  82 0.1588663 40.0349796 #> 77   43  81 0.1782292 39.8761133 #> 78   43  80 0.1676922 39.6978841 #> 79   43  79 0.1872008 39.5301919 #> 80   43  78 0.1846777 39.3429910 #> 81   43  77 0.1743998 39.1583134 #> 82   43  76 0.1675317 38.9839135 #> 83   43  75 0.2037025 38.8163818 #> 84   43  74 0.2177045 38.6126793 #> 85   43  73 0.2479942 38.3949749 #> 86   43  72 0.2327807 38.1469807 #> 87   42  72 0.2238950 37.9142000 #> 88   41  72 0.2529557 37.6903050 #> 89   40  72 0.2385352 37.4373493 #> 90   39  72 0.2314280 37.1988140 #> 91   39  71 0.2857965 36.9673861 #> 92   39  70 0.2457342 36.6815896 #> 93   38  70 0.2247903 36.4358554 #> 94   37  70 0.1502859 36.2110651 #> 95   37  69 0.1795865 36.0607792 #> 96   37  68 0.1642340 35.8811927 #> 97   37  67 0.1741271 35.7169587 #> 98   37  66 0.1624438 35.5428316 #> 99   37  65 0.1691243 35.3803878 #> 100  36  65 0.1518868 35.2112635 #> 101  36  64 0.1357962 35.0593767 #> 102  36  63 0.1166018 34.9235804 #> 103  36  62 0.1149776 34.8069786 #> 104  36  61 0.1339489 34.6920010 #> 105  35  61 0.1574512 34.5580521 #> 106  34  61 0.2326869 34.4006009 #> 107  33  61 0.2148496 34.1679141 #> 108  32  61 0.3005456 33.9530645 #> 109  31  61 0.2575778 33.6525189 #> 110  31  60 0.2423684 33.3949411 #> 111  30  60 0.2925649 33.1525727 #> 112  29  60 0.2318210 32.8600078 #> 113  29  59 0.2251552 32.6281867 #> 114  29  58 0.2169255 32.4030315 #> 115  29  57 0.1831173 32.1861061 #> 116  29  56 0.2093290 32.0029887 #> 117  29  55 0.2522001 31.7936598 #> 118  29  54 0.2679934 31.5414597 #> 119  29  53 0.2475634 31.2734662 #> 120  29  52 0.2070829 31.0259028 #> 121  29  51 0.2090501 30.8188199 #> 122  29  50 0.1973464 30.6097699 #> 123  28  50 0.1981827 30.4124235 #> 124  28  49 0.2011492 30.2142408 #> 125  28  48 0.2321620 30.0130917 #> 126  28  47 0.2843064 29.7809297 #> 127  28  46 0.2752997 29.4966233 #> 128  28  45 0.2724771 29.2213236 #> 129  28  44 0.2632239 28.9488465 #> 130  28  43 0.2831713 28.6856227 #> 131  28  42 0.3172355 28.4024514 #> 132  28  41 0.3024352 28.0852159 #> 133  28  40 0.3443351 27.7827807 #> 134  28  39 0.2905489 27.4384455 #> 135  28  38 0.3372605 27.1478966 #> 136  28  37 0.3560955 26.8106361 #> 137  28  36 0.3602208 26.4545406 #> 138  28  35 0.3714868 26.0943198 #> 139  28  34 0.3744984 25.7228330 #> 140  28  33 0.4085635 25.3483346 #> 141  28  32 0.3766831 24.9397711 #> 142  28  31 0.3424833 24.5630880 #> 143  28  30 0.3805911 24.2206047 #> 144  28  29 0.3524106 23.8400136 #> 145  28  28 0.3770721 23.4876031 #> 146  28  27 0.3917478 23.1105309 #> 147  28  26 0.4113225 22.7187831 #> 148  28  25 0.4055345 22.3074607 #> 149  28  24 0.4614801 21.9019262 #> 150  28  23 0.4232874 21.4404461 #> 151  28  22 0.3757436 21.0171587 #> 152  28  21 0.3505313 20.6414151 #> 153  28  20 0.3495128 20.2908837 #> 154  28  19 0.3387319 19.9413709 #> 155  28  18 0.3872206 19.6026390 #> 156  28  17 0.3471985 19.2154184 #> 157  28  16 0.3018819 18.8682199 #> 158  28  15 0.3426634 18.5663380 #> 159  28  14 0.3568688 18.2236746 #> 160  28  13 0.3037264 17.8668058 #> 161  28  12 0.3423200 17.5630794 #> 162  28  11 0.3280436 17.2207594 #> 163  28  10 0.3383397 16.8927157 #> 164  27  10 0.3358649 16.5543760 #> 165  26  10 0.3165562 16.2185111 #> 166  25  10 0.3677074 15.9019548 #> 167  24  10 0.3996376 15.5342474 #> 168  23  10 0.4463821 15.1346098 #> 169  22  10 0.4691932 14.6882277 #> 170  21  10 0.4937712 14.2190345 #> 171  20  10 0.5184232 13.7252633 #> 172  19  10 0.5520151 13.2068401 #> 173  18  10 0.5284255 12.6548250 #> 174  17  10 0.5819680 12.1263995 #> 175  16  10 0.4882528 11.5444315 #> 176  15  10 0.5451257 11.0561787 #> 177  14  10 0.5789974 10.5110529 #> 178  13  10 0.5093922  9.9320556 #> 179  12  10 0.4821676  9.4226633 #> 180  11  10 0.4692307  8.9404957 #> 181  10  10 0.4247215  8.4712650 #> 182   9  10 0.4053145  8.0465435 #> 183   8  10 0.3998707  7.6412291 #> 184   7  10 0.3402029  7.2413584 #> 185   7   9 0.3591259  6.9011555 #> 186   6   9 0.3618647  6.5420296 #> 187   5   9 0.3975981  6.1801649 #> 188   4   9 0.3812121  5.7825668 #> 189   3   9 0.3950188  5.4013548 #> 190   3   8 0.4043094  5.0063360 #> 191   3   7 0.4232290  4.6020265 #> 192   3   6 0.4405291  4.1787976 #> 193   3   5 0.4604920  3.7382684 #> 194   3   4 0.4791459  3.2777764 #> 195   3   3 0.5131015  2.7986305 #> 196   3   2 0.4900080  2.2855290 #> 197   3   1 0.5176733  1.7955210 #> 198   2   1 0.6144512  1.2778477 #> 199   1   1 0.6633965  0.6633965"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"(C++) Sum Distances Least Cost Path","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"","code":"cost_path_sum_cpp(path)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"path (required, data frame) least-cost path produced cost_path_orthogonal_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_sum_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum Distances in a Least Cost Path — cost_path_sum_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_slotting_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  cost_path_sum_cpp(   path = cost_path   ) #> [1] 66.25985"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"(C++) Remove Blocks Least Cost Path","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"","code":"cost_path_trim_cpp(path)"},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"path (required, data frame) least-cost path produced cost_path_orthogonal_cpp().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/cost_path_trim_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Remove Blocks from a Least Cost Path — cost_path_trim_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )  #least cost matrix cost_matrix <- cost_matrix_orthogonal_cpp(   dist_matrix = dist_matrix )  #least cost path cost_path <- cost_path_slotting_cpp(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  nrow(cost_path) #> [1] 199  #remove blocks from least-cost path cost_path_trimmed <- cost_path_trim_cpp(   path = cost_path )  nrow(cost_path_trimmed) #> [1] 29"},{"path":"https://blasbenito.github.io/distantia/reference/covid_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"County Coordinates of the Covid Prevalence Dataset — covid_counties","title":"County Coordinates of the Covid Prevalence Dataset — covid_counties","text":"County Coordinates Covid Prevalence Dataset","code":""},{"path":"https://blasbenito.github.io/distantia/reference/covid_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"County Coordinates of the Covid Prevalence Dataset — covid_counties","text":"","code":"data(covid_counties)"},{"path":"https://blasbenito.github.io/distantia/reference/covid_counties.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"County Coordinates of the Covid Prevalence Dataset — covid_counties","text":"sf data frame county polygons census data https://www.counties.org/data--research.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series of Covid Prevalence in California Counties — covid_prevalence","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"Dataset Covid19 maximum weekly prevalence California counties 2020 2024, healthdata.gov.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"","code":"data(covid_prevalence)"},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"data frame 3 columns 51048 rows","code":""},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"County polygons additional data dataset covid_counties. full dataset daily resolution can downloaded https://github.com/BlasBenito/distantia/blob/main/data_full/covid_prevalence.rda (use \"Download raw file\" button).","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/covid_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series of Covid Prevalence in California Counties — covid_prevalence","text":"","code":"#to time series list tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" )  #time series plot if(interactive()){   #subset to avoid margin errors  tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:4     ),   guide = FALSE   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Between Two Numeric Vectors — distance","title":"Distance Between Two Numeric Vectors — distance","text":"Computes distance two numeric vectors distance metric included data frame distantia::distances.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Between Two Numeric Vectors — distance","text":"","code":"distance(x = NULL, y = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Between Two Numeric Vectors — distance","text":"x (required, numeric vector). y (required, numeric vector) length x. distance (optional, character string) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Between Two Numeric Vectors — distance","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Between Two Numeric Vectors — distance","text":"","code":"distance(   x = runif(100),   y = runif(100),   distance = \"euclidean\" ) #> [1] 4.163744 #> attr(,\"distance\") #> [1] \"euclidean\""},{"path":"https://blasbenito.github.io/distantia/reference/distance_bray_curtis_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Bray-Curtis Distance Between Two Vectors — distance_bray_curtis_cpp","title":"(C++) Bray-Curtis Distance Between Two Vectors — distance_bray_curtis_cpp","text":"Computes Bray-Curtis distance, suitable species abundance data.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_bray_curtis_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Bray-Curtis Distance Between Two Vectors — distance_bray_curtis_cpp","text":"","code":"distance_bray_curtis_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_bray_curtis_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Bray-Curtis Distance Between Two Vectors — distance_bray_curtis_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_bray_curtis_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Bray-Curtis Distance Between Two Vectors — distance_bray_curtis_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_bray_curtis_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Bray-Curtis Distance Between Two Vectors — distance_bray_curtis_cpp","text":"","code":"distance_bray_curtis_cpp(x = runif(100), y = runif(100)) #> [1] 0.33584"},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"Computes Canberra distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"","code":"distance_canberra_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_canberra_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Canberra Distance Between Two Binary Vectors — distance_canberra_cpp","text":"","code":"distance_canberra_cpp(c(0, 1, 0, 1), c(1, 1, 0, 0)) #> [1] 2"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"Computed : max(abs(x - y)). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"","code":"distance_chebyshev_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_chebyshev_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Chebyshev Distance Between Two Vectors — distance_chebyshev_cpp","text":"","code":"distance_chebyshev_cpp(x = runif(100), y = runif(100)) #> [1] 0.9864401"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"Computed : xy <- x + y y. <- y / sum(y) x. <- x / sum(x) sqrt(sum(((x. - y.)^2) / (xy / sum(xy)))). handle NA values. x y zeros position, NaNs produced. Please replace zeros pseudo-zeros (.e. 0.0001) wish use distance metric.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"","code":"distance_chi_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_chi_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Normalized Chi Distance Between Two Vectors — distance_chi_cpp","text":"","code":"distance_chi_cpp(x = runif(100), y = runif(100)) #> [1] 0.8318236"},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"Computes cosine dissimilarity two numeric vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"","code":"distance_cosine_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_cosine_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Cosine Dissimilarity Between Two Vectors — distance_cosine_cpp","text":"","code":"distance_cosine_cpp(c(0.2, 0.4, 0.5), c(0.1, 0.8, 0.2)) #> [1] 0.2103732"},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"Computed : sqrt(sum((x - y)^2). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"","code":"distance_euclidean_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_euclidean_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Euclidean Distance Between Two Vectors — distance_euclidean_cpp","text":"","code":"distance_euclidean_cpp(x = runif(100), y = runif(100)) #> [1] 4.359382"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"Computes Hamming distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"","code":"distance_hamming_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_hamming_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Hamming Distance Between Two Binary Vectors — distance_hamming_cpp","text":"","code":"distance_hamming_cpp(c(0, 1, 0, 1), c(1, 1, 0, 0)) #> [1] 2"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"Computed : sqrt(1/2 * sum((sqrt(x) - sqrt(y))^2)). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"","code":"distance_hellinger_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_hellinger_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Hellinger Distance Between Two Vectors — distance_hellinger_cpp","text":"","code":"distance_hellinger_cpp(x = runif(100), y = runif(100)) #> [1] 2.492771"},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"Computes Jaccard distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"","code":"distance_jaccard_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_jaccard_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Jaccard Distance Between Two Binary Vectors — distance_jaccard_cpp","text":"","code":"distance_jaccard_cpp(x = c(0, 1, 0, 1), y = c(1, 1, 0, 0)) #> [1] 0.6666667"},{"path":"https://blasbenito.github.io/distantia/reference/distance_ls_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sum of Pairwise Distances Between Cases in Two Aligned Time Series — distance_ls_cpp","title":"(C++) Sum of Pairwise Distances Between Cases in Two Aligned Time Series — distance_ls_cpp","text":"Computes lock-step sum distances two regular aligned time series. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_ls_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sum of Pairwise Distances Between Cases in Two Aligned Time Series — distance_ls_cpp","text":"","code":"distance_ls_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance_ls_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sum of Pairwise Distances Between Cases in Two Aligned Time Series — distance_ls_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns rows 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_ls_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sum of Pairwise Distances Between Cases in Two Aligned Time Series — distance_ls_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_ls_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sum of Pairwise Distances Between Cases in Two Aligned Time Series — distance_ls_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   irregular = FALSE   ) y <- zoo_simulate(   seed = 2,   irregular = FALSE   )  #distance matrix dist_matrix <- distance_ls_cpp(   x = x,   y = y,   distance = \"euclidean\" )"},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"Computed : sum(abs(x - y)). handle NA values.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"","code":"distance_manhattan_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_manhattan_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Manhattan Distance Between Two Vectors — distance_manhattan_cpp","text":"","code":"distance_manhattan_cpp(x = runif(100), y = runif(100)) #> [1] 32.87435"},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame to Distance Matrix — distance_matrix","title":"Data Frame to Distance Matrix — distance_matrix","text":"Data Frame Distance Matrix","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame to Distance Matrix — distance_matrix","text":"","code":"distance_matrix(df = NULL, name_column = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame to Distance Matrix — distance_matrix","text":"df (required, data frame) Data frame numeric columns transform distance matrix. Default: NULL name_column (optional, column name) Column naming individual time series. Numeric names converted character prefix \"X\". Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame to Distance Matrix — distance_matrix","text":"square matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Frame to Distance Matrix — distance_matrix","text":"","code":"#compute distance matrix #on data frame with latlong coordinates m <- distance_matrix(   df = fagus_coordinates,   name_column = \"name\",   distance = \"euclidean\" )  #get data used to compute the matrix attributes(m)$df #>           x        y #> 1 -2.857322 43.17743 #> 2  7.517013 49.32505 #> 3 12.995025 56.40471  #check matrix m #>            Spain   Germany    Sweden #> Spain    0.00000 12.059027 20.646017 #> Germany 12.05903  0.000000  8.951548 #> Sweden  20.64602  8.951548  0.000000 #> attr(,\"type\") #> [1] \"distance\" #> attr(,\"distance\") #> [1] \"euclidean\" #> attr(,\"df\") #>           x        y #> 1 -2.857322 43.17743 #> 2  7.517013 49.32505 #> 3 12.995025 56.40471  #compare with sf # library(sf) # # #remove crs to get results in degrees # sf::st_crs(fagus_coordinates) <- NA # # #distance matrix in degrees # sf::st_distance( #   x = fagus_coordinates #   )"},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"Computes distance matrix rows two matrices y x representing regular irregular time series number columns. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"","code":"distance_matrix_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"x (required, numeric matrix) univariate multivariate time series. y (required, numeric matrix) univariate multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_matrix_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Distance Matrix of Two Time Series — distance_matrix_cpp","text":"","code":"#simulate two time series x <- zoo_simulate(seed = 1) y <- zoo_simulate(seed = 2)  #distance matrix dist_matrix <- distance_matrix_cpp(   x = x,   y = y,   distance = \"euclidean\" )"},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"Computes Russell-Rao distance two binary vectors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"","code":"distance_russelrao_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"x (required, numeric). Binary vector 1s 0s. y (required, numeric) Binary vector 1s 0s length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_russelrao_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Russell-Rao Distance Between Two Binary Vectors — distance_russelrao_cpp","text":"","code":"distance_russelrao_cpp(c(0, 1, 0, 1), c(1, 1, 0, 0)) #> [1] 0.5"},{"path":"https://blasbenito.github.io/distantia/reference/distance_sorensen_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Sørensen Distance Between Two Binary Vectors — distance_sorensen_cpp","title":"(C++) Sørensen Distance Between Two Binary Vectors — distance_sorensen_cpp","text":"Computes Sørensen distance, suitable presence/absence data.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_sorensen_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Sørensen Distance Between Two Binary Vectors — distance_sorensen_cpp","text":"","code":"distance_sorensen_cpp(x, y)"},{"path":"https://blasbenito.github.io/distantia/reference/distance_sorensen_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Sørensen Distance Between Two Binary Vectors — distance_sorensen_cpp","text":"x (required, numeric vector). y (required, numeric vector) length x.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distance_sorensen_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Sørensen Distance Between Two Binary Vectors — distance_sorensen_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distance_sorensen_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Sørensen Distance Between Two Binary Vectors — distance_sorensen_cpp","text":"","code":"distance_sorensen_cpp(x = c(0, 1, 1, 0), y = c(1, 1, 0, 0)) #> [1] 0.5"},{"path":"https://blasbenito.github.io/distantia/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Methods — distances","title":"Distance Methods — distances","text":"Data frame names, abbreviations, expressions distance metrics implemented package.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Methods — distances","text":"","code":"data(distances)"},{"path":"https://blasbenito.github.io/distantia/reference/distances.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distance Methods — distances","text":"data frame 5 columns 10 rows","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia-package.html","id":null,"dir":"Reference","previous_headings":"","what":"distantia: A Toolset for Time Series Dissimilarity Analysis — distantia-package","title":"distantia: A Toolset for Time Series Dissimilarity Analysis — distantia-package","text":"Fast C++ implementation Dynamic Time Warping time series dissimilarity analysis, applications environmental monitoring sensor data analysis, climate science, signal processing pattern recognition, financial data analysis. Built upon ideas presented Benito Birks (2020) doi:doi.org/10.1111/ecog.04895, provides tools analyzing time series varying lengths structures, including irregular multivariate time series. Key features include individual variable contribution analysis, restricted permutation tests statistical significance, imputation missing data via GAMs. Additionally, package provides ample set tools prepare manage time series data.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"distantia: A Toolset for Time Series Dissimilarity Analysis — distantia-package","text":"Blas Benito blasbenito@gmail.com","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissimilarity Analysis of Time Series Lists — distantia","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"function combines dynamic time warping lock-step comparison psi dissimilarity score permutation methods assess dissimilarity pairs time series sort data composed events ordered across relevant dimension. Dynamic Time Warping (DTW) finds optimal alignment two time series minimizing cumulative distance samples. applies dynamic programming identify least-cost path distance matrix pairs samples. resulting sum distances along least cost path metric time series similarity. DTW disregards exact timing samples focuses order pattern similarity time series, making suitable comparing regular irregular time series different lengths, phenological data different latitudes elevations, time series various years periods, movement trajectories like migration paths. Additionally, distantia() implements constrained DTW via Itakura Parallelograms bandwidth argument, defines region around distance matrix diagonal restrict spread least cost path. Lock-step (LS) sums pairwise distances samples regular irregular time series length, preferably captured times. method alternative dynamic time warping goal assess synchronicity two time series. psi score normalizes cumulative sum distances two time series cumulative sum distances consecutive samples generate comparable dissimilarity score. two time series \\(x\\) \\(y\\) \\(D_xy\\) represents cumulative sum distances , either resulting dynamic time warping lock-step method, \\(S_xy\\) represents cumulative sum distances consecutive samples, psi score can computed two ways depending scenario: Equation 1: \\(\\psi = \\frac{D_{xy} - S_{xy}}{S_{xy}}\\) Equation 2: \\(\\psi = \\frac{D_{xy} - S_{xy}}{S_{xy}} + 1\\) $D_xy$ computed via dynamic time warping ignoring distance matrix diagonals (diagonal = FALSE), Equation 1 used. hand, $D_xy$ results lock-step method (lock_step = TRUE), dynamic time warping considering diagonals (diagonal = TRUE), Equation 2 used instead: equations, psi score zero indicates maximum similarity. Permutation methods provided help assess robustness observed psi scores direct comparison null distribution psi scores resulting randomized versions compared time series. fraction null scores smaller observed score returned p_value function output interpreted \"probability finding higher similarity (lower psi score) chance\". essence, restricted permutation useful answer question \"robust similarity two time series?\" Four different permutation methods available: \"restricted\": Separates data blocks contiguous rows, re-shuffles data points randomly within blocks, independently row column. Applied data structured blocks preserved permutations (e.g., \"seasons\", \"years\", \"decades\", etc) columns represent independent variables. \"restricted_by_row\": Separates data blocks contiguous rows, re-shuffles complete rows within blocks. method suitable cases data organized blocks described , columns represent interdependent data (e.g., rows represent percentages proportions), maintaining relationships data within row important. \"free\": Randomly re-shuffles data points across entire time series, independently row column. method useful loosely structured time series data independence assumed. data exhibits strong temporal structure, approach may lead overestimation robustness dissimilarity scores. \"free_by_row\": Randomly re-shuffles complete rows across entire time series. method useful loosely structured time series dependency columns assumed (e.g., rows represent percentages proportions). method drawbacks \"free\" method, data exhibits strong temporal structure. function allows computing dissimilarity pairs time series using different combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two dissimilarity scores pair time series, one based euclidean distances, another based manhattan distances. happens parameters. function supports parallelization setup via future::plan(), progress bars provided package progressr. However, due high performance C++ backend, parallelization might result efficiency gains running permutation tests large number iterations, working long time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"","code":"distantia(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   bandwidth = 1,   lock_step = FALSE,   permutation = \"restricted_by_row\",   block_size = NULL,   repetitions = 0,   seed = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE bandwidth (optional, numeric) Proportion space side cost matrix diagonal (aka Itakura parallelogram) defining valid region dynamic time warping, used control flexibility warping path. method prevents degenerate alignments due differences magnitude time series data properly scaled. 1 (default), DTW unconstrained. 0, DTW fully constrained warping path follows matrix diagonal. Recommended values may vary depending nature data. Ignored lock_step = TRUE. Default: 1. lock_step (optional, logical vector) TRUE, time series captured times compared sample wise (dynamic time warping). Requires time series argument tsl fully aligned, return error. Default: FALSE. permutation (optional, character vector) permutation method, relevant repetitions higher zero. Valid values : \"restricted_by_row\", \"restricted\", \"free_by_row\", \"free\". Default: \"restricted_by_row\". block_size (optional, integer) Size row blocks restricted permutation test. relevant permutation methods \"restricted\" \"restricted_by_row\" repetitions higher zero. block size n indicates row can permuted within block n adjacent rows. NULL, defaults rounded one tenth shortest time series tsl. Default: NULL. repetitions (optional, integer vector) number permutations compute p-value. 0, p-values computed. Otherwise, minimum 2. resolution p-values overall computation time depends number permutations. Default: 0 seed (optional, integer) initial random seed use replicability computing p-values. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"data frame columns: x: time series name. y: time series name. distance: name distance metric. diagonal: value argument diagonal. lock_step: value argument lock_step. repetitions (repetitions > 0): value argument repetitions. permutation (repetitions > 0): name permutation method used compute p-values. seed (repetitions > 0): random seed used permutations. psi: psi dissimilarity sequences x y. null_mean (repetitions > 0): mean null distribution psi scores. null_sd (repetitions > 0): standard deviation null distribution psi values. p_value  (repetitions > 0): proportion scores smaller equal psi null distribution.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissimilarity Analysis of Time Series Lists — distantia","text":"","code":"#parallelization setup #not worth it for this data size # future::plan( #   strategy = future::multisession, #   workers = 2 # )  #progress bar (does not work in R examples) # progressr::handlers(global = TRUE)   #load fagus_dynamics as tsl #global centering and scaling tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #dynamic time warping dissimilarity analysis #------------------------------------------- #permutation restricted by row to preserve dependency of ndvi on temperature and rainfall #block size is 3 months to permute within same season df_dtw <- distantia(   tsl = tsl,   distance = \"euclidean\",   permutation = \"restricted_by_row\",   block_size = 3, #months   repetitions = 10, #increase to 100 or more   seed = 1 )  #focus on the important details df_dtw[, c(\"x\", \"y\", \"psi\", \"p_value\", \"null_mean\", \"null_sd\")] #>         x      y       psi p_value null_mean    null_sd #> 2 Germany Sweden 0.8571217     0.1  1.069111 0.07811084 #> 1 Germany  Spain 1.3429956     0.1  1.424861 0.03427681 #> 3   Spain Sweden 1.4803954     0.1  1.535882 0.02951054 #higher psi values indicate higher dissimilarity #p-values indicate chance of finding a random permutation with a psi smaller than the observed  #visualize dynamic time warping if(interactive()){    distantia_dtw_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     distance = \"euclidean\"   )  }  #recreating the null distribution #direct call to C++ function #use same args as distantia() call psi_null <- psi_null_dtw_cpp(   x = tsl[[\"Spain\"]],   y = tsl[[\"Sweden\"]],   distance = \"euclidean\",   repetitions = 10, #increase to 100 or more    permutation = \"restricted_by_row\",   block_size = 3,   seed = 1 )  #compare null mean with output of distantia() mean(psi_null) #> [1] 1.535882 df_dtw$null_mean[3] #> [1] 1.535882"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate distantia() Data Frames Across Parameter Combinations — distantia_aggregate","title":"Aggregate distantia() Data Frames Across Parameter Combinations — distantia_aggregate","text":"function distantia() allows dissimilarity assessments based several combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two dissimilarity scores pair compared time series, one based euclidean distances, another based manhattan distances. function computes dissimilarity stats across combinations parameters. psi scores smaller zero occur aggregated output, smaller psi value added column psi start dissimilarity scores zero. different combinations arguments input data frame, aggregation happens, parameter columns removed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate distantia() Data Frames Across Parameter Combinations — distantia_aggregate","text":"","code":"distantia_aggregate(df = NULL, f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate distantia() Data Frames Across Parameter Combinations — distantia_aggregate","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL f (optional, function) Function summarize psi scores (example, mean) several combinations parameters df. Ignored single combination arguments input. Default: mean ... (optional, arguments f) arguments pass function f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate distantia() Data Frames Across Parameter Combinations — distantia_aggregate","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate distantia() Data Frames Across Parameter Combinations — distantia_aggregate","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #distantia with multiple parameter combinations #------------------------------------- df <- distantia(   tsl = tsl,   distance = c(\"euclidean\", \"manhattan\"),   lock_step = TRUE )  df[, c(   \"x\",   \"y\",   \"distance\",   \"psi\" )] #>         x      y  distance       psi #> 2 Germany Sweden euclidean 0.8576700 #> 5 Germany Sweden manhattan 0.8591195 #> 4 Germany  Spain manhattan 1.2698922 #> 1 Germany  Spain euclidean 1.3061327 #> 3   Spain Sweden euclidean 1.4708497 #> 6   Spain Sweden manhattan 1.4890286  #aggregation using means df <- distantia_aggregate(   df = df,   f = mean )  df #>         x      y       psi #> 2 Germany Sweden 0.8576700 #> 5 Germany Sweden 0.8591195 #> 4 Germany  Spain 1.2698922 #> 1 Germany  Spain 1.3061327 #> 3   Spain Sweden 1.4708497 #> 6   Spain Sweden 1.4890286"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Distantia Boxplot — distantia_boxplot","title":"Distantia Boxplot — distantia_boxplot","text":"Boxplot data frame returned distantia() summarizing stats psi scores time series others.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distantia Boxplot — distantia_boxplot","text":"","code":"distantia_boxplot(df = NULL, fill_color = NULL, f = median, text_cex = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distantia Boxplot — distantia_boxplot","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL fill_color (optional, character vector) boxplot fill color. Default: NULL f (optional, function) function used aggregate input data frame arrange boxes. One mean median. Default: median. text_cex (optional, numeric) Multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distantia Boxplot — distantia_boxplot","text":"boxplot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distantia Boxplot — distantia_boxplot","text":"","code":"tsl <- tsl_initialize(   x = distantia::albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  df <- distantia(   tsl = tsl,   lock_step = TRUE   )  distantia_boxplot(   df = df,   text_cex = 1.5   )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"function combines dissimilarity scores computed distantia(), agglomerative clustering methods provided stats::hclust(), clustering optimization method implemented utils_cluster_hclust_optimizer() help group together time series similar features. clusters = NULL, function utils_cluster_hclust_optimizer() run underneath perform parallelized grid search find  number clusters maximizing overall silhouette width clustering solution (see utils_cluster_silhouette()). method = NULL well, optimization also includes methods available stats::hclust() grid search. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"","code":"distantia_cluster_hclust(df = NULL, clusters = NULL, method = \"complete\")"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL clusters (required, integer) Number groups generate. NULL (default), utils_cluster_kmeans_optimizer() used find number clusters maximizes mean silhouette width clustering solution (see utils_cluster_silhouette()). Default: NULL method (optional, character string) Argument stats::hclust() defining agglomerative method. One : \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) \"centroid\" (= UPGMC). Unambiguous abbreviations accepted well. NULL (default), utils_cluster_hclust_optimizer() finds optimal method. Default: \"complete\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"list: cluster_object: hclust object analyses custom plotting. clusters: integer, number clusters. silhouette_width: mean silhouette width clustering solution. df: data frame time series names, cluster label, individual silhouette width scores. d: psi distance matrix used clustering. optimization: clusters = NULL, data frame optimization results utils_cluster_hclust_optimizer().","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_hclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_hclust","text":"","code":"#weekly covid prevalence in California tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" )  #subset 10 elements to accelerate example execution tsl <- tsl_subset(   tsl = tsl,   names = 1:10 )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl[1:3],     guide_columns = 3   ) }  #dissimilarity analysis distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #hierarchical clustering #automated number of clusters #automated method selection distantia_clust <- distantia_cluster_hclust(   df = distantia_df,   clusters = NULL,   method = NULL )  #names of the output object names(distantia_clust) #> [1] \"cluster_object\"   \"clusters\"         \"silhouette_width\" \"df\"               #> [5] \"d\"                \"optimization\"      #cluster object distantia_clust$cluster_object #>  #> Call: #> stats::hclust(d = d_dist, method = method) #>  #> Cluster method   : ward.D  #> Number of objects: 10  #>   #distance matrix used for clustering distantia_clust$d #>               Alameda Imperial   Fresno    Butte Contra_Costa    Kings     Kern #> Imperial     4.119107                                                           #> Fresno       3.456869 3.184685                                                  #> Butte        2.962963 4.408978 3.324759                                         #> Contra_Costa 1.162055 4.328125 3.387755 2.733068                                #> Kings        3.631491 1.917582 2.981191 3.623529     3.719723                   #> Kern         3.658065 3.696145 2.381766 2.811688     3.670103 3.203150          #> Humboldt     3.960000 4.173228 4.439863 4.233871     4.380952 3.481739 4.388889 #> El_Dorado    2.483755 4.568627 4.433962 2.327273     2.767442 3.694352 3.942857 #> Los_Angeles  3.972376 3.598377 2.302730 4.005556     3.871720 2.954876 3.420000 #>              Humboldt El_Dorado #> Imperial                        #> Fresno                          #> Butte                           #> Contra_Costa                    #> Kings                           #> Kern                            #> Humboldt                        #> El_Dorado    3.568627           #> Los_Angeles  4.647059  4.517711  #number of clusters distantia_clust$clusters #> [1] 5  #clustering data frame #group label in column \"cluster\" #negatives in column \"silhouette_width\" higlight anomalous cluster assignation distantia_clust$df #>            name cluster silhouette_width #> 1       Alameda       1        0.5733007 #> 2      Imperial       2        0.4510322 #> 3        Fresno       3        0.2402546 #> 4         Butte       4        0.1828440 #> 5  Contra_Costa       1        0.5774736 #> 6         Kings       2        0.3705427 #> 7          Kern       3        0.1410575 #> 8      Humboldt       5        0.0000000 #> 9     El_Dorado       4        0.1136219 #> 10  Los_Angeles       3        0.1267346  #mean silhouette width of the clustering solution distantia_clust$silhouette_width #> [1] 0.2776862  #plot if(interactive()){    dev.off()    clust <- distantia_clust$cluster_object   k <- distantia_clust$clusters    #tree plot   plot(     x = clust,     hang = -1   )    #highlight groups   stats::rect.hclust(     tree = clust,     k = k,     cluster = stats::cutree(       tree = clust,       k = k     )   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"function combines dissimilarity scores computed distantia(), K-means clustering method implemented stats::kmeans(), clustering optimization method implemented utils_cluster_hclust_optimizer() help group together time series similar features. clusters = NULL, function utils_cluster_hclust_optimizer() run underneath perform parallelized grid search find  number clusters maximizing overall silhouette width clustering solution (see utils_cluster_silhouette()). function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"","code":"distantia_cluster_kmeans(df = NULL, clusters = NULL, seed = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL clusters (required, integer) Number groups generate. NULL (default), utils_cluster_kmeans_optimizer() used find number clusters maximizes mean silhouette width clustering solution (see utils_cluster_silhouette()). Default: NULL seed (optional, integer) Random seed used K-means computation. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"list: cluster_object: kmeans object object analyses custom plotting. clusters: integer, number clusters. silhouette_width: mean silhouette width clustering solution. df: data frame time series names, cluster label, individual silhouette width scores. d: psi distance matrix used clustering. optimization: clusters = NULL, data frame optimization results utils_cluster_hclust_optimizer().","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_cluster_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Means Clustering of Dissimilarity Analysis Data Frames — distantia_cluster_kmeans","text":"","code":"#weekly covid prevalence in California tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" )  #subset 10 elements to accelerate example execution tsl <- tsl_subset(   tsl = tsl,   names = 1:10 )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl[1:3],     guide_columns = 3   ) }  #dissimilarity analysis distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #hierarchical clustering #automated number of clusters distantia_kmeans <- distantia_cluster_kmeans(   df = distantia_df,   clusters = NULL )  #names of the output object names(distantia_kmeans) #> [1] \"cluster_object\"   \"clusters\"         \"silhouette_width\" \"df\"               #> [5] \"d\"                \"optimization\"      #kmeans object distantia_kmeans$cluster_object #> K-means clustering with 5 clusters of sizes 1, 2, 3, 2, 2 #>  #> Cluster means: #>     Alameda  Imperial   Fresno    Butte Contra_Costa     Kings     Kern #> 1 3.9600000 4.1732283 4.439863 4.233871    4.3809524 3.4817391 4.388889 #> 2 2.7233587 4.4888025 3.879361 1.163636    2.7502548 3.6589408 3.377273 #> 3 3.6957697 3.4930690 1.561499 3.380668    3.6431928 3.0464057 1.933922 #> 4 0.5810277 4.2236158 3.422312 2.848015    0.5810277 3.6756070 3.664084 #> 5 3.8752987 0.9587912 3.082938 4.016253    4.0239241 0.9587912 3.449647 #>   Humboldt El_Dorado Los_Angeles #> 1 0.000000  3.568627    4.647059 #> 2 3.901249  1.163636    4.261633 #> 3 4.491937  4.298177    1.907577 #> 4 4.170476  2.625598    3.922048 #> 5 3.827484  4.131490    3.276627 #>  #> Clustering vector: #>      Alameda     Imperial       Fresno        Butte Contra_Costa        Kings  #>            4            5            3            2            4            5  #>         Kern     Humboldt    El_Dorado  Los_Angeles  #>            3            1            2            3  #>  #> Within cluster sum of squares by cluster: #> [1]  0.000000  7.154225 17.277466  1.538902  5.260079 #>  (between_SS / total_SS =  80.4 %) #>  #> Available components: #>  #> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" #> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"        #distance matrix used for clustering distantia_kmeans$d #>               Alameda Imperial   Fresno    Butte Contra_Costa    Kings     Kern #> Alameda      0.000000 4.119107 3.456869 2.962963     1.162055 3.631491 3.658065 #> Imperial     4.119107 0.000000 3.184685 4.408978     4.328125 1.917582 3.696145 #> Fresno       3.456869 3.184685 0.000000 3.324759     3.387755 2.981191 2.381766 #> Butte        2.962963 4.408978 3.324759 0.000000     2.733068 3.623529 2.811688 #> Contra_Costa 1.162055 4.328125 3.387755 2.733068     0.000000 3.719723 3.670103 #> Kings        3.631491 1.917582 2.981191 3.623529     3.719723 0.000000 3.203150 #> Kern         3.658065 3.696145 2.381766 2.811688     3.670103 3.203150 0.000000 #> Humboldt     3.960000 4.173228 4.439863 4.233871     4.380952 3.481739 4.388889 #> El_Dorado    2.483755 4.568627 4.433962 2.327273     2.767442 3.694352 3.942857 #> Los_Angeles  3.972376 3.598377 2.302730 4.005556     3.871720 2.954876 3.420000 #>              Humboldt El_Dorado Los_Angeles #> Alameda      3.960000  2.483755    3.972376 #> Imperial     4.173228  4.568627    3.598377 #> Fresno       4.439863  4.433962    2.302730 #> Butte        4.233871  2.327273    4.005556 #> Contra_Costa 4.380952  2.767442    3.871720 #> Kings        3.481739  3.694352    2.954876 #> Kern         4.388889  3.942857    3.420000 #> Humboldt     0.000000  3.568627    4.647059 #> El_Dorado    3.568627  0.000000    4.517711 #> Los_Angeles  4.647059  4.517711    0.000000 #> attr(,\"distantia_args\") #> data frame with 0 columns and 0 rows #> attr(,\"type\") #> [1] \"distantia_matrix\" #> attr(,\"distance\") #> [1] \"psi\"  #number of clusters distantia_kmeans$clusters #> [1] 5  #clustering data frame #group label in column \"cluster\" distantia_kmeans$df #>            name cluster silhouette_width #> 1       Alameda       4        0.5733007 #> 2      Imperial       5        0.4510322 #> 3        Fresno       3        0.2402546 #> 4         Butte       2        0.1828440 #> 5  Contra_Costa       4        0.5774736 #> 6         Kings       5        0.3705427 #> 7          Kern       3        0.1410575 #> 8      Humboldt       1        0.0000000 #> 9     El_Dorado       2        0.1136219 #> 10  Los_Angeles       3        0.1267346  #mean silhouette width of the clustering solution distantia_kmeans$silhouette_width #> [1] 0.2776862  #kmeans plot # factoextra::fviz_cluster( #   object = distantia_kmeans$cluster_object, #   data = distantia_kmeans$d, #   repel = TRUE # )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Time Warping Dissimilarity Analysis of Time Series Lists — distantia_dtw","title":"Dynamic Time Warping Dissimilarity Analysis of Time Series Lists — distantia_dtw","text":"Minimalistic slightly faster version distantia() compute dynamic time warping dissimilarity scores using diagonal least cost paths.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Time Warping Dissimilarity Analysis of Time Series Lists — distantia_dtw","text":"","code":"distantia_dtw(tsl = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Time Warping Dissimilarity Analysis of Time Series Lists — distantia_dtw","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic Time Warping Dissimilarity Analysis of Time Series Lists — distantia_dtw","text":"data frame columns: x: time series name. y: time series name. distance: name distance metric. psi: psi dissimilarity sequences x y.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Time Warping Dissimilarity Analysis of Time Series Lists — distantia_dtw","text":"","code":"#load fagus_dynamics as tsl #global centering and scaling tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #dynamic time warping dissimilarity analysis df_dtw <- distantia_dtw(   tsl = tsl,   distance = \"euclidean\" )  df_dtw[, c(\"x\", \"y\", \"psi\")] #>         x      y       psi #> 2 Germany Sweden 0.8571217 #> 1 Germany  Spain 1.3429956 #> 3   Spain Sweden 1.4803954  #visualize dynamic time warping if(interactive()){    distantia_dtw_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     distance = \"euclidean\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_dtw_plot","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_dtw_plot","text":"Plots two sequences, distance cost matrix, least cost path, relevant values used compute dissimilarity. Unlike distantia(), function accept vectors inputs arguments compute dissimilarity (distance, diagonal,  weighted), plots pair sequences . argument lock_step available plot make sense case.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_dtw_plot","text":"","code":"distantia_dtw_plot(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   bandwidth = 1,   matrix_type = \"cost\",   matrix_color = NULL,   path_width = 1,   path_color = \"black\",   diagonal_width = 1,   diagonal_color = \"white\",   line_color = NULL,   line_width = 1,   text_cex = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_dtw_plot","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE bandwidth (optional, numeric) Proportion space side cost matrix diagonal (aka Itakura parallelogram) defining valid region dynamic time warping, used control flexibility warping path. method prevents degenerate alignments due differences magnitude time series data properly scaled. 1 (default), DTW unconstrained. 0, DTW fully constrained warping path follows matrix diagonal. Recommended values may vary depending nature data. Ignored lock_step = TRUE. Default: 1. matrix_type (optional, character string): one \"cost\" \"distance\" (abbreviation \"dist\" accepted well). Default: \"cost\". matrix_color (optional, character vector) vector colors distance cost matrix. NULL, uses palette \"Zissou 1\" provided function grDevices::hcl.colors(). Default: NULL path_width (optional, numeric) width least cost path. Default: 1 path_color (optional, character string) color least-cost path. Default: \"black\" diagonal_width (optional, numeric) width diagonal. Set 0 remove diagonal line. Default: 0.5 diagonal_color (optional, character string) color diagonal. Default: \"white\" line_color (optional, character vector) Vector colors time series plot. provided, defaults subset matrix_color. line_width (optional, numeric vector) Width time series plot. Default: 1 text_cex (optional, numeric) Multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_dtw_plot","text":"multipanel plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-Way Dissimilarity Plots of Time Series Lists — distantia_dtw_plot","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden #convert to time series list #scale and center to neutralize effect of different scales in temperature, rainfall, and ndvi tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global #see help(f_scale_global)   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #visualize dynamic time warping if(interactive()){    #plot pair with cost matrix (default)   distantia_dtw_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")] #only two time series!   )    #plot pair with distance matrix   distantia_dtw_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     matrix_type = \"distance\"   )    #plot pair with different distance   distantia_dtw_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     distance = \"manhattan\", #sed data(distances)     matrix_type = \"distance\"   )     #with different colors   distantia_dtw_plot(     tsl = tsl[c(\"Spain\", \"Sweden\")],     matrix_type = \"distance\",     matrix_color = grDevices::hcl.colors(       n = 100,       palette = \"Inferno\"     ),     path_color = \"white\",     path_width = 2,     line_color = grDevices::hcl.colors(       n = 3, #same as variables in tsl       palette = \"Inferno\"     )   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Shift Between Time Series — distantia_dtw_shift","title":"Time Shift Between Time Series — distantia_dtw_shift","text":"function computes approximation time-shift pairs time series absolute time difference pairs observations time series x y connected dynamic time warping path. time series long enough, extremes warping path trimmed (5% total path length ) avoid artifacts due early misalignments. returns data frame modal, mean, median, minimum, maximum, quantiles 0.25 0.75, standard deviation. modal median generally accurate time-shift descriptors. function requires scaled detrended time series. Still, might yield non-sensical results case degenerate warping paths. Plotting dubious results [distantia_dtw_plot())] always good approach identify cases. [distantia_dtw_plot())]: R:distantia_dtw_plot())","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Shift Between Time Series — distantia_dtw_shift","text":"","code":"distantia_dtw_shift(   tsl = NULL,   distance = \"euclidean\",   bandwidth = 1,   two_way = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Shift Between Time Series — distantia_dtw_shift","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". bandwidth (optional, numeric) Proportion space side cost matrix diagonal (aka Itakura parallelogram) defining valid region dynamic time warping, used control flexibility warping path. method prevents degenerate alignments due differences magnitude time series data properly scaled. 1 (default), DTW unconstrained. 0, DTW fully constrained warping path follows matrix diagonal. Recommended values may vary depending nature data. Ignored lock_step = TRUE. Default: 1. two_way (optional, logical) TRUE, time shift time series pairs y x added results","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Shift Between Time Series — distantia_dtw_shift","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_dtw_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Shift Between Time Series — distantia_dtw_shift","text":"","code":"#load two long-term temperature time series #local scaling to focus in shape rather than values #polynomial detrending to make them stationary tsl <- tsl_init(   x = cities_temperature[     cities_temperature$name %in% c(\"London\", \"Kinshasa\"),     ],   name = \"name\",   time = \"time\" ) |>   tsl_transform(     f = f_scale_local   ) |>   tsl_transform(     f = f_detrend_poly,     degree = 35 #data years   )   if(interactive()){   tsl_plot(     tsl = tsl,     guide = FALSE   ) }  #compute shifts df_shift <- distantia_dtw_shift(   tsl = tsl,   two_way = TRUE )  df_shift #>          x        y  distance path_length units  min   q1 median     mean modal #> 1 Kinshasa   London euclidean         285  days  150  181    212  203.607   212 #> 2   London Kinshasa euclidean         285  days -150 -181   -212 -203.607  -212 #>     q3  max       sd #> 1  215  304 34.49699 #> 2 -215 -304 34.49699 #positive shift values indicate that the samples in Kinshasa are aligned with older samples in London."},{"path":"https://blasbenito.github.io/distantia/reference/distantia_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock-Step Dissimilarity Analysis of Time Series Lists — distantia_ls","title":"Lock-Step Dissimilarity Analysis of Time Series Lists — distantia_ls","text":"Minimalistic slightly faster version distantia() compute lock-step dissimilarity scores.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock-Step Dissimilarity Analysis of Time Series Lists — distantia_ls","text":"","code":"distantia_ls(tsl = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock-Step Dissimilarity Analysis of Time Series Lists — distantia_ls","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock-Step Dissimilarity Analysis of Time Series Lists — distantia_ls","text":"data frame: x: time series name. y: time series name. distance: name distance metric. psi: psi dissimilarity sequences x y.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_ls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock-Step Dissimilarity Analysis of Time Series Lists — distantia_ls","text":"","code":"#load fagus_dynamics as tsl #global centering and scaling tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #lock-step dissimilarity analysis df_ls <- distantia_ls(   tsl = tsl,   distance = \"euclidean\" )  #focus on the important details df_ls[, c(\"x\", \"y\", \"psi\")] #>         x      y      psi #> 2 Germany Sweden 0.857670 #> 1 Germany  Spain 1.306133 #> 3   Spain Sweden 1.470850"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"Transforms data frame resulting distantia() dissimilarity matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"","code":"distantia_matrix(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Dissimilarity Analysis Data Frame to Distance Matrix — distantia_matrix","text":"","code":"#weekly covid prevalence in three California counties #load as tsl #subset 5 counties #sum by month tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_subset(     names = 1:5   ) |>   tsl_aggregate(     new_time = \"months\",     method = sum   )  if(interactive()){    #plotting first three time series   tsl_plot(     tsl = tsl,     guide_columns = 3     )    dev.off()  }  #dissimilarity analysis #two combinations of arguments distantia_df <- distantia(   tsl = tsl,   lock_step = c(TRUE, FALSE) )  #to dissimilarity matrix distantia_matrix <- distantia_matrix(   df = distantia_df )  #returns a list of matrices lapply(   X = distantia_matrix,   FUN = class   ) #> $`1` #> [1] \"matrix\" \"array\"  #>  #> $`2` #> [1] \"matrix\" \"array\"  #>   #these matrices have attributes tracing how they were generated lapply(   X = distantia_matrix,   FUN = \\(x) attributes(x)$distantia_args ) #> $`1` #>    distance diagonal lock_step bandwidth group #> 1 euclidean     TRUE     FALSE         1     1 #>  #> $`2` #>     distance diagonal lock_step bandwidth group #> 11 euclidean     TRUE      TRUE         1     2 #>   #plot matrix if(interactive()){    #plot first matrix (default behavior of utils_matrix_plot())   utils_matrix_plot(     m = distantia_matrix   )    #plot second matrix   utils_matrix_plot(     m = distantia_matrix[[2]]   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_model_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissimilarity Model Frame — distantia_model_frame","title":"Dissimilarity Model Frame — distantia_model_frame","text":"function generates model frame statistical machine learning analysis objects: : Dissimilarity data frame generated distantia(). output model frame many rows data frame. : Data frame static descriptors time series. descriptors converted distances pairs time series via distance_matrix(). : List defining new predictors combinations existing predictors. feature allows grouping together predictors common meaning. example, predictors_list = list(temperature = c(\"temperature_mean\", \"temperature_min\", \"temperature_max\") generates new predictor named \"temperature\", results computing distances vector temperature variables pair time series. Predictors one groups scaled distance computation maximum standard deviations differ factor 10 . resulting data frame contains following columns: x y: names pair time series represented row. psi: dissimilarity x y. predictors columns: representing distance values given static predictor x y. (optional) distance:static predictors data frame sf object, predictor created via sf::st_distance(). Statistical machine learning analyses based data frame may help uncover drivers dissimilarity. Model coefficients importance scores generated model frame represent effect distance predictors dissimilarity time series. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_model_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissimilarity Model Frame — distantia_model_frame","text":"","code":"distantia_model_frame(   df = NULL,   predictors_df = NULL,   predictors_list = NULL,   predictors_scaled = FALSE,   distance = \"euclidean\" )"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_model_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissimilarity Model Frame — distantia_model_frame","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL predictors_df (required, data frame) data frame numeric predictors added model frame. Must column names df$x df$y. sf data frame, predictor \"distance\" added model frame. Default: NULL predictors_list (optional, list) list defining new predictors combinations predictors predictors_df. example, predictors_list = list(= c(\"b\", \"c\")) uses columns \"b\" \"c\" predictors_df generate predictor model frame. Default: NULL predictors_scaled (optional, logical) TRUE, predictors scaled centered scale(). Default: FALSE distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_model_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissimilarity Model Frame — distantia_model_frame","text":"data frame: attributes \"response\", \"predictors\" \"formula\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_model_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissimilarity Model Frame — distantia_model_frame","text":"","code":"#covid prevalence in California counties tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" )  #dissimilarity analysis df <- distantia(   tsl = tsl,   lock_step = TRUE )  #combine several predictors #into a new one predictors_list <- list(   economy = c(     \"poverty_percentage\",     \"median_income\",     \"domestic_product\"     ) )  #generate model frame model_frame <- distantia_model_frame(   df = df,   predictors_df = covid_counties,   predictors_list = predictors_list,   predictors_scaled = TRUE )  head(model_frame) #>         psi   distance    economy area_hectares population poverty_percentage #> 1 0.8726115 -1.1308600 -1.1122870    -0.7247975 -0.4884546         -1.1317715 #> 2 1.0656371 -1.1214496  0.4411267    -0.6664445 -0.1997738         -0.6664702 #> 3 1.1620553 -1.1308600 -1.1999329    -0.7391627 -0.4005782         -1.2480968 #> 4 1.2578125 -0.9213699 -0.6682476    -0.5909790 -0.1039143         -0.2884129 #> 5 1.2919255 -1.1308600 -1.0919021    -0.7182193 -0.5222018         -0.8991208 #> 6 1.2979351 -1.1308600  1.3447123    -0.5316916  0.1555335         -0.3465756 #>   median_income domestic_product daily_miles_traveled employed_percentage #> 1    -0.9813874       -0.4910881            0.6672299           0.1688222 #> 2    -0.1807629        1.3397775           -0.9756356           0.6869774 #> 3    -1.2493713       -0.4668099           -0.6256303          -0.7943577 #> 4    -0.6378171       -0.6777708           -0.3619226          -0.2478307 #> 5    -0.9986465       -0.7233418           -0.9946619          -1.1991998 #> 6     1.3065864        1.9436225           -1.1501375          -0.4699586  #names of response and predictors #and an additive formula #are stored as attributes attributes(model_frame)$response #> [1] \"psi\" attributes(model_frame)$predictors #> [1] \"distance\"             \"economy\"              \"area_hectares\"        #> [4] \"population\"           \"poverty_percentage\"   \"median_income\"        #> [7] \"domestic_product\"     \"daily_miles_traveled\" \"employed_percentage\"  attributes(model_frame)$formula #> psi ~ distance + economy + area_hectares + population + poverty_percentage +  #>     median_income + domestic_product + daily_miles_traveled +  #>     employed_percentage #> <environment: 0x55d651d945c0>   #linear model model <- lm(   formula = attributes(model_frame)$formula,   data = model_frame )  summary(model) #>  #> Call: #> lm(formula = attributes(model_frame)$formula, data = model_frame) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.3579 -0.4988  0.1004  0.5309  1.6577  #>  #> Coefficients: #>                       Estimate Std. Error t value Pr(>|t|)     #> (Intercept)           3.497370   0.029861 117.120  < 2e-16 *** #> distance              0.213906   0.032047   6.675  5.5e-11 *** #> economy               0.392631   0.260504   1.507   0.1323     #> area_hectares         0.095988   0.030623   3.134   0.0018 **  #> population            0.057896   0.031454   1.841   0.0661 .   #> poverty_percentage   -0.195852   0.119502  -1.639   0.1017     #> median_income         0.031322   0.095096   0.329   0.7420     #> domestic_product     -0.161710   0.155524  -1.040   0.2989     #> daily_miles_traveled -0.009979   0.039144  -0.255   0.7989     #> employed_percentage   0.115063   0.051094   2.252   0.0247 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.7495 on 620 degrees of freedom #> Multiple R-squared:  0.1967,\tAdjusted R-squared:  0.185  #> F-statistic: 16.86 on 9 and 620 DF,  p-value: < 2.2e-16 #>"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Representation of distantia() Data Frames — distantia_spatial","title":"Spatial Representation of distantia() Data Frames — distantia_spatial","text":"Given sf data frame geometry types POLYGON, MULTIPOLYGON, POINT representing time series locations, function transforms output distantia(), distantia_ls(), distantia_dtw() distantia_dtw_shift() sf data frame. network = TRUE, sf data frame type LINESTRING, edges connecting time series locations. output helpful build many--many dissimilarity maps (see examples). network = FALSE, sf data frame contains geometry input sf argument. output helps build one--many dissimilarity maps.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Representation of distantia() Data Frames — distantia_spatial","text":"","code":"distantia_spatial(df = NULL, sf = NULL, network = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Representation of distantia() Data Frames — distantia_spatial","text":"df (required, data frame) Output distantia() distantia_dtw_shift(). Default: NULL sf (required, sf data frame) Points polygons representing location time series argument 'df'. must column time series names df$x df$y. Default: NULL network (optional, logical) TRUE, resulting sf data frame time LINESTRING represent network edges. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Representation of distantia() Data Frames — distantia_spatial","text":"sf data frame (LINESTRING geometry)","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Representation of distantia() Data Frames — distantia_spatial","text":"","code":"tsl <- distantia::tsl_initialize(   x = distantia::covid_prevalence,   name_column = \"name\",   time_column = \"time\" )  df_psi <- distantia::distantia_ls(   tsl = tsl )  #network many to many sf_psi <- distantia::distantia_spatial(   df = df_psi,   sf = distantia::covid_counties,   network = TRUE )  #subset target counties counties <- c(\"Los_Angeles\", \"San_Francisco\", \"Fresno\", \"San_Joaquin\")  sf_psi_subset <- sf_psi[   which(sf_psi$x %in% counties & sf_psi$y %in% counties), ]  #network map # mapview::mapview( #   distantia::covid_counties, #   col.regions = NA, #   alpha.regions = 0, #   color = \"black\", #   label = \"name\", #   legend = FALSE, #   map.type = \"OpenStreetMap\" # ) + #   mapview::mapview( #     sf_psi_subset, #     layer.name = \"Psi\", #     label = \"edge_name\", #     zcol = \"psi\", #     lwd = 3 #   ) |> #   suppressWarnings()  #one to many sf_psi <- distantia_spatial(   df = df_psi,   sf = distantia::covid_counties,   network = FALSE )  #subset one county sf_psi_subset <- sf_psi[sf_psi$x == \"Los_Angeles\", ]  #one to many map #dissimilarity of all counties with Los Angeles # mapview::mapview( #   sf_psi_subset, #   layer.name = \"Psi with LA\", #   label = \"y\", #   zcol = \"psi\", #   alpha.regions = 1 # ) |> #   suppressWarnings()"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Stats of Dissimilarity Data Frame — distantia_stats","title":"Stats of Dissimilarity Data Frame — distantia_stats","text":"Takes output distantia() return data frame one row per time series stats dissimilarity scores time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stats of Dissimilarity Data Frame — distantia_stats","text":"","code":"distantia_stats(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/distantia_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stats of Dissimilarity Data Frame — distantia_stats","text":"df (required, data frame) Output distantia(), distantia_ls(), distantia_dtw(), distantia_dtw_shift(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/distantia_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stats of Dissimilarity Data Frame — distantia_stats","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/distantia_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stats of Dissimilarity Data Frame — distantia_stats","text":"","code":"tsl <- tsl_simulate(   n = 5,   irregular = FALSE   )  df <- distantia(   tsl = tsl,   lock_step = TRUE   )  df_stats <- distantia_stats(df = df)  df_stats #>   name     mean      min       q1   median       q3      max        sd    range #> 1    A 2.822934 1.107088 2.231241 3.054622 3.646315 4.075402 1.2939296 2.968314 #> 2    B 2.986980 1.107088 2.606637 3.346302 3.726645 4.148229 1.3235986 3.041141 #> 3    C 3.525711 2.605959 2.981355 3.428742 3.973098 4.639400 0.8780187 2.033441 #> 4    D 4.635603 4.075402 4.130022 4.393814 4.899396 5.679382 0.7395604 1.603980 #> 5    E 4.129946 3.503286 3.565409 3.668557 4.233093 5.679382 1.0380765 2.176096"},{"path":"https://blasbenito.github.io/distantia/reference/eemian_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","title":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","text":"Site Coordinates Nine Interglacial Sites Central Europe","code":""},{"path":"https://blasbenito.github.io/distantia/reference/eemian_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","text":"","code":"data(eemian_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/eemian_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Site Coordinates of Nine Interglacial Sites in Central Europe — eemian_coordinates","text":"sf data frame 4 columns 9 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"Pollen counts nine interglacial sites central Europe. Site coordinates dataset eemian_coordinates.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"","code":"data(eemian_pollen)"},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"data frame 24 columns 376 rows.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/eemian_pollen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pollen Counts of Nine Interglacial Sites in Central Europe — eemian_pollen","text":"","code":"data(\"eemian_pollen\")  #to time series list tsl <- tsl_initialize(   x = eemian_pollen,   name_column = \"name\",   time_column = \"time\" ) #> Warning: distantia::utils_prepare_time():  duplicated time indices in 'Krumbach_I': #> - value 6.8 replaced with 6.825  #time series plot if(interactive()){   tsl_plot(   tsl = tsl_subset(     tsl = tsl,     names = 1:3     ),   columns = 2,   guide_columns = 2   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/f_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Zoo Object to Binary — f_binary","title":"Transform Zoo Object to Binary — f_binary","text":"Converts zoo object binary (1 0) based given threshold.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Zoo Object to Binary — f_binary","text":"","code":"f_binary(x = NULL, threshold = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/f_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Zoo Object to Binary — f_binary","text":"x (required, zoo object) Zoo time series object transform. threshold (required, numeric) Values greater number become 1, others become 0. Set mean time series default. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Zoo Object to Binary — f_binary","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Zoo Object to Binary — f_binary","text":"","code":"x <- zoo_simulate(   data_range = c(0, 1)   )  y <- f_binary(   x = x,   threshold = 0.5 )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_clr.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Rowwise Centered Log-Ratio — f_clr","title":"Data Transformation: Rowwise Centered Log-Ratio — f_clr","text":"Centers log-transformed proportions subtracting geometric mean row.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Rowwise Centered Log-Ratio — f_clr","text":"","code":"f_clr(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Rowwise Centered Log-Ratio — f_clr","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_clr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Rowwise Centered Log-Ratio — f_clr","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_clr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Rowwise Centered Log-Ratio — f_clr","text":"","code":"x <- zoo_simulate(   cols = 5,   data_range = c(0, 500)   )  y <- f_clr(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Detrending and Differencing — f_detrend_difference","title":"Data Transformation: Detrending and Differencing — f_detrend_difference","text":"Performs differencing remove trends zoo time series, isolating short-term fluctuations subtracting values specified lags. function preserves original index metadata, option center output around mean original series. Suitable preprocessing time series data focus random fluctuations unrelated overall trends.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Detrending and Differencing — f_detrend_difference","text":"","code":"f_detrend_difference(x = NULL, lag = 1, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Detrending and Differencing — f_detrend_difference","text":"x (required, zoo object) Zoo time series object transform. lag (optional, integer) center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Detrending and Differencing — f_detrend_difference","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Detrending and Differencing — f_detrend_difference","text":"","code":"x <- zoo_simulate(cols = 2)  y_lag1 <- f_detrend_difference(   x = x,   lag = 1 )  y_lag5 <- f_detrend_difference(   x = x,   lag = 5 )  if(interactive()){   zoo_plot(x)   zoo_plot(y_lag1)   zoo_plot(y_lag5) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"Fits linear model column zoo object using time predictor, predicts outcome, subtracts original data return detrended time series. method might suitable input data seasonal clear trend, please mindful limitations function applied blindly.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"","code":"f_detrend_linear(x = NULL, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"x (required, zoo object) Zoo time series object transform. center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Linear Detrending of Zoo Time Series — f_detrend_linear","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_detrend_linear(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Polynomial Linear Detrending of Zoo Time Series — f_detrend_poly","title":"Data Transformation: Polynomial Linear Detrending of Zoo Time Series — f_detrend_poly","text":"Fits polynomial linear model column zoo object using time predictor, predicts outcome, subtracts original data return detrended time series. method useful alternative f_detrend_linear overall trend time series follow straight line.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Polynomial Linear Detrending of Zoo Time Series — f_detrend_poly","text":"","code":"f_detrend_poly(x = NULL, degree = 2, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Polynomial Linear Detrending of Zoo Time Series — f_detrend_poly","text":"x (required, zoo object) Zoo time series object transform. degree (optional, integer) Degree polynomial. Default: 2 center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Polynomial Linear Detrending of Zoo Time Series — f_detrend_poly","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_detrend_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Polynomial Linear Detrending of Zoo Time Series — f_detrend_poly","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_detrend_poly(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Rowwise Hellinger Transformation — f_hellinger","title":"Data Transformation: Rowwise Hellinger Transformation — f_hellinger","text":"Transforms input zoo object proportions via f_proportion applies Hellinger transformation.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Rowwise Hellinger Transformation — f_hellinger","text":"","code":"f_hellinger(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Rowwise Hellinger Transformation — f_hellinger","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Rowwise Hellinger Transformation — f_hellinger","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_hellinger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Rowwise Hellinger Transformation — f_hellinger","text":"","code":"x <- zoo_simulate(   cols = 5,   data_range = c(0, 500)   )  y <- f_hellinger(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists Available Transformation Functions — f_list","title":"Lists Available Transformation Functions — f_list","text":"Lists Available Transformation Functions","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists Available Transformation Functions — f_list","text":"","code":"f_list()"},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists Available Transformation Functions — f_list","text":"character vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists Available Transformation Functions — f_list","text":"","code":"f_list() #>  [1] \"f_binary\"             \"f_clr\"                \"f_detrend_difference\" #>  [4] \"f_detrend_linear\"     \"f_detrend_poly\"       \"f_hellinger\"          #>  [7] \"f_log\"                \"f_percent\"            \"f_proportion\"         #> [10] \"f_proportion_sqrt\"    \"f_rescale_global\"     \"f_rescale_local\"      #> [13] \"f_scale_global\"       \"f_scale_local\"        \"f_trend_linear\"       #> [16] \"f_trend_poly\""},{"path":"https://blasbenito.github.io/distantia/reference/f_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Log — f_log","title":"Data Transformation: Log — f_log","text":"Applies logarithmic transformation data reduce skewness.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Log — f_log","text":"","code":"f_log(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Log — f_log","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Log — f_log","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Log — f_log","text":"","code":"x <- zoo_simulate(   cols = 5,   data_range = c(0, 500)   )  y <- f_log(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Rowwise Percentages — f_percent","title":"Data Transformation: Rowwise Percentages — f_percent","text":"Data Transformation: Rowwise Percentages","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Rowwise Percentages — f_percent","text":"","code":"f_percent(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Rowwise Percentages — f_percent","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Rowwise Percentages — f_percent","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Rowwise Percentages — f_percent","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_percent(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Rowwise Proportions — f_proportion","title":"Data Transformation: Rowwise Proportions — f_proportion","text":"Data Transformation: Rowwise Proportions","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Rowwise Proportions — f_proportion","text":"","code":"f_proportion(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Rowwise Proportions — f_proportion","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Rowwise Proportions — f_proportion","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Rowwise Proportions — f_proportion","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_proportion(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion_sqrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Rowwise Square Root of Proportions — f_proportion_sqrt","title":"Data Transformation: Rowwise Square Root of Proportions — f_proportion_sqrt","text":"Data Transformation: Rowwise Square Root Proportions","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion_sqrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Rowwise Square Root of Proportions — f_proportion_sqrt","text":"","code":"f_proportion_sqrt(x = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion_sqrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Rowwise Square Root of Proportions — f_proportion_sqrt","text":"x (required, zoo object) Zoo time series object transform. ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion_sqrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Rowwise Square Root of Proportions — f_proportion_sqrt","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_proportion_sqrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Rowwise Square Root of Proportions — f_proportion_sqrt","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_proportion_sqrt(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Global Rescaling of to a New Range — f_rescale_global","title":"Data Transformation: Global Rescaling of to a New Range — f_rescale_global","text":"Data Transformation: Global Rescaling New Range","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Global Rescaling of to a New Range — f_rescale_global","text":"","code":"f_rescale_global(   x = NULL,   new_min = 0,   new_max = 1,   old_min = NULL,   old_max = NULL,   .global,   ... )"},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Global Rescaling of to a New Range — f_rescale_global","text":"x (required, zoo object) Time Series. Default: NULL new_min (optional, numeric) New minimum value. Default: 0 new_max (optional_numeric) New maximum value. Default: 1 old_min (optional, numeric) Old minimum value. Default: NULL old_max (optional_numeric) Old maximum value. Default: NULL .global (optional, logical) Used trigger global scaling within tsl_transform(). ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_global.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Global Rescaling of to a New Range — f_rescale_global","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_global.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Global Rescaling of to a New Range — f_rescale_global","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_rescale_global(   x = x,   new_min = 0,   new_max = 100 )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Local Rescaling of to a New Range — f_rescale_local","title":"Data Transformation: Local Rescaling of to a New Range — f_rescale_local","text":"Data Transformation: Local Rescaling New Range","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Local Rescaling of to a New Range — f_rescale_local","text":"","code":"f_rescale_local(   x = NULL,   new_min = 0,   new_max = 1,   old_min = NULL,   old_max = NULL,   ... )"},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Local Rescaling of to a New Range — f_rescale_local","text":"x (required, zoo object) Time Series. Default: NULL new_min (optional, numeric) New minimum value. Default: 0 new_max (optional_numeric) New maximum value. Default: 1 old_min (optional, numeric) Old minimum value. Default: NULL old_max (optional_numeric) Old maximum value. Default: NULL ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Local Rescaling of to a New Range — f_rescale_local","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_rescale_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Local Rescaling of to a New Range — f_rescale_local","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_rescale_global(   x = x,   new_min = 0,   new_max = 100 )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Global Centering and Scaling — f_scale_global","title":"Data Transformation: Global Centering and Scaling — f_scale_global","text":"Scaling /centering variable using mean standard deviation computed across time series. Global scaling helps dynamic time warping take variable offsets time series account.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Global Centering and Scaling — f_scale_global","text":"","code":"f_scale_global(x = NULL, center = TRUE, scale = TRUE, .global, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Global Centering and Scaling — f_scale_global","text":"x (required, zoo object) Zoo time series object transform. center (optional, logical numeric vector) Triggers centering TRUE. Default: TRUE scale (optional, logical numeric vector) Triggers scaling TRUE. Default: TRUE .global (optional, logical) Used trigger global scaling within tsl_transform(). ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_global.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Global Centering and Scaling — f_scale_global","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_global.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Global Centering and Scaling — f_scale_global","text":"","code":"x <- zoo_simulate()  y <- f_scale_global(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Local Centering and Scaling — f_scale_local","title":"Data Transformation: Local Centering and Scaling — f_scale_local","text":"Scaling /centering variable time series. Local scaling helps dynamic time warping focus entirely shape comparisons.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Local Centering and Scaling — f_scale_local","text":"","code":"f_scale_local(x = NULL, center = TRUE, scale = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Local Centering and Scaling — f_scale_local","text":"x (required, zoo object) Zoo time series object transform. center (optional, logical numeric vector) Triggers centering TRUE. Default: TRUE scale (optional, logical numeric vector) Triggers scaling TRUE. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Local Centering and Scaling — f_scale_local","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_scale_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Local Centering and Scaling — f_scale_local","text":"","code":"x <- zoo_simulate()  y <- f_scale_global(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"Fits linear model column zoo object using time predictor, predicts outcome.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"","code":"f_trend_linear(x = NULL, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"x (required, zoo object) Zoo time series object transform. center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Linear Trend of Zoo Time Series — f_trend_linear","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_trend_linear(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Transformation: Polynomial Linear Trend of Zoo Time Series — f_trend_poly","title":"Data Transformation: Polynomial Linear Trend of Zoo Time Series — f_trend_poly","text":"Fits polynomial linear model column zoo object using time predictor, predicts outcome return polynomial trend time series. method useful alternative f_trend_linear overall. trend time series follow straight line.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Transformation: Polynomial Linear Trend of Zoo Time Series — f_trend_poly","text":"","code":"f_trend_poly(x = NULL, degree = 2, center = TRUE, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Transformation: Polynomial Linear Trend of Zoo Time Series — f_trend_poly","text":"x (required, zoo object) Zoo time series object transform. degree (optional, integer) Degree polynomial. Default: 2 center (required, logical) TRUE, output centered zero. FALSE, centered data mean. Default: TRUE ... (optional, additional arguments) Ignored function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Transformation: Polynomial Linear Trend of Zoo Time Series — f_trend_poly","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/f_trend_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Transformation: Polynomial Linear Trend of Zoo Time Series — f_trend_poly","text":"","code":"x <- zoo_simulate(cols = 2)  y <- f_trend_poly(   x = x )  if(interactive()){   zoo_plot(x)   zoo_plot(y) }"},{"path":"https://blasbenito.github.io/distantia/reference/fagus_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","title":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","text":"Site Coordinates Fagus sylvatica Stands","code":""},{"path":"https://blasbenito.github.io/distantia/reference/fagus_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","text":"","code":"data(fagus_coordinates)"},{"path":"https://blasbenito.github.io/distantia/reference/fagus_coordinates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Site Coordinates of Fagus sylvatica Stands — fagus_coordinates","text":"sf data frame 3 rows 4 columns","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"data frame 648 rows representing enhanced vegetation index, rainfall temperature three stands Fagus sylvatica Spain, Germany, Sweden.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"","code":"data(fagus_dynamics)"},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"data frame 5 columns 648 rows.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"Site coordinates dataset fagus_coordinates.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/fagus_dynamics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Data from Three Fagus sylvatica Stands — fagus_dynamics","text":"","code":"data(\"fagus_dynamics\")  #to time series list fagus <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  #time series plot if(interactive()){   tsl_plot(   tsl = fagus   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/honeycomb_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rainfall and Temperature in The Americas — honeycomb_climate","title":"Rainfall and Temperature in The Americas — honeycomb_climate","text":"Monthly temperature rainfall 2009 2019 72 hexagonal cells covering Americas.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/honeycomb_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rainfall and Temperature in The Americas — honeycomb_climate","text":"","code":"data(honeycomb_climate)"},{"path":"https://blasbenito.github.io/distantia/reference/honeycomb_climate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rainfall and Temperature in The Americas — honeycomb_climate","text":"object class tbl_df (inherits tbl, data.frame) 9432 rows 4 columns.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/honeycomb_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Hexagonal Grid — honeycomb_polygons","title":"Hexagonal Grid — honeycomb_polygons","text":"Sf data frame hexagonal grid dataset honeycomb_climate.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/honeycomb_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hexagonal Grid — honeycomb_polygons","text":"","code":"data(honeycomb_polygons)"},{"path":"https://blasbenito.github.io/distantia/reference/honeycomb_polygons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hexagonal Grid — honeycomb_polygons","text":"object class sf (inherits data.frame) 72 rows 2 columns.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_dtw_cpp","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_dtw_cpp","text":"Computes contribution individual variables similarity/dissimilarity two irregular multivariate time series. opposition legacy version, importance computation performed taking least-cost path whole sequence reference. operation makes importance scores individual variables fully comparable. function generates data frame following columns: variable: name individual variable importance computed, column names arguments x y. psi: global dissimilarity score psi two time series. psi_only_with: dissimilarity x y computed given variable alone. psi_without: dissimilarity x y computed variables. psi_difference: difference psi_only_with psi_without. importance: contribution variable similarity/dissimilarity x y, computed (psi_difference * 100) / psi_all. Positive scores represent contribution dissimilarity, negative scores represent contribution similarity.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_dtw_cpp","text":"","code":"importance_dtw_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   bandwidth = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_dtw_cpp","text":"x (required, numeric matrix) multivariate time series. y (required, numeric matrix) multivariate time series number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: TRUE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: TRUE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_dtw_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Robust Version) — importance_dtw_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   rows = 100   )  y <- zoo_simulate(   seed = 2,   rows = 150   )  #different number of rows #this is not a requirement though! nrow(x) == nrow(y) #> [1] FALSE  #compute importance df <- importance_dtw_cpp(   x = x,   y = y,   distance = \"euclidean\" )  df #>   variable     psi psi_only_with psi_without psi_difference    importance #> 1        a 6.90895      6.968817    6.969328  -0.0005109117  -0.007394926 #> 2        b 6.90895      7.283144    6.930810   0.3523345221   5.099682515 #> 3        c 6.90895      7.214624    6.815044   0.3995803049   5.783516989 #> 4        d 6.90895      6.758557    6.704001   0.0545567459   0.789653200 #> 5        e 6.90895      6.036200    7.133427  -1.0972265521 -15.881234203"},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_legacy_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_dtw_legacy_cpp","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_dtw_legacy_cpp","text":"Computes contribution individual variables similarity/dissimilarity two irregular multivariate time series. opposition robust version, least-cost paths combination variables computed independently, makes results individual variables harder compare. function used objective replicating importance scores generated previous versions package distantia. function generates data frame following columns: variable: name individual variable importance computed, column names arguments x y. psi: global dissimilarity score psi two time series. psi_only_with: dissimilarity x y computed given variable alone. psi_without: dissimilarity x y computed variables. psi_difference: difference psi_only_with psi_without. importance: contribution variable similarity/dissimilarity x y, computed ((psi_all - psi_without) * 100) / psi_all. Positive scores represent contribution dissimilarity, negative scores represent contribution similarity.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_legacy_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_dtw_legacy_cpp","text":"","code":"importance_dtw_legacy_cpp(   y,   x,   distance = \"euclidean\",   diagonal = FALSE,   weighted = TRUE,   ignore_blocks = FALSE,   bandwidth = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_legacy_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_dtw_legacy_cpp","text":"y (required, numeric matrix) multivariate time series number columns 'x'. x (required, numeric matrix) multivariate time series. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_legacy_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_dtw_legacy_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_dtw_legacy_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Time Series (Legacy Version) — importance_dtw_legacy_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   rows = 100   )  y <- zoo_simulate(   seed = 2,   rows = 150   )  #different number of rows #this is not a requirement though! nrow(x) == nrow(y) #> [1] FALSE  #compute importance df <- importance_dtw_legacy_cpp(   x = x,   y = y,   distance = \"euclidean\" )  df #>   variable     psi psi_only_with psi_without psi_difference importance #> 1        a 5.90895      3.707647    6.235127      -2.527480  -5.520046 #> 2        b 5.90895      3.655116    5.511635      -1.856518   6.723961 #> 3        c 5.90895      2.716768    5.741011      -3.024243   2.842119 #> 4        d 5.90895      3.272493    5.840707      -2.568214   1.154905 #> 5        e 5.90895      1.352853    6.137938      -4.785084  -3.875268"},{"path":"https://blasbenito.github.io/distantia/reference/importance_ls_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_ls_cpp","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_ls_cpp","text":"Computes contribution individual variables similarity/dissimilarity two aligned multivariate time series. function generates data frame following columns: variable: name individual variable importance computed, column names arguments x y. psi: global dissimilarity score psi two time series. psi_only_with: dissimilarity x y computed given variable alone. psi_without: dissimilarity x y computed variables. psi_difference: difference psi_only_with psi_without. importance: contribution variable similarity/dissimilarity x y, computed (psi_difference * 100) / psi_all. Positive scores represent contribution dissimilarity, negative scores represent contribution similarity.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_ls_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_ls_cpp","text":"","code":"importance_ls_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/importance_ls_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_ls_cpp","text":"x (required, numeric matrix) multivariate time series. y (required, numeric matrix) multivariate time series number columns rows 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/importance_ls_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_ls_cpp","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/importance_ls_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Contribution of Individual Variables to the Dissimilarity Between Two Aligned Time Series — importance_ls_cpp","text":"","code":"#simulate two regular time series x <- zoo_simulate(   seed = 1,   irregular = FALSE   )  y <- zoo_simulate(   seed = 2,   irregular = FALSE   )  #same number of rows nrow(x) == nrow(y) #> [1] TRUE  #compute importance df <- importance_ls_cpp(   x = x,   y = y,   distance = \"euclidean\" )  df #>   variable      psi psi_only_with psi_without psi_difference  importance #> 1        a 5.216396      4.140726    5.328400     -1.1876738 -22.7680903 #> 2        b 5.216396      5.036421    5.048808     -0.0123872  -0.2374667 #> 3        c 5.216396      6.763852    4.961907      1.8019444  34.5438542 #> 4        d 5.216396      7.782788    4.922800      2.8599885  54.8269006 #> 5        e 5.216396      3.673350    5.914521     -2.2411717 -42.9639841"},{"path":"https://blasbenito.github.io/distantia/reference/momentum.html","id":null,"dir":"Reference","previous_headings":"","what":"Contribution of Individual Variables to Time Series Dissimilarity — momentum","title":"Contribution of Individual Variables to Time Series Dissimilarity — momentum","text":"function measures contribution individual variables dissimilarity pairs time series help answer question makes two time series less similar? Three key values required assess individual variable contributions: psi: dissimilarity variables considered. psi_only_with: dissimilarity using target variable. psi_without: dissimilarity removing target variable. values psi_only_with psi_without can computed two different ways defined argument robust. robust = FALSE: method replicates importance algorithm released first version package, recommended goal compare new results previous studies. normalizes psi_only_with psi_without using least cost path obtained individual variable. different variables may different least cost paths time series, normalization values may change variable variable, making individual importance scores harder compare. robust = TRUE (default, recommended): novel version importance algorithm yields stable comparable solutions. uses least cost path complete time series normalize psi_only_with psi_without, making importance scores separate variables fully comparable. individual importance score variable (column \"importance\" output data frame) based different expressions depending robust argument, even lock_step = TRUE: robust = FALSE: Importance computed ((psi - psi_without) * 100)/psi interpreted \"change similarity variable removed\". robust = TRUE: Importance computed ((psi_only_with - psi_without) * 100)/psi interpreted \"relative dissimilarity induced variable expressed percentage\". either case, positive values indicate variable contributes dissimilarity, negative values indicate net contribution similarity. function allows computing dissimilarity pairs time series using different combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two dissimilarity scores pair time series, one based euclidean distances, another based manhattan distances. happens parameters. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contribution of Individual Variables to Time Series Dissimilarity — momentum","text":"","code":"momentum(   tsl = NULL,   distance = \"euclidean\",   diagonal = TRUE,   bandwidth = 1,   lock_step = FALSE,   robust = TRUE )"},{"path":"https://blasbenito.github.io/distantia/reference/momentum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contribution of Individual Variables to Time Series Dissimilarity — momentum","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE bandwidth (optional, numeric) Proportion space side cost matrix diagonal (aka Itakura parallelogram) defining valid region dynamic time warping, used control flexibility warping path. method prevents degenerate alignments due differences magnitude time series data properly scaled. 1 (default), DTW unconstrained. 0, DTW fully constrained warping path follows matrix diagonal. Recommended values may vary depending nature data. Ignored lock_step = TRUE. Default: 1. lock_step (optional, logical vector) TRUE, time series captured times compared sample wise (dynamic time warping). Requires time series argument tsl fully aligned, return error. Default: FALSE. robust (required, logical). TRUE (default), importance scores computed using least cost path complete time series reference. Setting FALSE allows replicate importance scores previous versions package. option irrelevant lock_step = TRUE. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contribution of Individual Variables to Time Series Dissimilarity — momentum","text":"data frame: x: name time series x. y: name time series y. psi: psi score x y. variable: name individual variable. importance: importance score variable. effect: interpretation \"importance\" column, values \"increases similarity\" \"decreases similarity\". psi_only_with: psi score variable. psi_without: psi score without variable. psi_difference: difference psi_only_with psi_without. distance: name distance metric. diagonal: value argument diagonal. lock_step: value argument lock_step. robust: value argument robust.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contribution of Individual Variables to Time Series Dissimilarity — momentum","text":"","code":"#progress bar # progressr::handlers(global = TRUE)  tsl <- tsl_initialize(   x = distantia::albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  df <- momentum(   tsl = tsl,   lock_step = TRUE #to speed-up example   )  #focus on important columns df[, c(   \"x\",   \"y\",   \"variable\",   \"importance\",   \"effect\"   )] #>       x    y    variable  importance               effect #> 1  X132 X134           x  245.695881 decreases similarity #> 2  X132 X134           y  220.966901 decreases similarity #> 3  X132 X134       speed  -39.219394 increases similarity #> 4  X132 X134 temperature   20.212756 decreases similarity #> 5  X132 X134     heading  -64.096435 increases similarity #> 6  X132 X136           x  167.362857 decreases similarity #> 7  X132 X136           y  179.922707 decreases similarity #> 8  X132 X136       speed  -57.142101 increases similarity #> 9  X132 X136 temperature  269.816263 decreases similarity #> 10 X132 X136     heading -101.695710 increases similarity #> 11 X132 X153           x  420.716727 decreases similarity #> 12 X132 X153           y  193.801511 decreases similarity #> 13 X132 X153       speed  -42.230768 increases similarity #> 14 X132 X153 temperature  -17.262427 increases similarity #> 15 X132 X153     heading  -79.506957 increases similarity #> 16 X134 X136           x  172.225082 decreases similarity #> 17 X134 X136           y  187.120048 decreases similarity #> 18 X134 X136       speed  -61.142823 increases similarity #> 19 X134 X136 temperature  253.045256 decreases similarity #> 20 X134 X136     heading  -91.739170 increases similarity #> 21 X134 X153           x  569.430986 decreases similarity #> 22 X134 X153           y  163.217249 decreases similarity #> 23 X134 X153       speed  -46.222266 increases similarity #> 24 X134 X153 temperature    4.694732 decreases similarity #> 25 X134 X153     heading  -88.399757 increases similarity #> 26 X136 X153           x  507.615365 decreases similarity #> 27 X136 X153           y   56.695744 decreases similarity #> 28 X136 X153       speed  -65.451610 increases similarity #> 29 X136 X153 temperature  240.905381 decreases similarity #> 30 X136 X153     heading -116.246193 increases similarity"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate momentum() Data Frames Across Parameter Combinations — momentum_aggregate","title":"Aggregate momentum() Data Frames Across Parameter Combinations — momentum_aggregate","text":"function momentum() allows variable importance assessments based several combinations arguments . example, argument distance set c(\"euclidean\", \"manhattan\"), output data frame show two importance scores pair compared time series variable, one based euclidean distances, another based manhattan distances. function computes importance stats across combinations parameters. different combinations arguments input data frame, aggregation happens, parameter columns removed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate momentum() Data Frames Across Parameter Combinations — momentum_aggregate","text":"","code":"momentum_aggregate(df = NULL, f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate momentum() Data Frames Across Parameter Combinations — momentum_aggregate","text":"df (required, data frame) Output momentum(), momentum_ls(), momentum_dtw(). Default: NULL f (optional, function) Function summarize psi scores (example, mean) several combinations parameters df. Ignored single combination arguments input. Default: mean ... (optional, arguments f) arguments pass function f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate momentum() Data Frames Across Parameter Combinations — momentum_aggregate","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate momentum() Data Frames Across Parameter Combinations — momentum_aggregate","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  if(interactive()){   tsl_plot(     tsl = tsl,     guide_columns = 3     ) }  #momentum with multiple parameter combinations #------------------------------------- df <- momentum(   tsl = tsl,   distance = c(\"euclidean\", \"manhattan\"),   lock_step = TRUE )  df[, c(   \"x\",   \"y\",   \"distance\",   \"importance\" )] #>          x      y  distance importance #> 1  Germany  Spain euclidean   0.241829 #> 2  Germany  Spain euclidean  19.051052 #> 3  Germany  Spain euclidean -30.814944 #> 4  Germany Sweden euclidean  28.539736 #> 5  Germany Sweden euclidean  -4.845232 #> 6  Germany Sweden euclidean -25.011608 #> 7    Spain Sweden euclidean -22.912397 #> 8    Spain Sweden euclidean   9.732110 #> 9    Spain Sweden euclidean  12.501949 #> 10 Germany  Spain manhattan   1.900935 #> 11 Germany  Spain manhattan  21.154702 #> 12 Germany  Spain manhattan -29.727709 #> 13 Germany Sweden manhattan  29.249949 #> 14 Germany Sweden manhattan  -3.444891 #> 15 Germany Sweden manhattan -26.684626 #> 16   Spain Sweden manhattan -25.080233 #> 17   Spain Sweden manhattan  10.764640 #> 18   Spain Sweden manhattan  12.742187  #aggregation using means df <- momentum_aggregate(   df = df,   f = mean )  df #>          x      y       psi    variable importance               effect #> 1  Germany  Spain 1.3061327         evi   0.241829 decreases similarity #> 2  Germany  Spain 1.3061327    rainfall  19.051052 decreases similarity #> 3  Germany  Spain 1.3061327 temperature -30.814944 increases similarity #> 4  Germany Sweden 0.8576700         evi  28.539736 decreases similarity #> 5  Germany Sweden 0.8576700    rainfall  -4.845232 increases similarity #> 6  Germany Sweden 0.8576700 temperature -25.011608 increases similarity #> 7    Spain Sweden 1.4708497         evi -22.912397 increases similarity #> 8    Spain Sweden 1.4708497    rainfall   9.732110 decreases similarity #> 9    Spain Sweden 1.4708497 temperature  12.501949 decreases similarity #> 10 Germany  Spain 1.2698922         evi   1.900935 decreases similarity #> 11 Germany  Spain 1.2698922    rainfall  21.154702 decreases similarity #> 12 Germany  Spain 1.2698922 temperature -29.727709 increases similarity #> 13 Germany Sweden 0.8591195         evi  29.249949 decreases similarity #> 14 Germany Sweden 0.8591195    rainfall  -3.444891 increases similarity #> 15 Germany Sweden 0.8591195 temperature -26.684626 increases similarity #> 16   Spain Sweden 1.4890286         evi -25.080233 increases similarity #> 17   Spain Sweden 1.4890286    rainfall  10.764640 decreases similarity #> 18   Spain Sweden 1.4890286 temperature  12.742187 decreases similarity #>    psi_difference psi_without psi_only_with #> 1     0.003158608   1.2848422     1.2880008 #> 2     0.248832026   1.1566276     1.4054596 #> 3    -0.402484076   1.3910532     0.9885691 #> 4     0.244776759   0.7873060     1.0320827 #> 5    -0.041556104   0.8829917     0.8414356 #> 6    -0.214517060   0.9099069     0.6953898 #> 7    -0.337006921   1.5557210     1.2187141 #> 8     0.143144705   1.4286475     1.5717922 #> 9     0.183884884   1.4493101     1.6331950 #> 10    0.024139830   1.2638610     1.2880008 #> 11    0.268641921   1.1368177     1.4054596 #> 12   -0.377509869   1.3660790     0.9885691 #> 13    0.251292009   0.7807907     1.0320827 #> 14   -0.029595727   0.8710313     0.8414356 #> 15   -0.229252821   0.9246426     0.6953898 #> 16   -0.373451830   1.5921659     1.2187141 #> 17    0.160288560   1.4115037     1.5717922 #> 18    0.189734804   1.4434602     1.6331950"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Momentum Boxplot — momentum_boxplot","title":"Momentum Boxplot — momentum_boxplot","text":"Boxplot data frame returned momentum() summarizing contribution similarity (negative) /dissimilarity (positive) individual variables across time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum Boxplot — momentum_boxplot","text":"","code":"momentum_boxplot(df = NULL, fill_color = NULL, f = median, text_cex = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum Boxplot — momentum_boxplot","text":"df (required, data frame) Output momentum(), momentum_ls(), momentum_dtw(). Default: NULL fill_color (optional, character vector) boxplot fill color. Default: NULL f (optional, function) Function summarize psi scores (example, mean) several combinations parameters df. Ignored single combination arguments input. Default: mean text_cex (optional, numeric) Multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Momentum Boxplot — momentum_boxplot","text":"boxplot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Momentum Boxplot — momentum_boxplot","text":"","code":"tsl <- tsl_initialize(   x = distantia::albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  df <- momentum(   tsl = tsl,   lock_step = TRUE   )  momentum_boxplot(   df = df   )"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_dtw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Time Warping Variable Importance Analysis of Multivariate Time Series Lists — momentum_dtw","title":"Dynamic Time Warping Variable Importance Analysis of Multivariate Time Series Lists — momentum_dtw","text":"Minimalistic slightly faster version momentum() compute dynamic time warping importance analysis \"robust\" setup multivariate time series lists.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_dtw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Time Warping Variable Importance Analysis of Multivariate Time Series Lists — momentum_dtw","text":"","code":"momentum_dtw(tsl = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_dtw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Time Warping Variable Importance Analysis of Multivariate Time Series Lists — momentum_dtw","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_dtw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic Time Warping Variable Importance Analysis of Multivariate Time Series Lists — momentum_dtw","text":"data frame: x: name time series x. y: name time series y. psi: psi score x y. variable: name individual variable. importance: importance score variable. effect: interpretation \"importance\" column, values \"increases similarity\" \"decreases similarity\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_dtw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Time Warping Variable Importance Analysis of Multivariate Time Series Lists — momentum_dtw","text":"","code":"tsl <- tsl_initialize(   x = distantia::albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  df <- momentum_dtw(   tsl = tsl,   distance = \"euclidean\"   )  #focus on important columns df[, c(   \"x\",   \"y\",   \"variable\",   \"importance\",   \"effect\"   )] #>       x    y    variable   importance               effect #> 1  X132 X134           x   87.6066043 decreases similarity #> 2  X132 X134           y   93.9587187 decreases similarity #> 3  X132 X134       speed  -21.9171171 increases similarity #> 4  X132 X134 temperature   72.8121621 decreases similarity #> 5  X132 X134     heading  -38.0165137 increases similarity #> 6  X132 X136           x   48.3845903 decreases similarity #> 7  X132 X136           y   93.5214543 decreases similarity #> 8  X132 X136       speed  -61.1729252 increases similarity #> 9  X132 X136 temperature  356.8824838 decreases similarity #> 10 X132 X136     heading -102.9830173 increases similarity #> 11 X132 X153           x  427.7381576 decreases similarity #> 12 X132 X153           y  156.1285451 decreases similarity #> 13 X132 X153       speed  -40.9249630 increases similarity #> 14 X132 X153 temperature  -14.2831545 increases similarity #> 15 X132 X153     heading  -79.3532025 increases similarity #> 16 X134 X136           x   61.3361468 decreases similarity #> 17 X134 X136           y  108.9650664 decreases similarity #> 18 X134 X136       speed  -59.2603918 increases similarity #> 19 X134 X136 temperature  310.6812842 decreases similarity #> 20 X134 X136     heading  -90.2797292 increases similarity #> 21 X134 X153           x  592.0783167 decreases similarity #> 22 X134 X153           y  116.4310429 decreases similarity #> 23 X134 X153       speed  -52.4149093 increases similarity #> 24 X134 X153 temperature    0.9936944 decreases similarity #> 25 X134 X153     heading  -85.0271172 increases similarity #> 26 X136 X153           x  507.6153648 decreases similarity #> 27 X136 X153           y   56.6957442 decreases similarity #> 28 X136 X153       speed  -65.4516103 increases similarity #> 29 X136 X153 temperature  240.9053814 decreases similarity #> 30 X136 X153     heading -116.2461929 increases similarity"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock-Step Variable Importance Analysis of Multivariate Time Series Lists — momentum_ls","title":"Lock-Step Variable Importance Analysis of Multivariate Time Series Lists — momentum_ls","text":"Minimalistic slightly faster version momentum() compute lock-step importance analysis multivariate time series lists.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock-Step Variable Importance Analysis of Multivariate Time Series Lists — momentum_ls","text":"","code":"momentum_ls(tsl = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock-Step Variable Importance Analysis of Multivariate Time Series Lists — momentum_ls","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock-Step Variable Importance Analysis of Multivariate Time Series Lists — momentum_ls","text":"data frame: x: name time series x. y: name time series y. psi: psi score x y. variable: name individual variable. importance: importance score variable. effect: interpretation \"importance\" column, values \"increases similarity\" \"decreases similarity\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_ls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock-Step Variable Importance Analysis of Multivariate Time Series Lists — momentum_ls","text":"","code":"tsl <- tsl_initialize(   x = distantia::albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  df <- momentum_ls(   tsl = tsl,   distance = \"euclidean\"   )  #focus on important columns df[, c(   \"x\",   \"y\",   \"variable\",   \"importance\",   \"effect\"   )] #>       x    y    variable  importance               effect #> 1  X132 X134           x  245.695881 decreases similarity #> 2  X132 X134           y  220.966901 decreases similarity #> 3  X132 X134       speed  -39.219394 increases similarity #> 4  X132 X134 temperature   20.212756 decreases similarity #> 5  X132 X134     heading  -64.096435 increases similarity #> 6  X132 X136           x  167.362857 decreases similarity #> 7  X132 X136           y  179.922707 decreases similarity #> 8  X132 X136       speed  -57.142101 increases similarity #> 9  X132 X136 temperature  269.816263 decreases similarity #> 10 X132 X136     heading -101.695710 increases similarity #> 11 X132 X153           x  420.716727 decreases similarity #> 12 X132 X153           y  193.801511 decreases similarity #> 13 X132 X153       speed  -42.230768 increases similarity #> 14 X132 X153 temperature  -17.262427 increases similarity #> 15 X132 X153     heading  -79.506957 increases similarity #> 16 X134 X136           x  172.225082 decreases similarity #> 17 X134 X136           y  187.120048 decreases similarity #> 18 X134 X136       speed  -61.142823 increases similarity #> 19 X134 X136 temperature  253.045256 decreases similarity #> 20 X134 X136     heading  -91.739170 increases similarity #> 21 X134 X153           x  569.430986 decreases similarity #> 22 X134 X153           y  163.217249 decreases similarity #> 23 X134 X153       speed  -46.222266 increases similarity #> 24 X134 X153 temperature    4.694732 decreases similarity #> 25 X134 X153     heading  -88.399757 increases similarity #> 26 X136 X153           x  507.615365 decreases similarity #> 27 X136 X153           y   56.695744 decreases similarity #> 28 X136 X153       speed  -65.451610 increases similarity #> 29 X136 X153 temperature  240.905381 decreases similarity #> 30 X136 X153     heading -116.246193 increases similarity"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Representation of momentum() Data Frames — momentum_spatial","title":"Spatial Representation of momentum() Data Frames — momentum_spatial","text":"Given sf data frame geometry types POLYGON, MULTIPOLYGON, POINT representing time series locations, function transforms output momentum(), momentum_ls(), momentum_dtw() sf data frame. network = TRUE, sf data frame type LINESTRING, edges connecting time series locations. output helpful build many--many dissimilarity maps (see examples). network = FALSE, sf data frame contains geometry input sf argument. output helps build one--many dissimilarity maps.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Representation of momentum() Data Frames — momentum_spatial","text":"","code":"momentum_spatial(df = NULL, sf = NULL, network = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Representation of momentum() Data Frames — momentum_spatial","text":"df (required, data frame) Output momentum(), momentum_ls(), momentum_dtw(). Default: NULL sf (required, sf data frame) Points polygons representing location time series argument 'df'. must column time series names df$x df$y. Default: NULL network (optional, logical) TRUE, resulting sf data frame time LINESTRING represent network edges. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Representation of momentum() Data Frames — momentum_spatial","text":"sf data frame (LINESTRING geometry)","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Representation of momentum() Data Frames — momentum_spatial","text":"","code":"tsl <- distantia::tsl_initialize(   x = distantia::eemian_pollen,   name_column = \"name\",   time_column = \"time\" ) #> Warning: distantia::utils_prepare_time():  duplicated time indices in 'Krumbach_I': #> - value 6.8 replaced with 6.825  df_momentum <- distantia::momentum(   tsl = tsl )  #network many to many sf_momentum <- distantia::momentum_spatial(   df = df_momentum,   sf = distantia::eemian_coordinates,   network = TRUE )  #network map # mapview::mapview( #   sf_momentum, #   layer.name = \"Importance - Abies\", #   label = \"edge_name\", #   zcol = \"importance__Abies\", #   lwd = 3 # ) |> #   suppressWarnings()  #one to many sf_momentum <- distantia::momentum_spatial(   df = df_momentum,   sf = distantia::eemian_coordinates,   network = FALSE )  #subset one county sf_momentum_subset <- sf_momentum[sf_momentum$x == \"Jammertal\", ]  #one to many map #variable inducing most similarity with Jammertal # mapview::mapview( #   sf_momentum_subset, #   layer.name = \"Importance - Abies\", #   label = \"y\", #   zcol = \"most_similarity\", #   alpha.regions = 1 # ) |> #   suppressWarnings()"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Stats of Dissimilarity Data Frame — momentum_stats","title":"Stats of Dissimilarity Data Frame — momentum_stats","text":"Takes output distantia() return data frame one row per time series stats dissimilarity scores time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stats of Dissimilarity Data Frame — momentum_stats","text":"","code":"momentum_stats(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stats of Dissimilarity Data Frame — momentum_stats","text":"df (required, data frame) Output momentum(), momentum_ls(), momentum_dtw(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stats of Dissimilarity Data Frame — momentum_stats","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stats of Dissimilarity Data Frame — momentum_stats","text":"","code":"tsl <- tsl_simulate(   n = 5,   irregular = FALSE   )  df <- distantia(   tsl = tsl,   lock_step = TRUE   )  df_stats <- distantia_stats(df = df)  df_stats #>   name     mean      min       q1   median       q3      max        sd #> 1    A 3.445292 1.433422 2.860488 3.654725 4.239529 5.038297 1.5139307 #> 2    B 3.297064 1.433422 2.719219 3.397854 3.975700 4.959128 1.4584207 #> 3    C 3.903081 3.147818 3.289087 3.840013 4.454007 4.784479 0.7880231 #> 4    D 4.356656 3.647891 3.891928 4.378876 4.843604 5.020981 0.6515853 #> 5    E 4.840564 4.343850 4.805308 4.990054 5.025310 5.038297 0.3328819 #>       range #> 1 3.6048754 #> 2 3.5257063 #> 3 1.6366608 #> 4 1.3730902 #> 5 0.6944473"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_to_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Momentum Data Frame to Wide Format — momentum_to_wide","title":"Momentum Data Frame to Wide Format — momentum_to_wide","text":"Transforms data frame returned momentum() wide format following columns: most_similar: name variable highest contribution similarity (negative value importance column) pair time series. most_dissimilar: name variable highest contribution dissimilarity (positive value importance column) pair time series. importance__variable_name: contribution similarity (negative values) dissimilarity (positive values) given variable. psi_only_with__variable_name: dissimilarity two time series using given variable. psi_without__variable_name: dissimilarity two time series removing given variable.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_to_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum Data Frame to Wide Format — momentum_to_wide","text":"","code":"momentum_to_wide(df = NULL, sep = \"__\")"},{"path":"https://blasbenito.github.io/distantia/reference/momentum_to_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum Data Frame to Wide Format — momentum_to_wide","text":"df (required, data frame) Output momentum(), momentum_ls(), momentum_dtw(). Default: NULL sep (required, character string) Separator name importance metric time series variable. Default: \"__\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/momentum_to_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Momentum Data Frame to Wide Format — momentum_to_wide","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/momentum_to_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Momentum Data Frame to Wide Format — momentum_to_wide","text":"","code":"tsl <- tsl_initialize(   x = distantia::albatross,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_transform(     f = f_scale_global   )  #importance data frame df <- momentum(   tsl = tsl )  df #>       x    y      psi    variable   importance               effect #> 1  X132 X134 1.299380           x   87.6066043 decreases similarity #> 2  X132 X134 1.299380           y   93.9587187 decreases similarity #> 3  X132 X134 1.299380       speed  -21.9171171 increases similarity #> 4  X132 X134 1.299380 temperature   72.8121621 decreases similarity #> 5  X132 X134 1.299380     heading  -38.0165137 increases similarity #> 6  X132 X136 2.449381           x   48.3845903 decreases similarity #> 7  X132 X136 2.449381           y   93.5214543 decreases similarity #> 8  X132 X136 2.449381       speed  -61.1729252 increases similarity #> 9  X132 X136 2.449381 temperature  356.8824838 decreases similarity #> 10 X132 X136 2.449381     heading -102.9830173 increases similarity #> 11 X132 X153 2.091923           x  427.7381576 decreases similarity #> 12 X132 X153 2.091923           y  156.1285451 decreases similarity #> 13 X132 X153 2.091923       speed  -40.9249630 increases similarity #> 14 X132 X153 2.091923 temperature  -14.2831545 increases similarity #> 15 X132 X153 2.091923     heading  -79.3532025 increases similarity #> 16 X134 X136 2.358040           x   61.3361468 decreases similarity #> 17 X134 X136 2.358040           y  108.9650664 decreases similarity #> 18 X134 X136 2.358040       speed  -59.2603918 increases similarity #> 19 X134 X136 2.358040 temperature  310.6812842 decreases similarity #> 20 X134 X136 2.358040     heading  -90.2797292 increases similarity #> 21 X134 X153 2.074241           x  592.0783167 decreases similarity #> 22 X134 X153 2.074241           y  116.4310429 decreases similarity #> 23 X134 X153 2.074241       speed  -52.4149093 increases similarity #> 24 X134 X153 2.074241 temperature    0.9936944 decreases similarity #> 25 X134 X153 2.074241     heading  -85.0271172 increases similarity #> 26 X136 X153 2.666099           x  507.6153648 decreases similarity #> 27 X136 X153 2.666099           y   56.6957442 decreases similarity #> 28 X136 X153 2.666099       speed  -65.4516103 increases similarity #> 29 X136 X153 2.666099 temperature  240.9053814 decreases similarity #> 30 X136 X153 2.666099     heading -116.2461929 increases similarity #>    psi_difference psi_without psi_only_with  distance diagonal bandwidth #> 1      1.13834302    1.253464      2.391807 euclidean     TRUE         1 #> 2      1.22088115    1.232522      2.453403 euclidean     TRUE         1 #> 3     -0.28478672    1.403873      1.119086 euclidean     TRUE         1 #> 4      0.94610694    1.244877      2.190984 euclidean     TRUE         1 #> 5     -0.49397912    1.569450      1.075471 euclidean     TRUE         1 #> 6      1.18512314    2.425775      3.610898 euclidean     TRUE         1 #> 7      2.29069707    2.353934      4.644631 euclidean     TRUE         1 #> 8     -1.49835823    2.895746      1.397388 euclidean     TRUE         1 #> 9      8.74141303    1.586215     10.327628 euclidean     TRUE         1 #> 10    -2.52244683    3.726621      1.204174 euclidean     TRUE         1 #> 11     8.94795300    1.709049     10.657002 euclidean     TRUE         1 #> 12     3.26608898    1.837195      5.103284 euclidean     TRUE         1 #> 13    -0.85611872    2.334915      1.478797 euclidean     TRUE         1 #> 14    -0.29879260    2.127711      1.828918 euclidean     TRUE         1 #> 15    -1.66000791    3.033689      1.373681 euclidean     TRUE         1 #> 16     1.44633065    2.332406      3.778736 euclidean     TRUE         1 #> 17     2.56943945    2.270057      4.839496 euclidean     TRUE         1 #> 18    -1.39738352    2.823389      1.426005 euclidean     TRUE         1 #> 19     7.32598781    1.628667      8.954655 euclidean     TRUE         1 #> 20    -2.12883179    3.443185      1.314354 euclidean     TRUE         1 #> 21    12.28112833    1.516331     13.797459 euclidean     TRUE         1 #> 22     2.41505987    1.903884      4.318944 euclidean     TRUE         1 #> 23    -1.08721129    2.408284      1.321072 euclidean     TRUE         1 #> 24     0.02061161    2.095194      2.115805 euclidean     TRUE         1 #> 25    -1.76366692    3.027265      1.263598 euclidean     TRUE         1 #> 26    13.53352947    2.362495     15.896024 euclidean     TRUE         1 #> 27     1.51156482    2.615352      4.126917 euclidean     TRUE         1 #> 28    -1.74500490    3.130579      1.385574 euclidean     TRUE         1 #> 29     6.42277659    2.007003      8.429779 euclidean     TRUE         1 #> 30    -3.09923889    4.343310      1.244071 euclidean     TRUE         1 #>    lock_step robust #> 1      FALSE   TRUE #> 2      FALSE   TRUE #> 3      FALSE   TRUE #> 4      FALSE   TRUE #> 5      FALSE   TRUE #> 6      FALSE   TRUE #> 7      FALSE   TRUE #> 8      FALSE   TRUE #> 9      FALSE   TRUE #> 10     FALSE   TRUE #> 11     FALSE   TRUE #> 12     FALSE   TRUE #> 13     FALSE   TRUE #> 14     FALSE   TRUE #> 15     FALSE   TRUE #> 16     FALSE   TRUE #> 17     FALSE   TRUE #> 18     FALSE   TRUE #> 19     FALSE   TRUE #> 20     FALSE   TRUE #> 21     FALSE   TRUE #> 22     FALSE   TRUE #> 23     FALSE   TRUE #> 24     FALSE   TRUE #> 25     FALSE   TRUE #> 26     FALSE   TRUE #> 27     FALSE   TRUE #> 28     FALSE   TRUE #> 29     FALSE   TRUE #> 30     FALSE   TRUE  #to wide format df_wide <- momentum_to_wide(   df = df )  df_wide #>      x    y      psi most_similarity most_dissimilarity importance__heading #> 1 X132 X134 1.299380         heading                  y           -38.01651 #> 2 X132 X136 2.449381         heading        temperature          -102.98302 #> 3 X132 X153 2.091923         heading                  x           -79.35320 #> 4 X134 X136 2.358040         heading        temperature           -90.27973 #> 5 X134 X153 2.074241         heading                  x           -85.02712 #> 6 X136 X153 2.666099         heading                  x          -116.24619 #>   importance__speed importance__temperature importance__x importance__y #> 1         -21.91712              72.8121621      87.60660      93.95872 #> 2         -61.17293             356.8824838      48.38459      93.52145 #> 3         -40.92496             -14.2831545     427.73816     156.12855 #> 4         -59.26039             310.6812842      61.33615     108.96507 #> 5         -52.41491               0.9936944     592.07832     116.43104 #> 6         -65.45161             240.9053814     507.61536      56.69574 #>   psi_difference__heading psi_difference__speed psi_difference__temperature #> 1              -0.4939791            -0.2847867                  0.94610694 #> 2              -2.5224468            -1.4983582                  8.74141303 #> 3              -1.6600079            -0.8561187                 -0.29879260 #> 4              -2.1288318            -1.3973835                  7.32598781 #> 5              -1.7636669            -1.0872113                  0.02061161 #> 6              -3.0992389            -1.7450049                  6.42277659 #>   psi_difference__x psi_difference__y psi_only_with__heading #> 1          1.138343          1.220881               1.075471 #> 2          1.185123          2.290697               1.204174 #> 3          8.947953          3.266089               1.373681 #> 4          1.446331          2.569439               1.314354 #> 5         12.281128          2.415060               1.263598 #> 6         13.533529          1.511565               1.244071 #>   psi_only_with__speed psi_only_with__temperature psi_only_with__x #> 1             1.119086                   2.190984         2.391807 #> 2             1.397388                  10.327628         3.610898 #> 3             1.478797                   1.828918        10.657002 #> 4             1.426005                   8.954655         3.778736 #> 5             1.321072                   2.115805        13.797459 #> 6             1.385574                   8.429779        15.896024 #>   psi_only_with__y psi_without__heading psi_without__speed #> 1         2.453403             1.569450           1.403873 #> 2         4.644631             3.726621           2.895746 #> 3         5.103284             3.033689           2.334915 #> 4         4.839496             3.443185           2.823389 #> 5         4.318944             3.027265           2.408284 #> 6         4.126917             4.343310           3.130579 #>   psi_without__temperature psi_without__x psi_without__y #> 1                 1.244877       1.253464       1.232522 #> 2                 1.586215       2.425775       2.353934 #> 3                 2.127711       1.709049       1.837195 #> 4                 1.628667       2.332406       2.270057 #> 5                 2.095194       1.516331       1.903884 #> 6                 2.007003       2.362495       2.615352"},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"Unrestricted shuffling rows within whole sequence.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"","code":"permute_free_by_row_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) function ignores argument sets x.nrow(). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_by_row_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Unrestricted Permutation of Complete Rows — permute_free_by_row_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"Unrestricted shuffling cases within whole sequence.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"","code":"permute_free_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) function ignores argument sets x.nrow(). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_free_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Unrestricted Permutation of Cases — permute_free_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"Divides sequence blocks given size permutes rows within blocks. Larger block sizes increasingly disrupt data structure time.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"","code":"permute_restricted_by_row_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) block size number rows. Minimum value 2, maximum value nrow(x). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_by_row_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Restricted Permutation of Complete Rows Within Blocks — permute_restricted_by_row_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"Divides sequence time series blocks permutes cases within blocks. function preserve rows, used sequence dependent columns. Larger block sizes increasingly disrupt data structure time.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"","code":"permute_restricted_cpp(x, block_size, seed = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"x (required, numeric matrix). Numeric matrix permute. block_size (optional, integer) block size number rows. Minimum value 2, maximum value nrow(x). seed (optional, integer) random seed use.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/permute_restricted_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Restricted Permutation of Cases Within Blocks — permute_restricted_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"Demonstration function compute sum distances consecutive cases time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"","code":"psi_auto_distance(x = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"x (required, zoo object matrix) univariate multivariate time series NAs. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Sum of Distances Between Consecutive Cases in a Time Series — psi_auto_distance","text":"","code":"#distance metric d <- \"euclidean\"  #simulate zoo time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  #sum distance between consecutive samples psi_auto_distance(   x = x,   distance = d ) #> [1] 6.921253"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Sum — psi_auto_sum","title":"Auto Sum — psi_auto_sum","text":"Demonstration function computes sum distances consecutive samples two time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Sum — psi_auto_sum","text":"","code":"psi_auto_sum(x = NULL, y = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Sum — psi_auto_sum","text":"x (required, zoo object numeric matrix) univariate multivariate time series NAs. Default: NULL. y (required, zoo object numeric matrix) time series number columns x NAs. Default: NULL. distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Sum — psi_auto_sum","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_auto_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Auto Sum — psi_auto_sum","text":"","code":"#distance metric d <- \"euclidean\"  #simulate two irregular time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  y <- zoo_simulate(   name = \"y\",   rows = 80,   seasons = 2,   seed = 2 )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #auto sum of distances psi_auto_sum(   x = x,   y = y,   distance = d ) #> [1] 14.79953  #same as: x_sum <- psi_auto_distance(   x = x,   distance = d )  y_sum <- psi_auto_distance(   x = y,   distance = d )  x_sum + y_sum #> [1] 14.79953"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost Matrix — psi_cost_matrix","title":"Cost Matrix — psi_cost_matrix","text":"Demonstration function compute cost matrix distance matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost Matrix — psi_cost_matrix","text":"","code":"psi_cost_matrix(dist_matrix = NULL, diagonal = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost Matrix — psi_cost_matrix","text":"dist_matrix (required, numeric matrix). Distance matrix generated psi_distance_matrix(). Default: NULL diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost Matrix — psi_cost_matrix","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cost Matrix — psi_cost_matrix","text":"","code":"#distance metric d <- \"euclidean\"  #use diagonals in least cost computations diagonal <- TRUE  #simulate two irregular time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  y <- zoo_simulate(   name = \"y\",   rows = 80,   seasons = 2,   seed = 2 )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #distance matrix dist_matrix <- psi_distance_matrix(   x = x,   y = y,   distance = d )  #cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = diagonal )  if(interactive()){   utils_matrix_plot(     m = cost_matrix     ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Least Cost Path — psi_cost_path","title":"Least Cost Path — psi_cost_path","text":"Demonstration function compute least cost path within least cost matrix.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least Cost Path — psi_cost_path","text":"","code":"psi_cost_path(   dist_matrix = NULL,   cost_matrix = NULL,   diagonal = TRUE,   bandwidth = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least Cost Path — psi_cost_path","text":"dist_matrix (required, numeric matrix) Distance matrix generated psi_distance_matrix(). Default: NULL cost_matrix (required, numeric matrix) Cost matrix generated distance matrix psi_cost_matrix(). Default: NULL diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE bandwidth (optional, numeric) Proportion space side cost matrix diagonal (aka Itakura parallelogram) defining valid region dynamic time warping, used control flexibility warping path. method prevents degenerate alignments due differences magnitude time series data properly scaled. 1 (default), DTW unconstrained. 0, DTW fully constrained warping path follows matrix diagonal. Recommended values may vary depending nature data. Ignored lock_step = TRUE. Default: 1.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Least Cost Path — psi_cost_path","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Least Cost Path — psi_cost_path","text":"","code":"#distance metric d <- \"euclidean\"  #simulate two irregular time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  y <- zoo_simulate(   name = \"y\",   rows = 80,   seasons = 2,   seed = 2 )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #distance matrix dist_matrix <- psi_distance_matrix(   x = x,   y = y,   distance = d )  #diagonal least cost path #------------------------  cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = TRUE )  cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix,   diagonal = TRUE )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path     ) }   #orthogonal least cost path #-------------------------- cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = FALSE )  cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix,   diagonal = FALSE )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of Distances in Least Cost Path — psi_cost_path_sum","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"Demonstration function sum distances least cost path.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"","code":"psi_cost_path_sum(path = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"path (required, data frame) least cost path produced psi_cost_path(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_cost_path_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum of Distances in Least Cost Path — psi_cost_path_sum","text":"","code":"#distance metric d <- \"euclidean\"  #simulate two irregular time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  y <- zoo_simulate(   name = \"y\",   rows = 80,   seasons = 2,   seed = 2 )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #distance matrix dist_matrix <- psi_distance_matrix(   x = x,   y = y,   distance = d )  #orthogonal least cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix )  #orthogonal least cost path cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix )  #sum of distances in cost path psi_cost_path_sum(   path = cost_path ) #> [1] 47.38529"},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_lock_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock-Step Distance — psi_distance_lock_step","title":"Lock-Step Distance — psi_distance_lock_step","text":"Demonstration function compute lock-step distance two univariate multivariate time series. function accept NA data matrices x y.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_lock_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock-Step Distance — psi_distance_lock_step","text":"","code":"psi_distance_lock_step(x = NULL, y = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_lock_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock-Step Distance — psi_distance_lock_step","text":"x (required, zoo object numeric matrix) time series NAs. Default: NULL y (zoo object numeric matrix) time series columns x NAs. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_lock_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock-Step Distance — psi_distance_lock_step","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_lock_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock-Step Distance — psi_distance_lock_step","text":"","code":"#distance metric d <- \"euclidean\"  #simulate two time series #of the same length x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  y <- zoo_simulate(   name = \"y\",   rows = 100,   seasons = 2,   seed = 2 )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #sum of distances #between pairs of samples psi_distance_lock_step(   x = x,   y = y,   distance = d ) #> [1] 43.08146"},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Matrix — psi_distance_matrix","title":"Distance Matrix — psi_distance_matrix","text":"Demonstration function compute distance matrix two univariate multivariate time series. function accept NA data matrices x y.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Matrix — psi_distance_matrix","text":"","code":"psi_distance_matrix(x = NULL, y = NULL, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Matrix — psi_distance_matrix","text":"x (required, zoo object numeric matrix) time series NAs. Default: NULL y (zoo object numeric matrix) time series columns x NAs. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Matrix — psi_distance_matrix","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Matrix — psi_distance_matrix","text":"","code":"#distance metric d <- \"euclidean\"  #simulate two irregular time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1 )  y <- zoo_simulate(   name = \"y\",   rows = 80,   seasons = 2,   seed = 2 )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #distance matrix dist_matrix <- psi_distance_matrix(   x = x,   y = y,   distance = d )  if(interactive()){   utils_matrix_plot(     m = dist_matrix     ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_dtw_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_dtw_cpp","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_dtw_cpp","text":"Computes psi score two time series y x number columns. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_dtw_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_dtw_cpp","text":"","code":"psi_dtw_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   bandwidth = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/psi_dtw_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_dtw_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) time series. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. Default: FALSE. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_dtw_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Psi Dissimilarity Score of Two Time-Series — psi_dtw_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized Dissimilarity Score — psi_equation","title":"Normalized Dissimilarity Score — psi_equation","text":"Demonstration function computes psi dissimilarity score (Birks Gordon 1985). Psi computed \\(\\psi = (2a / b) - 1\\), \\(\\) sum distances relevant samples two time series, \\(b\\) cumulative sum distances consecutive samples two time series. computed dynamic time warping, diagonals used computation least cost path, one added result equation .","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized Dissimilarity Score — psi_equation","text":"","code":"psi_equation(a = NULL, b = NULL, diagonal = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized Dissimilarity Score — psi_equation","text":"(required, numeric) Result psi_cost_path_sum(), sum distances least cost path two time series. Default: NULL b (required, numeric) Result psi_auto_sum(), cumulative sum consecutive cases two time series. Default: NULL diagonal (optional, logical) Used correct psi diagonals used computation least cost path. cost matrix least cost path computed using diagonal = TRUE, argument TRUE well. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized Dissimilarity Score — psi_equation","text":"numeric value","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalized Dissimilarity Score — psi_equation","text":"","code":"#distance metric d <- \"euclidean\"  #use diagonals in least cost computations diagonal <- TRUE  #simulate two irregular time series x <- zoo_simulate(   name = \"x\",   rows = 100,   seasons = 2,   seed = 1   )  y <- zoo_simulate(   name = \"y\",   rows = 80,   seasons = 2,   seed = 2   )  if(interactive()){   zoo_plot(x = x)   zoo_plot(x = y) }  #dynamic time warping  #distance matrix dist_matrix <- psi_distance_matrix(   x = x,   y = y,   distance = d )  #cost matrix cost_matrix <- psi_cost_matrix(   dist_matrix = dist_matrix,   diagonal = diagonal )  #least cost path cost_path <- psi_cost_path(   dist_matrix = dist_matrix,   cost_matrix = cost_matrix,   diagonal = diagonal )  if(interactive()){   utils_matrix_plot(     m = cost_matrix,     path = cost_path     ) }   #computation of psi score  #sum of distances in least cost path a <- psi_cost_path_sum(   path = cost_path   )  #auto sum of both time series b <- psi_auto_sum(   x = x,   y = y,   distance = d )  #dissimilarity score psi_equation(   a = a,   b = b,   diagonal = diagonal ) #> [1] 6.403623  #full computation with distantia() tsl <- list(   x = x,   y = y )  distantia(   tsl = tsl,   distance = d,   diagonal = diagonal )$psi #> [1] 6.403623  if(interactive()){   distantia_dtw_plot(     tsl = tsl,     distance = d,     diagonal = diagonal   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Equation of the Psi Dissimilarity Score — psi_equation_cpp","title":"(C++) Equation of the Psi Dissimilarity Score — psi_equation_cpp","text":"Equation compute psi dissimilarity score (Birks Gordon 1985). Psi computed \\(\\psi = (2a / b) - 1\\), \\(\\) sum distances relevant samples two time series, \\(b\\) cumulative sum distances consecutive samples two time series. computed dynamic time warping, diagonals used computation least cost path, one added result equation .","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Equation of the Psi Dissimilarity Score — psi_equation_cpp","text":"","code":"psi_equation_cpp(a, b, diagonal = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Equation of the Psi Dissimilarity Score — psi_equation_cpp","text":"(required, numeric) output cost_path_sum_cpp() least cost path. b (required, numeric) auto sum sequences, result auto_sum_cpp(). diagonal (optional, logical). Must TRUE diagonals used dynamic time warping lock-step distances. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_equation_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Equation of the Psi Dissimilarity Score — psi_equation_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_ls_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_ls_cpp","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_ls_cpp","text":"Computes psi dissimilarity score two time series observed times. Time series y x number columns rows. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_ls_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_ls_cpp","text":"","code":"psi_ls_cpp(x, y, distance = \"euclidean\")"},{"path":"https://blasbenito.github.io/distantia/reference/psi_ls_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_ls_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_ls_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Psi Dissimilarity Score of Two Aligned Time Series — psi_ls_cpp","text":"numeric","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_dtw_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — psi_null_dtw_cpp","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — psi_null_dtw_cpp","text":"Applies permutation methods compute null distributions psi scores two time series. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_dtw_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — psi_null_dtw_cpp","text":"","code":"psi_null_dtw_cpp(   x,   y,   distance = \"euclidean\",   diagonal = TRUE,   weighted = TRUE,   ignore_blocks = FALSE,   bandwidth = 1,   repetitions = 100L,   permutation = \"restricted_by_row\",   block_size = 3L,   seed = 1L )"},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_dtw_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — psi_null_dtw_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix). distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". diagonal (optional, logical). TRUE, diagonals included computation cost matrix. Default: FALSE. weighted (optional, logical). TRUE, diagonal set TRUE, diagonal cost weighted factor 1.414214. Default: FALSE. ignore_blocks (optional, logical). TRUE, blocks consecutive path coordinates trimmed avoid inflating psi distance. argument nothing block_size!. Default: FALSE. bandwidth (required, numeric) Size Itakura parallelogram sides diagonal used constrain least cost path. Expressed fraction number matrix rows columns. Unrestricted default. Default: 1 repetitions (optional, integer) number null psi values generate. Default: 100 permutation (optional, character) permutation method. Valid values listed higher lower randomness: \"free\": unrestricted shuffling rows columns. Ignores block_size. \"free_by_row\": unrestricted shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling rows columns within blocks. \"restricted_by_row\": restricted shuffling rows within blocks. block_size (optional, integer) block size rows restricted permutation. block size 3 indicates row can permuted within block 3 adjacent rows. Minimum value 2. Default: 3. seed (optional, integer) initial random seed use replicability. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_dtw_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Null Distribution of Dissimilarity Scores of Two Time Series — psi_null_dtw_cpp","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_ls_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — psi_null_ls_cpp","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — psi_null_ls_cpp","text":"Applies permutation methods compute null distributions psi scores two time series observed times. NA values removed using function. selected distance function \"chi\" \"cosine\", pairs zeros either removed replaced pseudo-zeros (.e. 0.00001).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_ls_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — psi_null_ls_cpp","text":"","code":"psi_null_ls_cpp(   x,   y,   distance = \"euclidean\",   repetitions = 100L,   permutation = \"restricted_by_row\",   block_size = 3L,   seed = 1L )"},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_ls_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — psi_null_ls_cpp","text":"x (required, numeric matrix) number columns 'y'. y (required, numeric matrix) number columns 'x'. distance (optional, character string) distance name \"names\" column dataset distances (see distances$name). Default: \"euclidean\". repetitions (optional, integer) number null psi values generate. Default: 100 permutation (optional, character) permutation method. Valid values listed higher lower randomness: \"free\": unrestricted shuffling rows columns. Ignores block_size. \"free_by_row\": unrestricted shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling rows columns within blocks. \"restricted_by_row\": restricted shuffling rows within blocks. block_size (optional, integer) block size rows restricted permutation. block size 3 indicates row can permuted within block 3 adjacent rows. Minimum value 2. Default: 3. seed (optional, integer) initial random seed use replicability. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/psi_null_ls_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Null Distribution of the Dissimilarity Scores of Two Aligned Time Series — psi_null_ls_cpp","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"Subsets time series matrix coordinates trimmed least-cost path blocks ignored dissimilarity analysis.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"","code":"subset_matrix_by_rows_cpp(m, rows)"},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"m (required, numeric matrix) univariate multivariate time series. rows (required, integer vector) vector rows subset least-cost path data frame.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"numeric matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/subset_matrix_by_rows_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(C++) Subset Matrix by Rows — subset_matrix_by_rows_cpp","text":"","code":"#simulate a time series m <- zoo_simulate(seed = 1)  #sample some rows rows <- sample(   x = nrow(m),   size = 10   ) |>   sort()  #subset by rows m_subset <- subset_matrix_by_rows_cpp(   m = m,   rows = rows   )  #compare with original m[rows, ] #>                    a         b         c         d         e #> 2010-06-15 0.5577262 0.4963594 0.2662721 0.1651134 0.5160559 #> 2011-08-11 0.4853985 0.1920699 0.2034930 0.2256599 0.5121917 #> 2012-02-10 0.5046172 0.2269883 0.2609874 0.3730869 0.5566889 #> 2013-08-14 0.5719184 0.3731751 0.3478408 0.3344399 0.4395588 #> 2013-09-20 0.5324252 0.3389782 0.4051191 0.3932731 0.5122154 #> 2015-05-18 0.6255854 0.5995674 0.5951206 0.6872253 0.6527355 #> 2016-06-25 0.6465068 0.6766877 0.5900437 0.6013624 0.6435012 #> 2017-06-27 0.5057219 0.5587751 0.6883220 0.7603664 0.4707236 #> 2018-02-02 0.4534827 0.5420206 0.6063876 0.6067925 0.4729409 #> 2018-12-11 0.1963668 0.1476422 0.7414715 0.5586704 0.3289944"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Time Series List Over Time Periods — tsl_aggregate","title":"Aggregate Time Series List Over Time Periods — tsl_aggregate","text":"Time series aggregation involves grouping observations summarizing group values statistical function. operation useful : Decrease (downsampling) temporal resolution time series. Highlight particular states time series time. example, daily temperature series can aggregated month using max represent highest temperatures month. Transform irregular time series regular. function aggregates time series lists overlapping times. Please check overlap assessing columns \"begin\" \"end \" data frame resulting df <- tsl_time(tsl = tsl). Aggregation limited shortest time series time series list. aggregate non-overlapping time series, please subset individual components tsl one one either using tsl_subset() syntax tsl = my_tsl[[]]. Methods function returning single number numeric vector can used aggregate time series list. Quoted unquoted function names can used. Additional arguments functions can passed via argument .... Typical examples : mean \"mean\": see mean(). median \"median\": see stats::median(). quantile \"quantile\": see stats::quantile(). min \"min\": see min(). max \"max\": see max(). sd \"sd\": compute standard deviation, see stats::sd(). var \"var\": compute group variance, see stats::var(). length \"length\": compute group length. sum \"sum\": see sum(). function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Time Series List Over Time Periods — tsl_aggregate","text":"","code":"tsl_aggregate(tsl = NULL, new_time = NULL, f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Time Series List Over Time Periods — tsl_aggregate","text":"tsl (required, list) Time series list. Default: NULL new_time (required, numeric, numeric vector, Date vector, POSIXct vector, keyword) Definition aggregation pattern. available options : numeric vector: \"numeric\" time class, defines breakpoints time series aggregation. \"Date\" \"POSIXct\" vector: , time classes \"Date\" \"POSIXct.\" case, input vector coerced time class tsl argument. numeric: defines fixed time intervals units tsl time series aggregation. Used time class \"numeric\", coerced integer interpreted days time classes \"Date\" \"POSIXct\". keyword (see utils_time_units()): common options time classes \"Date\" \"POSIXct\" : \"millennia\", \"centuries\", \"decades\", \"years\", \"quarters\", \"months\", \"weeks\". Exclusive keywords \"POSIXct\" time class : \"days\", \"hours\", \"minutes\", \"seconds\". time class \"numeric\" accepts keywords coded scientific numbers, \"1e8\" \"1e-8\". f (required, function name) Name function taking vector input returning single value output. Typical examples mean, max,min, median, quantile. Default: mean. ... (optional) arguments f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Time Series List Over Time Periods — tsl_aggregate","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Time Series List Over Time Periods — tsl_aggregate","text":"","code":"# yearly aggregation #---------------------------------- #long-term monthly temperature of 20 cities tsl <- tsl_initialize(   x = cities_temperature,   name_column = \"name\",   time_column = \"time\" )  #plot time series if(interactive()){   tsl_plot(     tsl = tsl[1:4],     guide_columns = 4   ) }  #check time features tsl_time(tsl)[, c(\"name\", \"resolution\", \"units\")] #>                name resolution units #> 1           Bangkok    30.4381  days #> 2            Bogotá    30.4381  days #> 3             Cairo    30.4381  days #> 4             Dhaka    30.4381  days #> 5  Ho Chi Minh City    30.4381  days #> 6          Istanbul    30.4381  days #> 7           Jakarta    30.4381  days #> 8           Karachi    30.4381  days #> 9          Kinshasa    30.4381  days #> 10            Lagos    30.4381  days #> 11             Lima    30.4381  days #> 12           London    30.4381  days #> 13      Los Angeles    30.4381  days #> 14           Manila    30.4381  days #> 15           Moscow    30.4381  days #> 16            Paris    30.4381  days #> 17   Rio De Janeiro    30.4381  days #> 18         Shanghai    30.4381  days #> 19        São Paulo    30.4381  days #> 20            Tokyo    30.4381  days  #aggregation: mean yearly values tsl_year <- tsl_aggregate(   tsl = tsl,   new_time = \"year\",   f = mean )  #' #check time features tsl_time(tsl_year)[, c(\"name\", \"resolution\", \"units\")] #>                name resolution units #> 1           Bangkok     365.25  days #> 2            Bogotá     365.25  days #> 3             Cairo     365.25  days #> 4             Dhaka     365.25  days #> 5  Ho Chi Minh City     365.25  days #> 6          Istanbul     365.25  days #> 7           Jakarta     365.25  days #> 8           Karachi     365.25  days #> 9          Kinshasa     365.25  days #> 10            Lagos     365.25  days #> 11             Lima     365.25  days #> 12           London     365.25  days #> 13      Los Angeles     365.25  days #> 14           Manila     365.25  days #> 15           Moscow     365.25  days #> 16            Paris     365.25  days #> 17   Rio De Janeiro     365.25  days #> 18         Shanghai     365.25  days #> 19        São Paulo     365.25  days #> 20            Tokyo     365.25  days  if(interactive()){   tsl_plot(     tsl = tsl_year[1:4],     guide_columns = 4   ) }   # other supported keywords #----------------------------------  #simulate full range of calendar dates tsl <- tsl_simulate(   n = 2,   rows = 1000,   time_range = c(     \"0000-01-01\",     as.character(Sys.Date())   ) )  #mean value by millennia (extreme case!!!) tsl_millennia <- tsl_aggregate(   tsl = tsl,   new_time = \"millennia\",   f = mean )  if(interactive()){   tsl_plot(tsl_millennia) }  #max value by centuries tsl_century <- tsl_aggregate(   tsl = tsl,   new_time = \"century\",   f = max )  if(interactive()){   tsl_plot(tsl_century) }  #quantile 0.75 value by centuries tsl_centuries <- tsl_aggregate(   tsl = tsl,   new_time = \"centuries\",   f = stats::quantile,   probs = 0.75 #argument of stats::quantile() )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_burst.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate TSL to Univariate TSL — tsl_burst","title":"Multivariate TSL to Univariate TSL — tsl_burst","text":"Takes time series list multivariate zoo objects generate new one one univariate zoo objects per variable. time series list zoo objects \"\" \"B\", columns \"\", \"b\", \"c\", becomes time series list zoo objects \"A__a\", \"A__b\", \"A__c\", \"B__a\", \"B__b\", \"B__c\". column new zoo object named \"x\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_burst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate TSL to Univariate TSL — tsl_burst","text":"","code":"tsl_burst(tsl = NULL, sep = \"__\")"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_burst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate TSL to Univariate TSL — tsl_burst","text":"tsl (required, list) Time series list. Default: NULL sep (required, character string) separator time series name column name. Default: \"__\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_burst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate TSL to Univariate TSL — tsl_burst","text":"time series list: list univariate zoo objects column named \"x\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_burst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate TSL to Univariate TSL — tsl_burst","text":"","code":"tsl <- tsl_simulate(   n = 2,   time_range = c(     \"2010-01-01\",     \"2024-12-31\"   ),   cols = 3 )  tsl_names_get(tsl) #>   A   B  #> \"A\" \"B\"  tsl_colnames_get(tsl) #> $A #> [1] \"a\" \"b\" \"c\" #>  #> $B #> [1] \"a\" \"b\" \"c\" #>   if(interactive()){   tsl_plot(tsl) }  tsl <- tsl_burst(tsl)  tsl_names_get(tsl) #>   A__a   A__b   A__c   B__a   B__b   B__c  #> \"A__a\" \"A__b\" \"A__c\" \"B__a\" \"B__b\" \"B__c\"  tsl_colnames_get(tsl) #> $A__a #> [1] \"x\" #>  #> $A__b #> [1] \"x\" #>  #> $A__c #> [1] \"x\" #>  #> $B__a #> [1] \"x\" #>  #> $B__b #> [1] \"x\" #>  #> $B__c #> [1] \"x\" #>   if(interactive()){   tsl_plot(tsl) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Column Names in Time Series Lists — tsl_colnames_clean","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"Uses function utils_clean_names() simplify normalize messy column names time series list. cleanup operations applied following order: Remove leading trailing whitespaces. Generates syntactically valid names base::make.names(). Replaces dots spaces separator. Coerces names lowercase. capitalize_first = TRUE, first letter capitalized. capitalize_all = TRUE, letters capitalized. argument length provided, base::abbreviate() used abbreviate new column names. suffix provided, added end column name using separator. prefix provided, added beginning column name using separator.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"","code":"tsl_colnames_clean(   tsl = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"tsl (required, list) Time series list. Default: NULL lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots. Also used separate suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) String append column names. Default: NULL. prefix (optional, character string)  String prepend column names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Column Names in Time Series Lists — tsl_colnames_clean","text":"","code":"#generate example data tsl <- tsl_simulate(cols = 3)  #list all column names tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"a\" \"b\" \"c\" #>  #> $B #> [1] \"a\" \"b\" \"c\" #>   #rename columns tsl <- tsl_colnames_set(   tsl = tsl,   names = c(   \"New name 1\",   \"new Name 2\",   \"NEW NAME 3\"   ) )  #check new names tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"New name 1\" \"new Name 2\" \"NEW NAME 3\" #>  #> $B #> [1] \"New name 1\" \"new Name 2\" \"NEW NAME 3\" #>   #clean names tsl <- tsl_colnames_clean(   tsl = tsl )  tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"New_name_1\" \"new_Name_2\" \"NEW_NAME_3\" #>  #> $B #> [1] \"New_name_1\" \"new_Name_2\" \"NEW_NAME_3\" #>   #abbreviated tsl <- tsl_colnames_clean(   tsl = tsl,   capitalize_first = TRUE,   length = 6,   suffix = \"clean\" )  tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"Nw_n_1_clean\" \"Nw_N_2_clean\" \"NEW_NA_clean\" #>  #> $B #> [1] \"Nw_n_1_clean\" \"Nw_N_2_clean\" \"NEW_NA_clean\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Column Names from a Time Series Lists — tsl_colnames_get","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"Get Column Names Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"","code":"tsl_colnames_get(tsl = NULL, names = c(\"all\", \"shared\", \"exclusive\"))"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"tsl (required, list) Time series list. Default: NULL names (optional, character string) Three different sets column names can requested: \"\" (default): list column names zoo object tsl. Unnamed columns tagged string \"unnamed\". \"shared\": character vector shared column names least two zoo objects tsl. \"exclusive\": list names exclusive columns () zoo object tsl.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Column Names from a Time Series Lists — tsl_colnames_get","text":"","code":"#generate example data tsl <- tsl_simulate()  #list all column names tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>   #change one column name names(tsl[[1]])[1] <- \"new_column\"  #all names again tsl_colnames_get(   tsl = tsl,   names = \"all\" ) #> $A #> [1] \"new_column\" \"b\"          \"c\"          \"d\"          \"e\"          #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>   #shared column names tsl_colnames_get(   tsl = tsl,   names = \"shared\" ) #> $A #> [1] \"b\" \"c\" \"d\" \"e\" #>  #> $B #> [1] \"b\" \"c\" \"d\" \"e\" #>   #exclusive column names tsl_colnames_get(   tsl = tsl,   names = \"exclusive\" ) #> $A #> [1] \"new_column\" #>  #> $B #> [1] \"a\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Prefix to Column Names of Time Series List — tsl_colnames_prefix","title":"Append Prefix to Column Names of Time Series List — tsl_colnames_prefix","text":"Append Prefix Column Names Time Series List","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Prefix to Column Names of Time Series List — tsl_colnames_prefix","text":"","code":"tsl_colnames_prefix(tsl = NULL, prefix = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Prefix to Column Names of Time Series List — tsl_colnames_prefix","text":"tsl (required, list) Time series list. Default: NULL prefix (optional, character string)  String prepend column names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Prefix to Column Names of Time Series List — tsl_colnames_prefix","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append Prefix to Column Names of Time Series List — tsl_colnames_prefix","text":"","code":"tsl <- tsl_simulate()  tsl_colnames_get(tsl = tsl) #> $A #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>   tsl <- tsl_colnames_prefix(   tsl = tsl,   prefix = \"my_prefix_\" )  tsl_colnames_get(tsl = tsl) #> $A #> [1] \"my_prefix_a\" \"my_prefix_b\" \"my_prefix_c\" \"my_prefix_d\" \"my_prefix_e\" #>  #> $B #> [1] \"my_prefix_a\" \"my_prefix_b\" \"my_prefix_c\" \"my_prefix_d\" \"my_prefix_e\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Column Names in Time Series Lists — tsl_colnames_set","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"Set Column Names Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"","code":"tsl_colnames_set(tsl = NULL, names = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"tsl (required, list) Time series list. Default: NULL names (required, list character vector): list: names 'tsl', containing vector new column names time series 'tsl'. character vector: vector new column names assigned position.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Column Names in Time Series Lists — tsl_colnames_set","text":"","code":"tsl <- tsl_simulate(   cols = 3   )  tsl_colnames_get(   tsl = tsl   ) #> $A #> [1] \"a\" \"b\" \"c\" #>  #> $B #> [1] \"a\" \"b\" \"c\" #>   #using a vector #extra names are ignored tsl <- tsl_colnames_set(   tsl = tsl,   names = c(\"x\", \"y\", \"z\", \"zz\") )  tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"x\" \"y\" \"z\" #>  #> $B #> [1] \"x\" \"y\" \"z\" #>   #using a list #extra names are ignored too tsl <- tsl_colnames_set(   tsl = tsl,   names = list(     A = c(\"A\", \"B\", \"C\"),     B = c(\"X\", \"Y\", \"Z\", \"ZZ\")   ) )  tsl_colnames_get(   tsl = tsl ) #> $A #> [1] \"A\" \"B\" \"C\" #>  #> $B #> [1] \"X\" \"Y\" \"Z\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_suffix.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Suffix to Column Names of Time Series List — tsl_colnames_suffix","title":"Append Suffix to Column Names of Time Series List — tsl_colnames_suffix","text":"Append Suffix Column Names Time Series List","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_suffix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Suffix to Column Names of Time Series List — tsl_colnames_suffix","text":"","code":"tsl_colnames_suffix(tsl = NULL, suffix = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_suffix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Suffix to Column Names of Time Series List — tsl_colnames_suffix","text":"tsl (required, list) Time series list. Default: NULL suffix (optional, character string) String append column names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_suffix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Suffix to Column Names of Time Series List — tsl_colnames_suffix","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_colnames_suffix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append Suffix to Column Names of Time Series List — tsl_colnames_suffix","text":"","code":"tsl <- tsl_simulate()  tsl_colnames_get(tsl = tsl) #> $A #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $B #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>   tsl <- tsl_colnames_suffix(   tsl = tsl,   suffix = \"_my_suffix\" )  tsl_colnames_get(tsl = tsl) #> $A #> [1] \"a_my_suffix\" \"b_my_suffix\" \"c_my_suffix\" \"d_my_suffix\" \"e_my_suffix\" #>  #> $B #> [1] \"a_my_suffix\" \"b_my_suffix\" \"c_my_suffix\" \"d_my_suffix\" \"e_my_suffix\" #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Count NA Cases in Time Series Lists — tsl_count_NA","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"Converts Inf, -Inf, NaN NA (via tsl_Inf_to_NA() tsl_NaN_to_NA()), counts total number NA cases time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"","code":"tsl_count_NA(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_count_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count NA Cases in Time Series Lists — tsl_count_NA","text":"","code":"#tsl with no NA cases tsl <- tsl_simulate()  tsl_count_NA(tsl = tsl) #> $A #> [1] 0 #>  #> $B #> [1] 0 #>   #tsl with NA cases tsl <- tsl_simulate(   na_fraction = 0.3 )  tsl_count_NA(tsl = tsl) #> $A #> [1] 144 #>  #> $B #> [1] 120 #>   #tsl with variety of empty cases tsl <- tsl_simulate() tsl[[1]][1, 1] <- Inf tsl[[1]][2, 1] <- -Inf tsl[[1]][3, 1] <- NaN tsl[[1]][4, 1] <- NaN  tsl_count_NA(tsl = tsl) #> $A #> [1] 4 #>  #> $B #> [1] 0 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose Issues in Time Series Lists — tsl_diagnose","title":"Diagnose Issues in Time Series Lists — tsl_diagnose","text":"Time Series List (tsl short) named list zoo time series. type object, defined class, used throughout distantia package contain time series data ready processing analysis. structure values tsl must fulfill several general conditions: Structure: List names match attributes \"name\" zoo time series. Zoo time series must least one shared column name. index (extracted zoo::index()) zoo objects must class (either \"Date\", \"POSIXct\", \"numeric\", \"integer\"). \"core data\" (extracted zoo::coredata()) univariate zoo time series must class \"matrix\". Values (optional, full = TRUE): time series least one shared numeric column. NA, Inf, NaN values time series. function analyzes tsl without modifying returns messages describing conditions met, provides hints fix issues.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose Issues in Time Series Lists — tsl_diagnose","text":"","code":"tsl_diagnose(tsl = NULL, full = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose Issues in Time Series Lists — tsl_diagnose","text":"tsl (required, list zoo time series) Time series list diagnose. Default: NULL full (optional, logical) TRUE, full diagnostic triggered. Otherwise, data structure tested. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnose Issues in Time Series Lists — tsl_diagnose","text":"invisible","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_diagnose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnose Issues in Time Series Lists — tsl_diagnose","text":"","code":"#creating three zoo time series  #one with NA values x <- zoo_simulate(   name = \"x\",   cols = 1,   na_fraction = 0.1   )  #with different number of columns #wit repeated name y <- zoo_simulate(   name = \"x\",   cols = 2   )  #with different time class z <- zoo_simulate(   name = \"z\",   cols = 1,   time_range = c(1, 100)   )  #adding a few structural issues  #changing the column name of x colnames(x) <- c(\"b\")  #converting z to vector z <- zoo::zoo(   x = runif(nrow(z)),   order.by = zoo::index(z) )  #storing zoo objects in a list #with mismatched names tsl <- list(   a = x,   b = y,   c = z )  #running full diagnose tsl_diagnose(   tsl = tsl,   full = TRUE   ) #> distantia::tsl_diagnose(): issues in TSL structure: #> --------------------------------------------------- #>  #>   - core data of univariate zoo time series must be of class 'matrix': use lapply(tsl, distantia::zoo_vector_to_matrix) to fix this issue. #>  #>   - list and time series names must match and be unique: reset names with distantia::tsl_names_set(). #>  #>   - missing column names in zoo time series: use distantia::tsl_colnames_set() to rename columns as needed. #>  #>   - no shared column names across time series: use distantia::tsl_colnames_get() and distantia::ts_colnames_set() to identify and rename columns as needed. #>  #>   - time in all time series must be of the same class: use lapply(tsl, function(x) class(zoo::index(x))) to identify and remove or modify the objects with a mismatching class. #>  #> distantia::tsl_diagnose(): issues in TSL values: #> -------------------------------------------------- #>  #>   - there are NA, Inf, -Inf, or NaN cases in the time series: interpolate or remove them with distantia::tsl_handle_NA()."},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle NA Cases in Time Series Lists — tsl_handle_NA","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"Removes imputes NA cases time series lists. Imputation done via interpolation time via zoo::na.approx(), still leading trailing NA cases NA interpolation, zoo::na.spline() applied well fill gaps. Interpolated values forced fall within observed data range. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"","code":"tsl_handle_NA(tsl = NULL, na_action = c(\"impute\", \"omit\"))  tsl_Inf_to_NA(tsl = NULL)  tsl_NaN_to_NA(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"tsl (required, list) Time series list. Default: NULL na_action (required, character) NA handling action. Available options : \"impute\" (default): NA cases interpolated neighbors function time (see zoo::na.approx() zoo::na.spline()). \"omit\": rows NA cases removed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_handle_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle NA Cases in Time Series Lists — tsl_handle_NA","text":"","code":"#tsl with NA cases tsl <- tsl_simulate(   na_fraction = 0.25 )  tsl_count_NA(tsl = tsl) #> $A #> [1] 101 #>  #> $B #> [1] 105 #>   if(interactive()){   #issues warning   tsl_plot(tsl = tsl) }  #omit NA (default) #--------------------------------------  #original row count tsl_nrow(tsl = tsl) #> $A #> [1] 81 #>  #> $B #> [1] 84 #>   #remove rows with NA tsl_no_na <- tsl_handle_NA(   tsl = tsl,   na_action = \"omit\" )  #count rows again #large data loss in this case! tsl_nrow(tsl = tsl_no_na) #> $A #> [1] 19 #>  #> $B #> [1] 18 #>   #count NA again tsl_count_NA(tsl = tsl_no_na) #> $A #> [1] 0 #>  #> $B #> [1] 0 #>   if(interactive()){   tsl_plot(tsl = tsl_no_na) }   #impute NA with zoo::na.approx #--------------------------------------  #impute NA cases tsl_no_na <- tsl_handle_NA(   tsl = tsl,   na_action = \"impute\" )  #count rows again #large data loss in this case! tsl_nrow(tsl = tsl_no_na) #> $A #> [1] 81 #>  #> $B #> [1] 84 #>   if(interactive()){   tsl_plot(tsl = tsl_no_na) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Raw Time Series Data to Time Series List — tsl_initialize","title":"Transform Raw Time Series Data to Time Series List — tsl_initialize","text":"functions package take time series list (tsl short) main input. tsl list zoo time series objects (see zoo::zoo()). formal class tsl objects, requirements objects must follow ensure stability package functionalities (see tsl_diagnose()). requirements : NA, Inf, -Inf, NaN cases zoo objects (see tsl_count_NA() tsl_handle_NA()). zoo objects must least one common column name allow time series comparison (see tsl_colnames_get()). zoo objects character attribute \"name\" identifying object. attribute part zoo class, package ensures attribute lost data manipulations. element time series list named zoo object contains (see tsl_names_get(), tsl_names_set() tsl_names_clean()). time series list contains two zoo objects . function tsl_initialize() (alias tsl_init()) designed convert following data structures time series list: Long data frame: ID column separate time series, time column can classes \"Date\", \"POSIXct\", \"integer\", \"numeric\". resulting zoo objects list elements named values ID column. Wide data frame: column time series representing variable observed time different places. column converted separate zoo object renamed. List vectors: object like list(= runif(10), b = runif(10)) converted time series list many zoo objects vectors defined original list. List matrices: list containing matrices, list(= matrix(runif(30), 10, 3), b = matrix(runif(36), 12, 3)). List zoo objects: list zoo objects, list(= zoo_simulate(), b = zoo_simulate())","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Raw Time Series Data to Time Series List — tsl_initialize","text":"","code":"tsl_initialize(   x = NULL,   name_column = NULL,   time_column = NULL,   lock_step = FALSE,   quiet = FALSE )  tsl_init(   x = NULL,   name_column = NULL,   time_column = NULL,   lock_step = FALSE,   quiet = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Raw Time Series Data to Time Series List — tsl_initialize","text":"x (required, list data frame) Matrix data frame long format, list vectors, list matrices, list zoo objects. Default: NULL. name_column (optional, column name) Column naming individual time series. Numeric names converted character prefix \"X\". Default: NULL time_column (optional lock_step = FALSE, required otherwise, character string) Name column representing time, . Default: NULL. lock_step (optional, logical) TRUE, input sequences subsetted common times according values time_column. quiet (optional, logical) TRUE, messages suppressed. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Raw Time Series Data to Time Series List — tsl_initialize","text":"list matrices","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_initialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Raw Time Series Data to Time Series List — tsl_initialize","text":"","code":"#long data frame #--------------------- data(\"fagus_dynamics\")  #name_column is name #time column is time str(fagus_dynamics) #> 'data.frame':\t648 obs. of  5 variables: #>  $ name       : chr  \"Spain\" \"Spain\" \"Spain\" \"Spain\" ... #>  $ time       : Date, format: \"2001-01-01\" \"2001-02-01\" ... #>  $ evi        : num  0.193 0.242 0.276 0.396 0.445 ... #>  $ rainfall   : num  199.8 50.6 170.9 62.7 52.7 ... #>  $ temperature: num  8.1 7.8 11 10.4 14.1 17.6 18.3 19.6 16.3 16.1 ...  #to tsl #each group in name_column is a different time series tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  #check validity (no messages or errors if valid) tsl_diagnose(tsl)  #class of contained objects lapply(X = tsl, FUN = class) #> $Germany #> [1] \"zoo\" #>  #> $Spain #> [1] \"zoo\" #>  #> $Sweden #> [1] \"zoo\" #>   #get list and zoo names (between double quotes) tsl_names_get(   tsl = tsl,   zoo = TRUE   ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #plot tsl if(interactive()){   tsl_plot(tsl) }  #list of zoo objects #-------------------- x <- zoo_simulate() y <- zoo_simulate()  tsl <- tsl_initialize(   x = list(     x = x,     y = y   ) )  #plot if(interactive()){   tsl_plot(tsl) }   #wide data frame #-------------------- #wide data frame #each column is same variable in different places df <- stats::reshape(   data = fagus_dynamics[, c(     \"name\",     \"time\",     \"evi\"   )],   timevar = \"name\",   idvar = \"time\",   direction = \"wide\",   sep = \"_\" )  str(df) #> 'data.frame':\t216 obs. of  4 variables: #>  $ time       : Date, format: \"2001-01-01\" \"2001-02-01\" ... #>  $ evi_Spain  : num  0.193 0.242 0.276 0.396 0.445 ... #>  $ evi_Germany: num  0.354 0.294 0.345 0.392 0.688 ... #>  $ evi_Sweden : num  0.183 0.182 0.215 0.237 0.519 ... #>  - attr(*, \"reshapeWide\")=List of 5 #>   ..$ v.names: NULL #>   ..$ timevar: chr \"name\" #>   ..$ idvar  : chr \"time\" #>   ..$ times  : chr [1:3] \"Spain\" \"Germany\" \"Sweden\" #>   ..$ varying: chr [1, 1:3] \"evi_Spain\" \"evi_Germany\" \"evi_Sweden\"  #to tsl #key assumptions: #all columns but \"time\" represent #the same variable in different places #all time series are of the same length tsl <- tsl_initialize(   x = df,   time_column = \"time\"   )  #colnames are forced to be the same... tsl_colnames_get(tsl) #> $evi_Spain #> [1] \"x\" #>  #> $evi_Germany #> [1] \"x\" #>  #> $evi_Sweden #> [1] \"x\" #>   #...but can be changed tsl <- tsl_colnames_set(   tsl = tsl,   names = \"evi\" ) tsl_colnames_get(tsl) #> $evi_Spain #> [1] \"evi\" #>  #> $evi_Germany #> [1] \"evi\" #>  #> $evi_Sweden #> [1] \"evi\" #>   #plot if(interactive()){   tsl_plot(tsl) }   #list of vectors #--------------------- #create list of vectors vector_list <- list(   a = cumsum(stats::rnorm(n = 50)),   b = cumsum(stats::rnorm(n = 70)),   c = cumsum(stats::rnorm(n = 20)) )  #to tsl #key assumptions: #all vectors represent the same variable #in different places #time series can be of different lengths #no time column, integer indices are used as time tsl <- tsl_initialize(   x = vector_list )  #plot if(interactive()){   tsl_plot(tsl) }  #list of matrices #------------------------- #create list of matrices matrix_list <- list(   a = matrix(runif(30), nrow = 10, ncol = 3),   b = matrix(runif(80), nrow = 20, ncol = 4) )  #to tsl #key assumptions: #each matrix represents a multivariate time series #in a different place #all multivariate time series have the same columns #no time column, integer indices are used as time tsl <- tsl_initialize(   x = matrix_list )  #check column names tsl_colnames_get(tsl = tsl) #> $a #> [1] \"x1\" \"x2\" \"x3\" #>  #> $b #> [1] \"x1\" \"x2\" \"x3\" \"x4\" #>   #remove exclusive column tsl <- tsl_subset(   tsl = tsl,   shared_cols = TRUE   ) tsl_colnames_get(tsl = tsl) #> $a #> [1] \"x1\" \"x2\" \"x3\" #>  #> $b #> [1] \"x1\" \"x2\" \"x3\" #>   #plot if(interactive()){   tsl_plot(tsl) }  #list of zoo objects #------------------------- zoo_list <- list(   a = zoo_simulate(),   b = zoo_simulate() )  #looks like a time series list! But... tsl_diagnose(tsl = zoo_list) #> distantia::tsl_diagnose(): issues in TSL structure: #> --------------------------------------------------- #>  #>   - list and time series names must match and be unique: reset names with distantia::tsl_names_set().  #let's set the names zoo_list <- tsl_names_set(tsl = zoo_list)  #check again: it's now a valid time series list tsl_diagnose(tsl = zoo_list)  #to do all this in one go: tsl <- tsl_initialize(   x = list(     a = zoo_simulate(),     b = zoo_simulate()   ) )  #plot if(interactive()){   tsl_plot(tsl) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Time Series Lists — tsl_join","title":"Join Time Series Lists — tsl_join","text":"Joins arbitrary time series lists name time. Pairs zoo objects joined zoo::merge.zoo(). Names shared across input TSLs ignored, observations matching time filled NA managed via tsl_handle_NA() depending value argument na_action.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Time Series Lists — tsl_join","text":"","code":"tsl_join(..., na_action = \"impute\")"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Time Series Lists — tsl_join","text":"... (required, time series lists) names time series lists merge. na_action (required, character) NA handling action. Available options : \"impute\" (default): NA cases interpolated neighbors function time (see zoo::na.approx() zoo::na.spline()). \"omit\": rows NA cases removed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join Time Series Lists — tsl_join","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join Time Series Lists — tsl_join","text":"","code":"#generate two time series list to join tsl_a <- tsl_simulate(   n = 2,   cols = 2,   irregular = TRUE,   seed = 1 )  #needs renaming tsl_b <- tsl_simulate(   n = 3,   cols = 2,   irregular = TRUE,   seed = 2 ) |>   tsl_colnames_set(     names = c(\"c\", \"d\")   )  #join tsl <- tsl_join(   tsl_a,   tsl_b ) #> distantia::tsl_join(): 676 NA cases generated were handled via distantia::tsl_handle_NA() with 'na_action = 'impute''.  #plot result if(interactive()){   tsl_plot(     tsl = tsl   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Time Series Names in a Time Series List — tsl_names_clean","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"Combines utils_clean_names() tsl_names_set() help clean, abbreviate, capitalize, add suffix prefix time series list names.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"","code":"tsl_names_clean(   tsl = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"tsl (required, list) Time series list. Default: NULL lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots. Also used separate suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) Suffix clean names. Default: NULL. prefix (optional, character string)  Prefix clean names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Time Series Names in a Time Series List — tsl_names_clean","text":"","code":"#initialize time series list tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  #original names tsl_names_get(   tsl = tsl ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #abbreviate names #--------------------------- tsl_clean <- tsl_names_clean(   tsl = tsl,   capitalize_first = TRUE,   length = 4 #abbreviate to 4 characters )  #new names tsl_names_get(   tsl = tsl_clean ) #>   Grmn   Span   Swdn  #> \"Grmn\" \"Span\" \"Swdn\"   #suffix and prefix #--------------------------- tsl_clean <- tsl_names_clean(   tsl = tsl,   capitalize_all = TRUE,   separator = \"_\",   suffix = \"fagus\",   prefix = \"country\" )  #new names tsl_names_get(   tsl = tsl_clean ) #>   COUNTRY_GERMANY_FAGUS     COUNTRY_SPAIN_FAGUS    COUNTRY_SWEDEN_FAGUS  #> \"COUNTRY_GERMANY_FAGUS\"   \"COUNTRY_SPAIN_FAGUS\"  \"COUNTRY_SWEDEN_FAGUS\""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Series Names from a Time Series Lists — tsl_names_get","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"time series list two sets names: names list items (returned names(tsl)), names contained zoo objects, stored attribute \"name\". names ideally , sake data consistency. function extracts either set names,","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"","code":"tsl_names_get(tsl = NULL, zoo = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"tsl (required, list) Time series list. Default: NULL zoo (optional, logical) TRUE, attributes \"name\" zoo objects returned. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Time Series Names from a Time Series Lists — tsl_names_get","text":"","code":"#initialize a time series list tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )   #get names of zoo objects tsl_names_get(   tsl = tsl,   zoo = TRUE ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #get list names only tsl_names_get(   tsl = tsl,   zoo = FALSE   ) #> [1] \"Germany\" \"Spain\"   \"Sweden\"   #same as names(tsl) #> [1] \"Germany\" \"Spain\"   \"Sweden\""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Time Series Names in a Time Series List — tsl_names_set","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"Sets names time series list internal names zoo objects inside, stored attribute \"name\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"","code":"tsl_names_set(tsl = NULL, names = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"tsl (required, list) Time series list. Default: NULL names (optional, character vector) names set. Must length x. NULL, list x names, names zoo objects inside list taken names list elements.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Time Series Names in a Time Series List — tsl_names_set","text":"","code":"#simulate time series list tsl <- tsl_simulate(n = 3)  #assess validity tsl_diagnose(   tsl = tsl )  #list and zoo names (default) tsl_names_get(   tsl = tsl ) #>   A   B   C  #> \"A\" \"B\" \"C\"   #list names tsl_names_get(   tsl = tsl,   zoo = FALSE ) #> [1] \"A\" \"B\" \"C\"  #renaming list items and zoo objects #------------------------------------ tsl <- tsl_names_set(   tsl = tsl,   names = c(\"X\", \"Y\", \"Z\") )  # check new names tsl_names_get(   tsl = tsl ) #>   X   Y   Z  #> \"X\" \"Y\" \"Z\"   #fixing naming issues #------------------------------------  #creating a invalid time series list names(tsl)[2] <- \"B\"  # check names tsl_names_get(   tsl = tsl ) #>   X   B   Z  #> \"X\" \"Y\" \"Z\"   #validate tsl #returns NOT VALID #recommends a solution tsl_diagnose(   tsl = tsl ) #> distantia::tsl_diagnose(): issues in TSL structure: #> --------------------------------------------------- #>  #>   - list and time series names must match and be unique: reset names with distantia::tsl_names_set().  #fix issue with tsl_names_set() #uses names of zoo objects for the list items tsl <- tsl_names_set(   tsl = tsl )  #validate again tsl_diagnose(   tsl = tsl )  #list names tsl_names_get(   tsl = tsl ) #>   X   B   Z  #> \"X\" \"B\" \"Z\""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests Naming Issues in Time Series Lists — tsl_names_test","title":"Tests Naming Issues in Time Series Lists — tsl_names_test","text":"Tests Naming Issues Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests Naming Issues in Time Series Lists — tsl_names_test","text":"","code":"tsl_names_test(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests Naming Issues in Time Series Lists — tsl_names_test","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests Naming Issues in Time Series Lists — tsl_names_test","text":"logical","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_names_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests Naming Issues in Time Series Lists — tsl_names_test","text":"","code":"#TODO example missing, use the one in tsl_diagnose()"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Number of Columns in Time Series Lists — tsl_ncol","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"Get Number Columns Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"","code":"tsl_ncol(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_ncol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Number of Columns in Time Series Lists — tsl_ncol","text":"","code":"#initialize time series list tsl <- tsl_simulate(   n = 2,   cols = 6 )  #number of columns per zoo object tsl_ncol(tsl = tsl) #> $A #> [1] 6 #>  #> $B #> [1] 6 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Number of Rows in Time Series Lists — tsl_nrow","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"Get Number Rows Time Series Lists","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"","code":"tsl_nrow(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_nrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Number of Rows in Time Series Lists — tsl_nrow","text":"","code":"#simulate zoo time series tsl <- tsl_simulate(   rows = 150   )  #count rows tsl_nrow(   tsl = tsl ) #> $A #> [1] 118 #>  #> $B #> [1] 147 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Time Series List — tsl_plot","title":"Plot Time Series List — tsl_plot","text":"Plot Time Series List","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Time Series List — tsl_plot","text":"","code":"tsl_plot(   tsl = NULL,   columns = 1,   xlim = NULL,   ylim = \"absolute\",   line_color = NULL,   line_width = 1,   text_cex = 1,   guide = TRUE,   guide_columns = 1,   guide_cex = 0.8 )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Time Series List — tsl_plot","text":"tsl (required, list) Time series list. Default: NULL columns (optional, integer) Number columns multipanel plot. Default: 1 xlim (optional, numeric vector) Numeric vector limits x axis. Applies sequences. Default: NULL ylim (optional, numeric vector character string) Numeric vector length two limits vertical axis keyword. Accepted keywords : \"absolute\" (default): time series plotted using overall data range. option used, horizontal lines indicating overall mean, minimum, maximum shown reference. \"relative\": time series plotted using range. Equivalent result can achieved using ylim = NULL. line_color (optional, character vector) vector colors distance cost matrix. NULL, uses appropriate palette generated grDevices::palette.colors(). Default: NULL line_width (optional, numeric vector) Width time series plot. Default: 1 text_cex (optional, numeric) Multiplicator text size. Default: 1 guide (optional, logical) TRUE, plots legend. Default: TRUE guide_columns (optional, integer) Columns line guide. Default: 1. guide_cex (optional, numeric) Size guide's text separation guide's rows. Default: 0.7.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Time Series List — tsl_plot","text":"plot","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Time Series List — tsl_plot","text":"","code":"#simulate zoo time series tsl <- tsl_simulate(   cols = 3   )  if(interactive()){    #default plot   tsl_plot(     tsl = tsl     )    #relative vertical limits   tsl_plot(     tsl = tsl,     ylim = \"relative\"   )    #changing layout   tsl_plot(     tsl = tsl,     columns = 2,     guide_columns = 2   )    #no legend   tsl_plot(     tsl = tsl,     guide = FALSE   )    #changing color   tsl_plot(     tsl = tsl,     line_color = c(\"red\", \"green\", \"blue\"))  }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair Issues in Time Series Lists — tsl_repair","title":"Repair Issues in Time Series Lists — tsl_repair","text":"Time Series List (tsl short) list zoo time series. type object, defined class, used throughout distantia package contain time series data ready processing analysis. structure values tsl must fulfill several general conditions: Structure: list names match attributes \"name\" zoo time series zoo time series must least one shared column name. Data univariate zoo time series (extracted zoo::coredata(x)) must class \"matrix\". Univariate zoo time series often represented vectors, breaks several subsetting transformation operations implemented package. Values (optional, full = TRUE): time series least one shared numeric column. NA, Inf, NaN values time series. function analyzes tsl, tries fix possible issues make comply conditions listed without user input. Use care, might defile data.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair Issues in Time Series Lists — tsl_repair","text":"","code":"tsl_repair(tsl = NULL, full = TRUE)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair Issues in Time Series Lists — tsl_repair","text":"tsl (required, list) Time series list. Default: NULL full (optional, logical) TRUE, full repair (structure values) triggered. Otherwise, data structure repaired Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair Issues in Time Series Lists — tsl_repair","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_repair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair Issues in Time Series Lists — tsl_repair","text":"","code":"#creating three zoo time series  #one with NA values x <- zoo_simulate(   name = \"x\",   cols = 1,   na_fraction = 0.1   )  #with different number of columns #wit repeated name y <- zoo_simulate(   name = \"x\",   cols = 2   )  #with different time class z <- zoo_simulate(   name = \"z\",   cols = 1,   time_range = c(1, 100)   )  #adding a few structural issues  #changing the column name of x colnames(x) <- c(\"b\")  #converting z to vector z <- zoo::zoo(   x = runif(nrow(z)),   order.by = zoo::index(z) )  #storing zoo objects in a list #with mismatched names tsl <- list(   a = x,   b = y,   c = z )  #running full diagnose tsl_diagnose(   tsl = tsl,   full = TRUE   ) #> distantia::tsl_diagnose(): issues in TSL structure: #> --------------------------------------------------- #>  #>   - core data of univariate zoo time series must be of class 'matrix': use lapply(tsl, distantia::zoo_vector_to_matrix) to fix this issue. #>  #>   - list and time series names must match and be unique: reset names with distantia::tsl_names_set(). #>  #>   - missing column names in zoo time series: use distantia::tsl_colnames_set() to rename columns as needed. #>  #>   - no shared column names across time series: use distantia::tsl_colnames_get() and distantia::ts_colnames_set() to identify and rename columns as needed. #>  #>   - time in all time series must be of the same class: use lapply(tsl, function(x) class(zoo::index(x))) to identify and remove or modify the objects with a mismatching class. #>  #> distantia::tsl_diagnose(): issues in TSL values: #> -------------------------------------------------- #>  #>   - there are NA, Inf, -Inf, or NaN cases in the time series: interpolate or remove them with distantia::tsl_handle_NA().  tsl <- tsl_repair(tsl) #> distantia::tsl_repair(): repairs in TSL structure: #> -------------------------------------------------- #>  #>   - converted univariate zoo vectors to matrix. #>  #>   - fixed naming issues. #>  #>   - REPAIR FAILED: cannot repair missing column names in zoo time series. #>  #>   - REPAIR FAILED: no valid shared column names found across all time series. #>  #>   - removed exclusive columns not shared across time series. #>  #> distantia::tsl_repair(): repairs in TSL values: #> ------------------------------------------------- #>  #>   - interpolated NA cases in zoo objects with distantia::tsl_handle_NA(). #> distantia::tsl_diagnose(): issues in TSL structure: #> --------------------------------------------------- #>  #>   - no shared column names across time series: use distantia::tsl_colnames_get() and distantia::ts_colnames_set() to identify and rename columns as needed. #>  #>   - time in all time series must be of the same class: use lapply(tsl, function(x) class(zoo::index(x))) to identify and remove or modify the objects with a mismatching class."},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Time Series Lists to a New Time — tsl_resample","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"Objective Time series resampling interpolates new values time steps available original time series. operation useful : Transform irregular time series regular. Align time series different temporal resolutions. Increase (upsampling) decrease (downsampling) temporal resolution time series. Time series resampling used extrapolate new values outside original time range time series, increase resolution time series factor two . operations known produce non-sensical results. Warning: function resamples time series lists overlapping times. Please check overlap assessing columns \"begin\" \"end \" data frame resulting df <- tsl_time(tsl = tsl). Resampling limited shortest time series time series list. resample non-overlapping time series, please subset individual components tsl one one either using tsl_subset() syntax tsl = my_tsl[[]]. Methods function offers three methods time series interpolation: \"linear\" (default): interpolation via piecewise linear regression implemented zoo::na.approx(). \"spline\": cubic smoothing spline regression implemented stats::smooth.spline(). \"loess\": local polynomial regression fitting implemented stats::loess(). methods used fit models y ~ x y represents values univariate time series x represents numeric version time. functions utils_optimize_spline() utils_optimize_loess() used hood optimize complexity methods \"spline\" \"loess\" finding configuration minimizes root mean squared error (RMSE)  observed predicted y. However, argument max_complexity = TRUE, complexity optimization ignored, maximum complexity model used instead. New time argument new_time offers several alternatives help define new time resulting time series: NULL: target time series (x) resampled regular time within original time range number observations. zoo object: zoo object used template resampling. Useful objective equalizing frequency two separate zoo objects. time series list: time series list used template. range overlapping dates average resolution used generate new resampling time. method used align two time series lists, unless template resampled beforehand. time vector: time vector class compatible time x. keyword: character string defining resampling keyword, obtained via zoo_time(x, keywords = \"resample\")$keywords.. numeric: single number representing desired interval consecutive samples units x (relevant units can obtained via zoo_time(x)$units). Step Step steps resample time series list : time interpolation range computed intersection times tsl. step ensures extrapolation occurs resampling, also makes resampling non-overlapping time series impossible. new_time provided, values new_time outside minimum maximum interpolation times removed avoid extrapolation. new_time provided, regular time within interpolation time range length shortest time series tsl generated. univariate time time series, model y ~ x, y time series x time coerced numeric fitted. max_complexity == FALSE, model complexity minimizes root mean squared error observed predicted y returned. max_complexity == TRUE method = \"spline\" method = \"loess\", first valid model closest maximum complexity returned. fitted model predicted new_time generate resampled time series. Details Please use operation care, limits amount resampling can done without distorting data. safest option keep distance new time points within magnitude distance old time points. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"","code":"tsl_resample(   tsl = NULL,   new_time = NULL,   method = \"linear\",   max_complexity = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"tsl (required, list) Time series list. Default: NULL new_time (required, zoo object, time series list, character string, time vector, numeric) New time resample . time vector provided, must class compatible time tsl.  zoo object time series list provided, time used template resample tsl. Valid resampling keywords (see tsl_time()) allowed. Numeric values interpreted interval widths time units time series. NULL, irregular time series predicted regular version time. Default: NULL method (optional, character string) Name method resample time series. One \"linear\", \"spline\" \"loess\". Default: \"linear\". max_complexity (required, logical). relevant methods \"spline\" \"loess\". TRUE, model optimization ignored, model maximum complexity (overfitted model) used resampling. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample Time Series Lists to a New Time — tsl_resample","text":"","code":"#generate irregular time series tsl <- tsl_simulate(   n = 2,   rows = 100,   irregular = TRUE )  if(interactive()){   tsl_plot(tsl) }   #range of times between samples tsl_time_summary(tsl)[   c(     \"units\",     \"resolution_min\",     \"resolution_max\"     )   ] #> $units #> [1] \"days\" #>  #> $resolution_min #> [1] 181.0909 #>  #> $resolution_max #> [1] 10.06061 #>   #resample to regular using linear interpolation tsl_regular <- tsl_resample(   tsl = tsl ) #> distantia::utils_new_time(): resampling 'tsl' to its average resolution.  if(interactive()){   tsl_plot(tsl_regular) }  #check new resolution tsl_time_summary(tsl_regular)[   c(     \"units\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $units #> [1] \"days\" #>  #> $resolution_min #> [1] 41.37426 #>  #> $resolution_max #> [1] 41.37426 #>   #resample using keywords  #valid resampling keywords tsl_time_summary(   tsl = tsl,   keywords = \"resample\" )$keywords #> [1] \"years\"    \"quarters\" \"months\"   \"weeks\"     #by month tsl_months <- tsl_resample(   tsl = tsl,   new_time = \"months\" )  if(interactive()){   tsl_plot(tsl_months) }  #by week tsl_weeks <- tsl_resample(   tsl = tsl,   new_time = \"weeks\" )  if(interactive()){   tsl_plot(tsl_weeks) }  #resample using time interval  #get relevant units tsl_time(tsl)$units #> [1] \"days\" \"days\"  #resampling to 15 days intervals tsl_15_days <- tsl_resample(   tsl = tsl,   new_time = 15 #days )  tsl_time_summary(tsl_15_days)[   c(     \"units\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $units #> [1] \"days\" #>  #> $resolution_min #> [1] 15 #>  #> $resolution_max #> [1] 15 #>   if(interactive()){   tsl_plot(tsl_15_days) }  #aligning two time series listsç  #two time series lists with different time ranges tsl1 <- tsl_simulate(   n = 2,   rows = 80,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   irregular = TRUE )  tsl2 <- tsl_simulate(   n = 2,   rows = 120,   time_range = c(\"2005-01-01\", \"2024-01-01\"),   irregular = TRUE )  #check time features tsl_time_summary(tsl1)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2010-01-01\" #>  #> $end #> [1] \"2019-12-16\" #>  #> $resolution_min #> [1] 351.4477 #>  #> $resolution_max #> [1] 12.21405 #>   tsl_time_summary(tsl2)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2005-05-14\" #>  #> $end #> [1] \"2023-12-02\" #>  #> $resolution_min #> [1] 365.2105 #>  #> $resolution_max #> [1] 14.60842 #>   #tsl1 to regular tsl1_regular <- tsl_resample(   tsl = tsl1 ) #> distantia::utils_new_time(): resampling 'tsl' to its average resolution.  #tsl2 resampled to time of tsl1_regular tsl2_regular <- tsl_resample(   tsl = tsl2,   new_time = tsl1_regular )  #check alignment tsl_time_summary(tsl1_regular)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2010-03-15\" #>  #> $end #> [1] \"2019-12-07\" #>  #> $resolution_min #> [1] 53.85284 #>  #> $resolution_max #> [1] 53.85284 #>   tsl_time_summary(tsl2_regular)[   c(     \"begin\",     \"end\",     \"resolution_min\",     \"resolution_max\"   ) ] #> $begin #> [1] \"2010-03-15\" #>  #> $end #> [1] \"2019-12-07\" #>  #> $resolution_min #> [1] 53.85284 #>  #> $resolution_max #> [1] 53.85284 #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Time Series List — tsl_simulate","title":"Simulate a Time Series List — tsl_simulate","text":"Generates simulated time series lists testing learning. function supports progress bars generated progressr package, accepts parallelization setup via future::plan() (see examples).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Time Series List — tsl_simulate","text":"","code":"tsl_simulate(   n = 2,   cols = 5,   rows = 100,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   data_range = c(0, 1),   seasons = 0,   na_fraction = 0,   independent = FALSE,   irregular = TRUE,   seed = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Time Series List — tsl_simulate","text":"n (optional, integer) Number time series simulate. Default: 2. cols (optional, integer) Number columns time series. Default: 5 rows (optional, integer) Length time series. Minimum 10, maximum limited. large numbers might crash R session. Default: 100 time_range (optional character numeric vector) Time interval time series. Either character vector dates format YYYY-MM-DD numeric vector. mismatch time_range rows (example, number days time_range smaller rows), upper value time_range adapted rows. Default: c(\"2010-01-01\", \"2020-01-01\") data_range (optional, numeric vector length 2) Extremes time series values. Default: c(0, 1) seasons (optional, integer) Number seasons resulting time series. maximum number seasons computed floor(rows/3). Default: 0 na_fraction (optional, numeric) Value 0 0.5 indicating approximate fraction NA data simulated time series. Default: 0. independent (optional, logical) TRUE, new column simulated time series averaged previous column generate dependency across columns, new simulated time series weighted-averaged time series template generate dependency across time series. Irrelevant cols < 2 n < 2, hard perceive output seasons > 0. Default: FALSE irregular (optional, logical) TRUE, time intervals consecutive samples number rows irregular. Default: TRUE seed (optional, integer) Random seed used simulate zoo object. NULL (default), seed selected random. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Time Series List — tsl_simulate","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Time Series List — tsl_simulate","text":"","code":"# generates a different time series list on each iteration when seed = NULL tsl <- tsl_simulate(   n = 2,   seasons = 4 )  if(interactive()){   tsl_plot(     tsl = tsl   ) }  # generate 3 independent time series tsl_independent <- tsl_simulate(   n = 3,   cols = 3,   independent = TRUE )  if(interactive()){   tsl_plot(     tsl = tsl_independent   ) }  # generate 3 independent time series tsl_dependent <- tsl_simulate(   n = 3,   cols = 3,   independent = FALSE )  if(interactive()){   tsl_plot(     tsl = tsl_dependent   ) }  # with seasons tsl_seasons <- tsl_simulate(   n = 3,   cols = 3,   seasons = 4,   independent = FALSE )  if(interactive()){   tsl_plot(     tsl = tsl_seasons   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing of Time Series Lists — tsl_smooth","title":"Smoothing of Time Series Lists — tsl_smooth","text":"Rolling-window exponential smoothing Time Series Lists. Rolling-window smoothing computes statistic fixed-width window consecutive cases replaces central value computed statistic. commonly used mitigate noise high-frequency time series. Exponential smoothing computes value weighted average current value past smoothed values. method useful reducing noise time series data preserving overall trend. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing of Time Series Lists — tsl_smooth","text":"","code":"tsl_smooth(tsl = NULL, window = 3, f = mean, alpha = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing of Time Series Lists — tsl_smooth","text":"tsl (required, list) Time series list. Default: NULL window (optional, integer) Smoothing window width, number cases. Default: 3 f (optional, quoted unquoted function name) Name standard custom function aggregate numeric vectors. Typical examples mean, max,min, median, quantile. Default: mean. alpha (required, numeric) Exponential smoothing factor range (0, 1]. Determines weight current value relative past values. NULL, arguments window f ignored, exponential smoothing performed instead. Default: NULL ... (optional, additional arguments) additional arguments f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing of Time Series Lists — tsl_smooth","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing of Time Series Lists — tsl_smooth","text":"","code":"tsl <- tsl_simulate(n = 2)  #rolling window smoothing tsl_smooth <- tsl_smooth(   tsl = tsl,   window = 5,   f = mean )  if(interactive()){   tsl_plot(tsl)   tsl_plot(tsl_smooth) }  #exponential smoothing tsl_smooth <- tsl_smooth(   tsl = tsl,   alpha = 0.2 )  if(interactive()){   tsl_plot(tsl)   tsl_plot(tsl_smooth) }"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Statistics of Time Series Lists — tsl_stats","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"function computes variety summary statistics time series numeric column within time series list. statistics include common metrics  minimum, maximum, quartiles, mean, standard deviation, range, interquartile range, skewness, kurtosis, autocorrelation specified lags. irregular time series, autocorrelation computation performed regularizing time series via interpolation zoo_resample(). regularization affect computation stats. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"","code":"tsl_stats(tsl = NULL, lags = 1L)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"tsl (required, list) Time series list. Default: NULL lags (optional, integer) integer specifying number autocorrelation lags compute. NULL, autocorrelation computation disabled. Default: 1.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"data frame: name: name zoo object. rows: rows zoo object. columns: columns zoo object. time_units: time units zoo time series (see zoo_time()). time_begin: beginning time time series. time_end: end time time series. time_length: total length time series, expressed time units. time_resolution: average distance consecutive observations variable: name variable, column zoo object. min: minimum value zoo column. q1: first quartile (25th percentile). median: 50th percentile. q3: third quartile (75th percentile). max: maximum value. mean: average value. sd: standard deviation. range: range variable, computed max - min. iq_range: interquartile range variable, computed q3 - q1. skewness: asymmetry variable distribution. kurtosis:\"tailedness\" variable distribution. ac_lag_1, ac_lag_2, ...: autocorrelation values specified lags.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Statistics of Time Series Lists — tsl_stats","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )   #stats computation df <- tsl_stats(   tsl = tsl,   lags = 3   )  df #>      name    variable NA_count     min        q1   median         q3      max #> 1 Germany         evi        0  0.0689  0.328025  0.44070   0.581550   0.7528 #> 2   Spain         evi        0  0.1828  0.271000  0.34525   0.466925   0.6434 #> 3  Sweden         evi        0  0.0413  0.203850  0.30580   0.608775   0.8764 #> 4 Germany    rainfall        0  3.6000 37.450000 55.95000  76.850000 144.1000 #> 5   Spain    rainfall        0 11.3000 55.650000 78.50000 117.550000 216.6000 #> 6  Sweden    rainfall        0  8.3000 40.775000 59.25000  82.075000 189.6000 #> 7 Germany temperature        0 -1.9000  4.900000 10.40000  16.900000  23.2000 #> 8   Spain temperature        0  4.5000  8.700000 12.60000  17.700000  21.7000 #> 9  Sweden temperature        0 -4.7000  3.200000  8.15000  14.300000  20.0000 #>         mean         sd    range  iq_range    skewness   kurtosis  ac_lag_1 #> 1  0.4475370  0.1467074   0.6839  0.253525 -0.05783267 -1.0177517 0.7320740 #> 2  0.3687245  0.1170178   0.4606  0.195925  0.28642807 -1.1547325 0.7786569 #> 3  0.3890579  0.2116391   0.8351  0.404925  0.27701665 -1.5166381 0.7640670 #> 4 58.7157407 27.8993379 140.5000 39.400000  0.51192914 -0.1499229 0.1538267 #> 5 91.1606481 48.1853638 205.3000 61.900000  0.75359061 -0.2612889 0.3746936 #> 6 64.7592593 32.5032507 181.3000 41.300000  0.87978813  0.7386146 0.2996549 #> 7 10.6861111  6.7015369  25.1000 12.000000 -0.05073437 -1.3166755 0.8177223 #> 8 13.0263889  4.7681695  17.2000  9.000000  0.04692060 -1.3981559 0.8236847 #> 9  8.5263889  6.5337833  24.7000 11.100000 -0.04126297 -1.3096657 0.8301333 #>      ac_lag_2     ac_lag_3 #> 1  0.40592841  0.013433802 #> 2  0.43763156  0.009986400 #> 3  0.41031957 -0.007017265 #> 4 -0.05836706 -0.049548715 #> 5  0.14053009 -0.052349298 #> 6  0.08426556 -0.061084475 #> 7  0.46288511  0.003767174 #> 8  0.45926908 -0.005029601 #> 9  0.47075257  0.006574696"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"Subset Time Series Lists Time Series Names, Time, /Column Names","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"","code":"tsl_subset(   tsl = NULL,   names = NULL,   colnames = NULL,   time = NULL,   numeric_cols = TRUE,   shared_cols = TRUE )"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"tsl (required, list) Time series list. Default: NULL names (optional, character numeric vector) Character vector names numeric vector list indices. NULL, time series kept. Default: NULL colnames (optional, character vector) Column names zoo objects tsl. NULL, columns returned. Default: NULL time (optional, numeric vector) time vector length two used subset rows time. NULL, rows tsl preserved. Default: NULL numeric_cols (optional, logical) TRUE, numeric columns zoo objects returned. Default: TRUE shared_cols (optional, logical) TRUE, columns shared across zoo objects returned. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Time Series Lists by Time Series Names, Time, and/or Column Names — tsl_subset","text":"","code":"#initialize time series list tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  #checking available dimensions  #names tsl_names_get(   tsl = tsl ) #>   Germany     Spain    Sweden  #> \"Germany\"   \"Spain\"  \"Sweden\"   #colnames tsl_colnames_get(   tsl = tsl ) #> $Germany #> [1] \"evi\"         \"rainfall\"    \"temperature\" #>  #> $Spain #> [1] \"evi\"         \"rainfall\"    \"temperature\" #>  #> $Sweden #> [1] \"evi\"         \"rainfall\"    \"temperature\" #>   #time tsl_time(   tsl = tsl )[, c(\"name\", \"begin\", \"end\")] #>      name      begin        end #> 1 Germany 2001-01-01 2018-12-01 #> 2   Spain 2001-01-01 2018-12-01 #> 3  Sweden 2001-01-01 2018-12-01  #subset tsl_new <- tsl_subset(   tsl = tsl,   names = c(\"Sweden\", \"Germany\"),   colnames = c(\"rainfall\", \"temperature\"),   time = c(\"2010-01-01\", \"2015-01-01\") )  #check new dimensions  #names tsl_names_get(   tsl = tsl_new ) #>    Sweden   Germany  #>  \"Sweden\" \"Germany\"   #colnames tsl_colnames_get(   tsl = tsl_new ) #> $Sweden #> [1] \"rainfall\"    \"temperature\" #>  #> $Germany #> [1] \"rainfall\"    \"temperature\" #>   #time tsl_time(   tsl = tsl_new )[, c(\"name\", \"begin\", \"end\")] #>      name      begin        end #> 1  Sweden 2010-01-01 2015-01-01 #> 2 Germany 2010-01-01 2015-01-01"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Features of Time Series Lists — tsl_time","title":"Time Features of Time Series Lists — tsl_time","text":"functions tsl_time() tsl_time_summary() summarize time features time series list. tsl_time() returns data frame one row per time series argument 'tsl' tsl_time_summary() returns list features captured tsl_time(), aggregated across time series. functions return keywords useful functions tsl_aggregate() tsl_resample(), depending value argument keywords.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Features of Time Series Lists — tsl_time","text":"","code":"tsl_time(tsl = NULL, keywords = c(\"resample\", \"aggregate\"))  tsl_time_summary(tsl = NULL, keywords = c(\"resample\", \"aggregate\"))"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Features of Time Series Lists — tsl_time","text":"tsl (required, list) Time series list. Default: NULL keywords (optional, character string vector) Defines keywords returned. \"aggregate\", returns valid keywords zoo_aggregate(). \"resample\", returns valid keywords zoo_resample(). , returns valid keywords. Default: c(\"aggregate\", \"resample\").","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Features of Time Series Lists — tsl_time","text":"tsl_time(): data frame following columns: name (string): time series name. rows (integer): number observations. class (string): time class, one \"Date\", \"POSIXct\", \"numeric.\" units (string): units time series. length (numeric): total length time series expressed units. resolution (numeric): average interval observations expressed units. begin (date numeric): begin time time series. end (date numeric): end time time series. keywords (character vector): valid keywords tsl_aggregate() tsl_resample(), depending value argument keywords. tsl_time_summary(): list following objects: class (string): time class, one \"Date\", \"POSIXct\", \"numeric.\" units (string): units time series. begin (date numeric): begin time time series. end (date numeric): end time time series. resolution_max (numeric): longer time interval consecutive samples expressed units. resolution_min (numeric): shorter time interval consecutive samples expressed units. keywords (character vector): valid keywords tsl_aggregate() tsl_resample(), depending value argument keywords. units_df (data frame) data frame internal use within tsl_aggregate() tsl_resample().","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Features of Time Series Lists — tsl_time","text":"","code":"#simulate a time series list tsl <- tsl_simulate(   n = 3,   rows = 150,   time_range = c(     Sys.Date() - 365,     Sys.Date()   ),   irregular = TRUE )  #time data frame tsl_time(   tsl = tsl ) #>   name rows class units   length resolution      begin        end     keywords #> 1    A  134  Date  days 363.6355   2.734102 2023-12-28 2024-12-26 years, q.... #> 2    B  148  Date  days 360.6768   2.453584 2023-12-31 2024-12-25 quarters.... #> 3    C  117  Date  days 362.6552   3.126338 2023-12-28 2024-12-24 years, q....  #time summary tsl_time_summary(   tsl = tsl ) #> $class #> [1] \"Date\" #>  #> $units #> [1] \"days\" #>  #> $begin #> [1] \"2023-12-28\" #>  #> $end #> [1] \"2024-12-26\" #>  #> $resolution_max #> [1] 0.6175973 #>  #> $resolution_min #> [1] 14.85011 #>  #> $keywords #> [1] \"years\"    \"quarters\" \"months\"   \"weeks\"    \"days\"     #>  #> $units_df #>   factor base_units    units threshold keyword #> 4     NA       days    years       365    TRUE #> 5     NA       days quarters        90    TRUE #> 6     NA       days   months        30    TRUE #> 7     NA       days    weeks         7    TRUE #> 8     NA       days     days         1    TRUE #>"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time_class_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce Elements of Time Series List to same Time Class — tsl_time_class_set","title":"Coerce Elements of Time Series List to same Time Class — tsl_time_class_set","text":"Coerce Elements Time Series List Time Class","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time_class_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce Elements of Time Series List to same Time Class — tsl_time_class_set","text":"","code":"tsl_time_class_set(tsl = NULL, to = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time_class_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce Elements of Time Series List to same Time Class — tsl_time_class_set","text":"tsl (required, list) Time series list. Default: NULL (required, class name) class coerce x . Either \"Date\", \"POSIXct\", \"integer\" \"numeric\". NULL, coerces majority time class. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time_class_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce Elements of Time Series List to same Time Class — tsl_time_class_set","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_time_class_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce Elements of Time Series List to same Time Class — tsl_time_class_set","text":"","code":"#TODO missing example"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Time Series List to Data Frame — tsl_to_df","title":"Transform Time Series List to Data Frame — tsl_to_df","text":"Transform Time Series List Data Frame","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Time Series List to Data Frame — tsl_to_df","text":"","code":"tsl_to_df(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Time Series List to Data Frame — tsl_to_df","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Time Series List to Data Frame — tsl_to_df","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Time Series List to Data Frame — tsl_to_df","text":"","code":"tsl <- tsl_simulate(   n = 3,   rows = 10,   time_range = c(     \"2010-01-01\",     \"2020-01-01\"   ),   irregular = FALSE )  df <- tsl_to_df(   tsl = tsl )  names(df) #> [1] \"name\" \"time\" \"a\"    \"b\"    \"c\"    \"d\"    \"e\"    nrow(df) #> [1] 30 head(df) #>   name       time         a         b         c         d         e #> 1    A 2010-01-01 0.6483628 0.7831815 0.4866803 0.2781007 0.2683083 #> 2    A 2011-02-10 0.7399346 0.5136750 0.2906201 0.1122752 0.2717345 #> 3    A 2012-03-22 0.5388278 0.2823126 0.3124173 0.2180673 0.4475555 #> 4    A 2013-05-02 0.5547488 0.8221867 0.5414729 0.3608414 0.4379729 #> 5    A 2014-06-12 0.4197383 0.5163697 0.5307591 0.3527211 0.4252819 #> 6    A 2015-07-22 0.3085833 0.4314279 0.6188772 0.2496101 0.4569708"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Values in Time Series Lists — tsl_transform","title":"Transform Values in Time Series Lists — tsl_transform","text":"Function time series transformations without changes data dimensions. Generally, functions introduced via argument f change dimensions output time series list. See tsl_resample() tsl_aggregate() transformations requiring changes time series dimensions. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Values in Time Series Lists — tsl_transform","text":"","code":"tsl_transform(tsl = NULL, f = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Values in Time Series Lists — tsl_transform","text":"tsl (required, list) Time series list. Default: NULL f (required, transformation function) name function taking matrix input. Currently, following options implemented, function taking matrix input (example, scale()) work well: f_proportion: proportion computed row. f_percent: percentage computed row. f_hellinger: Hellinger transformation computed row f_scale_local: Local centering /scaling based variable mean standard deviation time series within tsl. f_scale_global: Global centering /scaling based variable mean standard deviation across time series within tsl. f_smooth: Time series smoothing user defined rolling window. f_detrend_difference: Differencing detrending time series via diff(). f_detrend_linear: Detrending seasonal time series via linear modeling. f_detrend_gam: Detrending seasonal time series via Generalized Additive Models. ... (optional, additional arguments f) Optional arguments transformation function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Values in Time Series Lists — tsl_transform","text":"time series list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/tsl_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Values in Time Series Lists — tsl_transform","text":"","code":"#two time series tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_subset(     names = c(\"Spain\", \"Sweden\"),     colnames = c(\"rainfall\", \"temperature\")   )  if(interactive()){   tsl_plot(     tsl = tsl   ) }  #centering and scaling #----------------------------------------- #same mean and standard deviation are used to scale each variable across all time series tsl_scale <- tsl_transform(   tsl = tsl,   f = f_scale_local )  if(interactive()){   tsl_plot(     tsl = tsl_scale,     guide_columns = 3   ) }   #rescaling to a new range #-----------------------------------------  #rescale between -100 and 100 tsl_rescaled <- tsl_transform(   tsl = tsl,   f = f_rescale_local,   new_min = -100,   new_max = 100 )  #old range sapply(X = tsl, FUN = range) #>      Spain Sweden #> [1,]   4.5   -4.7 #> [2,] 216.6  189.6  #new range sapply(X = tsl_rescaled, FUN = range) #>      Spain Sweden #> [1,]  -100   -100 #> [2,]   100    100    #numeric transformations #----------------------------------------- #eemian pollen counts tsl <- tsl_initialize(   x = eemian_pollen,   name_column = \"name\",   time_column = \"time\" ) #> Warning: distantia::utils_prepare_time():  duplicated time indices in 'Krumbach_I': #> - value 6.8 replaced with 6.825  if(interactive()){   tsl_plot(     tsl = tsl   ) }  #percentages tsl_percentage <- tsl_transform(   tsl = tsl,   f = f_percent )  if(interactive()){   tsl_plot(     tsl = tsl_percentage   ) }  #hellinger transformation tsl_hellinger <- tsl_transform(   tsl = tsl,   f = f_hellinger )  if(interactive()){   tsl_plot(     tsl = tsl_hellinger   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensures Correct Class for Time Arguments — utils_as_time","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"function guesses class vector based elements. can handle numeric vectors, character vectors can coerced either \"Date\" \"POSIXct\" classes, vectors already \"Date\" \"POSIXct\" classes.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"","code":"utils_as_time(x = NULL, to_class = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"x (required, vector) Vectors classes 'numeric', 'Date', 'POSIXct' valid returned without transformation. Character vectors analyzed determine probable type, coerced 'Date' 'POSIXct' depending number elements. Generally, character vector representing ISO 8601 standard, like \"YYYY-MM-DD\" \"YYYY-MM-DD HH:MM:SS\" converted valid class. character vector coerced date, returned . Default: NULL to_class (optional, class) Options : NULL, \"numeric\", \"Date\", \"POSIXct\". NULL, 'x' returned appropriate time class. Otherwise, 'x' coerced given class. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"time vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_as_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensures Correct Class for Time Arguments — utils_as_time","text":"","code":"# numeric utils_as_time(   x = c(-123120, 1200)   ) #> [1] -123120    1200  # character string to Date utils_as_time(   x = c(\"2022-03-17\", \"2024-02-05\")   ) #> [1] \"2022-03-17\" \"2024-02-05\"  # incomplete character strings to Date utils_as_time(   x = c(\"2022\", \"2024\")   ) #> Warning: Argument 'x' of class 'character' must have the format '%Y-%m-%d' for class 'Date', or '%Y-%m-%d %H:%M:%S' for class 'POSIXct' #> [1] \"2022\" \"2024\"  utils_as_time(   x = c(\"2022-02\", \"2024-03\")   ) #> Warning: Argument 'x' of class 'character' must have the format '%Y-%m-%d' for class 'Date', or '%Y-%m-%d %H:%M:%S' for class 'POSIXct' #> [1] \"2022-02\" \"2024-03\"  # character string to POSIXct utils_as_time(   x = c(\"2022-03-17 12:30:45\", \"2024-02-05 11:15:45\")   ) #> [1] \"2022-03-17 12:30:45 UTC\" \"2024-02-05 11:15:45 UTC\"  # Date vector (returns the input) utils_as_time(   x = as.Date(c(\"2022-03-17\", \"2024-02-05\"))   ) #> [1] \"2022-03-17\" \"2024-02-05\"  # POSIXct vector (returns the input) utils_as_time(   x = as.POSIXct(c(\"2022-03-17 12:30:45\", \"2024-02-05 11:15:45\"))   ) #> [1] \"2022-03-17 12:30:45 UTC\" \"2024-02-05 11:15:45 UTC\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"Default Block Size Restricted Permutation Dissimilarity Analyses","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"","code":"utils_block_size(tsl = NULL, block_size = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"tsl (required, list) Time series list. Default: NULL block_size (optional, integer) Row block sizes restricted permutation test. relevant permutation methods \"restricted\" \"restricted_by_row\". block size n indicates row can permuted within block n adjacent rows. NULL, defaults rounded one tenth shortest time_series tsl. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_block_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Block Size for Restricted Permutation in Dissimilarity Analyses — utils_block_size","text":"integer","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_boxplot_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Common Boxplot Component of distantia_boxplot() and momentum_boxplot() — utils_boxplot_common","title":"Common Boxplot Component of distantia_boxplot() and momentum_boxplot() — utils_boxplot_common","text":"Common Boxplot Component distantia_boxplot() momentum_boxplot()","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_boxplot_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common Boxplot Component of distantia_boxplot() and momentum_boxplot() — utils_boxplot_common","text":"","code":"utils_boxplot_common(   variable = NULL,   value = NULL,   fill_color = NULL,   f = median,   main = NULL,   xlab = NULL,   ylab = NULL,   text_cex = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_boxplot_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common Boxplot Component of distantia_boxplot() and momentum_boxplot() — utils_boxplot_common","text":"variable (required, character vector) vector variable time series names. Default: NULL value (required, numeric vector) vector numeric values compute boxplot . Must length variable. Default: NULL fill_color (optional, character vector) boxplot fill color. Default: NULL f (optional, function) function used aggregate input data frame arrange boxes. One mean median. Default: median. main (optional, string) boxplot title. Default: NULL xlab (optional, string) x axis label. Default: NULL ylab (optional, string) y axis label. Default: NULL text_cex (optional, numeric) Multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_boxplot_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common Boxplot Component of distantia_boxplot() and momentum_boxplot() — utils_boxplot_common","text":"boxplot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_boxplot_common.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common Boxplot Component of distantia_boxplot() and momentum_boxplot() — utils_boxplot_common","text":"","code":"utils_boxplot_common(   variable = rep(x = c(\"a\", \"b\"), times = 50),   value = stats::runif(100) )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_distantia.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Input Arguments of distantia() and momentum(). — utils_check_args_distantia","title":"Check Input Arguments of distantia() and momentum(). — utils_check_args_distantia","text":"Check Input Arguments distantia() momentum().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_distantia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Input Arguments of distantia() and momentum(). — utils_check_args_distantia","text":"","code":"utils_check_args_distantia(   tsl = NULL,   distance = NULL,   diagonal = NULL,   bandwidth = NULL,   lock_step = NULL,   repetitions = NULL,   permutation = NULL,   block_size = NULL,   seed = NULL,   robust = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_distantia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Input Arguments of distantia() and momentum(). — utils_check_args_distantia","text":"tsl (required, time series list) list zoo time series. Default: NULL distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\". diagonal (optional, logical vector). TRUE, diagonals included dynamic time warping computation. Default: TRUE bandwidth (optional, numeric) Proportion space side cost matrix diagonal (aka Itakura parallelogram) defining valid region dynamic time warping, used control flexibility warping path. method prevents degenerate alignments due differences magnitude time series data properly scaled. 1 (default), DTW unconstrained. 0, DTW fully constrained warping path follows matrix diagonal. Recommended values may vary depending nature data. Ignored lock_step = TRUE. Default: 1. lock_step (optional, logical vector) TRUE, time series captured times compared sample wise (dynamic time warping). Requires time series argument tsl fully aligned, return error. Default: FALSE. repetitions (optional, integer vector) number permutations compute p-value. 0, p-values computed. Otherwise, minimum 2. resolution p-values overall computation time depends number permutations. Default: 0 permutation (optional, character vector) permutation method, relevant repetitions higher zero. Valid values : \"restricted_by_row\", \"restricted\", \"free_by_row\", \"free\". Default: \"restricted_by_row\". block_size (optional, integer) Size row blocks restricted permutation test. relevant permutation methods \"restricted\" \"restricted_by_row\" repetitions higher zero. block size n indicates row can permuted within block n adjacent rows. NULL, defaults rounded one tenth shortest time series tsl. Default: NULL. seed (optional, integer) initial random seed use replicability computing p-values. Default: 1 robust (required, logical). TRUE (default), importance scores computed using least cost path complete time series reference. Setting FALSE allows replicate importance scores previous versions package. option irrelevant lock_step = TRUE. Default: TRUE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_distantia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Input Arguments of distantia() and momentum(). — utils_check_args_distantia","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Input Matrix — utils_check_args_matrix","title":"Checks Input Matrix — utils_check_args_matrix","text":"Checks Input Matrix","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Input Matrix — utils_check_args_matrix","text":"","code":"utils_check_args_matrix(m = NULL, arg_name = \"m\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Input Matrix — utils_check_args_matrix","text":"m (required, matrix) distance cost matrix resulting psi_distance_matrix() psi_cost_matrix(). Default: NULL arg_name (optional, character string) name argument checked. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Input Matrix — utils_check_args_matrix","text":"matrix","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Least Cost Path — utils_check_args_path","title":"Checks Least Cost Path — utils_check_args_path","text":"Checks Least Cost Path","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Least Cost Path — utils_check_args_path","text":"","code":"utils_check_args_path(path = NULL, arg_name = \"path\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Least Cost Path — utils_check_args_path","text":"path (required, data frame) least cost path generated psi_cost_path(). data frame must attribute type == \"cost_path, must computed time series used compute matrix m. Default: NULL. arg_name (optional, character string) name argument checked. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Least Cost Path — utils_check_args_path","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_tsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural Check for Time Series Lists — utils_check_args_tsl","title":"Structural Check for Time Series Lists — utils_check_args_tsl","text":"Internal function check time series list list zoo objects minimum number objects. comprehensive test, use tsl_diagnose().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_tsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural Check for Time Series Lists — utils_check_args_tsl","text":"","code":"utils_check_args_tsl(tsl = NULL, min_length = 2)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_tsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural Check for Time Series Lists — utils_check_args_tsl","text":"tsl (required, list) list zoo objects. Default: NULL min_length (required, positive integer) minimum number zoo objects tsl. Default: 2","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_tsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural Check for Time Series Lists — utils_check_args_tsl","text":"error messages ()","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_zoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Argument x — utils_check_args_zoo","title":"Checks Argument x — utils_check_args_zoo","text":"Checks Argument x","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_zoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Argument x — utils_check_args_zoo","text":"","code":"utils_check_args_zoo(x = NULL, arg_name = \"x\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_zoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Argument x — utils_check_args_zoo","text":"x (required, zoo object) zoo time series. Default: NULL arg_name (optional, character string) name argument checked. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_args_zoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Argument x — utils_check_args_zoo","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Distance Argument — utils_check_distance_args","title":"Check Distance Argument — utils_check_distance_args","text":"Check Distance Argument","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Distance Argument — utils_check_distance_args","text":"","code":"utils_check_distance_args(distance = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Distance Argument — utils_check_distance_args","text":"distance (optional, character vector) name abbreviation distance method. Valid values columns \"names\" \"abbreviation\" dataset distances. Default: \"euclidean\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Distance Argument — utils_check_distance_args","text":"character vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_distance_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Distance Argument — utils_check_distance_args","text":"","code":"utils_check_distance_args(   distance = c(     \"euclidean\",     \"euc\"    )   ) #> [1] \"euclidean\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks Classes of List Elements Against Expectation — utils_check_list_class","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"Checks Classes List Elements Expectation","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"","code":"utils_check_list_class(x = NULL, expected_class = \"data.frame\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"x (required, list) Default: NULL expected_class (required, class name). One \"data.frame\", \"matrix\", \"vector\". Default: \"data.frame\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_check_list_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks Classes of List Elements Against Expectation — utils_check_list_class","text":"side effects","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Character Vector of Names — utils_clean_names","title":"Clean Character Vector of Names — utils_clean_names","text":"Clean format character vectors use column names variable names.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Character Vector of Names — utils_clean_names","text":"","code":"utils_clean_names(   x = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Character Vector of Names — utils_clean_names","text":"x (required, character vector) Names cleaned. Default: NULL lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots appending suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) String append cleaned names. Default: NULL. prefix (optional, character string)  String prepend cleaned names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Character Vector of Names — utils_clean_names","text":"character vector","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Character Vector of Names — utils_clean_names","text":"cleanup operations applied following order: Remove leading trailing whitespaces. Generates syntactically valid names base::make.names(). Replaces dots spaces separator. Coerces names lowercase. argument length provided, base::abbreviate() used abbreviate new column names. suffix provided, added end column name using separator. prefix provided, added beginning column name using separator. capitalize_first = TRUE, first letter capitalized. capitalize_all = TRUE, letters capitalized.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_clean_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Character Vector of Names — utils_clean_names","text":"","code":"x <- c(   \"GerMany\",   \"spain\",   \"SWEDEN\" )  #abbreviate names #--------------------------- #abbreviate to 4 characters utils_clean_names(   x = x,   capitalize_all = TRUE,   length = 4 ) #> GerMany   spain  SWEDEN  #>  \"GRMN\"  \"SPAN\"  \"SWED\"   #suffix and prefix #--------------------------- utils_clean_names(   x = x,   capitalize_first = TRUE,   separator = \"_\",   prefix = \"my_prefix\",   suffix = \"my_suffix\" ) #>                       GerMany                         spain  #> \"My_prefix_GerMany_my_suffix\"   \"My_prefix_spain_my_suffix\"  #>                        SWEDEN  #>  \"My_prefix_SWEDEN_my_suffix\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"Performs parallelized grid search find number clusters maximizing overall silhouette width clustering solution (see utils_cluster_silhouette()). method = NULL, optimization also includes methods available stats::hclust() grid search. function supports parallelization via future::plan() progress bar generated progressr package (see Examples).","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"","code":"utils_cluster_hclust_optimizer(d = NULL, method = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"d (required, matrix) distance matrix typically resulting distantia_matrix(), square matrix work. Default: NULL method (optional, character string) Argument stats::hclust() defining agglomerative method. One : \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) \"centroid\" (= UPGMC). Unambiguous abbreviations accepted well. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_hclust_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize the Silhouette Width of Hierarchical Clustering Solutions — utils_cluster_hclust_optimizer","text":"","code":"#weekly covid prevalence #in 10 California counties #aggregated by month tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_subset(     names = 1:10   ) |>   tsl_aggregate(     new_time = \"months\",     fun = max   )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl_subset(       tsl = tsl,       names = 1:3     ),     guide_columns = 3   ) }  #compute dissimilarity matrix psi_matrix <- distantia(   tsl = tsl,   lock_step = TRUE ) |>   distantia_matrix()  #optimize hierarchical clustering hclust_optimization <- utils_cluster_hclust_optimizer(   d = psi_matrix )  #best solution in first row head(hclust_optimization) #>   clusters   method silhouette_mean #> 1        5   ward.D       0.3127728 #> 2        5  ward.D2       0.3127728 #> 3        5   single       0.3127728 #> 4        5 complete       0.3127728 #> 5        5  average       0.3127728 #> 6        5 mcquitty       0.3127728"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"Generates k-means solutions 2 nrow(d) - 1 number clusters returns number clusters higher silhouette width median. See utils_cluster_silhouette() details. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"","code":"utils_cluster_kmeans_optimizer(d = NULL, seed = 1)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"d (required, matrix) distance matrix typically resulting distantia_matrix(), square matrix work. Default: NULL seed (optional, integer) Random seed used K-means computation. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_kmeans_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize the Silhouette Width of K-Means Clustering Solutions — utils_cluster_kmeans_optimizer","text":"","code":"#weekly covid prevalence #in 10 California counties #aggregated by month tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_subset(     names = 1:10   ) |>   tsl_aggregate(     new_time = \"months\",     fun = max   )  if(interactive()){   #plotting first three time series   tsl_plot(     tsl = tsl_subset(       tsl = tsl,       names = 1:3     ),     guide_columns = 3   ) }  #compute dissimilarity matrix psi_matrix <- distantia(   tsl = tsl,   lock_step = TRUE ) |>   distantia_matrix()  #optimize hierarchical clustering kmeans_optimization <- utils_cluster_kmeans_optimizer(   d = psi_matrix )  #best solution in first row head(kmeans_optimization) #>   clusters silhouette_mean #> 1        5       0.3127728 #> 2        4       0.2888716 #> 3        6       0.2746665 #> 4        3       0.2597968 #> 5        2       0.2285407 #> 6        7       0.2103172"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"silhouette width measure similar object cluster (cohesion) compared clusters (separation). general guidelines interpret  individual silhouette widths clustered objects (returned function mean = FALSE): Close 1: object well matched cluster poorly matched neighboring clusters. Close 0: object two neighboring clusters. Close -1: object likely assigned wrong cluster mean = TRUE, overall mean silhouette widths objects returned. values interpreted follows: Higher 0.7: robust clustering . Higher 0.5: reasonable clustering. Higher 0.25: weak clustering. metric may perform well clusters irregular shapes sizes. code adapted https://svn.r-project.org/R-packages/trunk/cluster/R/silhouette.R.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"","code":"utils_cluster_silhouette(labels = NULL, d = NULL, mean = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"labels (required, integer vector) Labels resulting clustering algorithm applied d. Must length columns rows d. Default: NULL d (required, matrix) distance matrix typically resulting distantia_matrix(), square matrix work. Default: NULL mean (optional, logical) TRUE, mean silhouette widths returned. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_cluster_silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Silhouette Width of a Clustering Solution — utils_cluster_silhouette","text":"","code":"#weekly covid prevalence in three California counties #load as tsl #subset first 10 time series #sum by month tsl <- tsl_initialize(   x = covid_prevalence,   name_column = \"name\",   time_column = \"time\" ) |>   tsl_subset(     names = 1:10   ) |>   tsl_aggregate(     new_time = \"months\",     method = max   )  #compute dissimilarity distantia_df <- distantia(   tsl = tsl,   lock_step = TRUE )  #generate dissimilarity matrix psi_matrix <- distantia_matrix(   df = distantia_df )  #example with kmeans clustering #------------------------------------  #kmeans with 3 groups psi_kmeans <- stats::kmeans(   x = as.dist(psi_matrix[[1]]),   centers = 3 )  #case-wise silhouette width utils_cluster_silhouette(   labels = psi_kmeans$cluster,   d = psi_matrix ) #>            name cluster silhouette_width #> 1       Alameda       3       0.42264373 #> 2        Fresno       1       0.19610751 #> 3      Imperial       1       0.32692191 #> 4         Butte       3       0.33171545 #> 5  Contra_Costa       3       0.44437549 #> 6          Kern       1       0.02226524 #> 7         Kings       1       0.31397263 #> 8     El_Dorado       3       0.38899482 #> 9      Humboldt       2       0.00000000 #> 10  Los_Angeles       1       0.18091946  #overall silhouette width utils_cluster_silhouette(   labels = psi_kmeans$cluster,   d = psi_matrix,   mean = TRUE ) #> [1] 0.2627916   #example with hierarchical clustering #------------------------------------  #hierarchical clustering psi_hclust <- stats::hclust(   d = as.dist(psi_matrix[[1]]) )  #generate labels for three groups psi_hclust_labels <- stats::cutree(   tree = psi_hclust,   k = 3, )  #case-wise silhouette width utils_cluster_silhouette(   labels = psi_hclust_labels,   d = psi_matrix ) #>            name cluster silhouette_width #> 1       Alameda       1       0.42264373 #> 2        Fresno       2       0.19610751 #> 3      Imperial       2       0.32692191 #> 4         Butte       1       0.33171545 #> 5  Contra_Costa       1       0.44437549 #> 6          Kern       2       0.02226524 #> 7         Kings       2       0.31397263 #> 8     El_Dorado       1       0.38899482 #> 9      Humboldt       3       0.00000000 #> 10  Los_Angeles       2       0.18091946  #overall silhouette width utils_cluster_silhouette(   labels = psi_hclust_labels,   d = psi_matrix,   mean = TRUE ) #> [1] 0.2627916"},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerces Vector to a Given Time Class — utils_coerce_time_class","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"Coerces Vector Given Time Class","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"","code":"utils_coerce_time_class(x = NULL, to = \"POSIXct\")"},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"x (required, vector class Date POSIXct) time vector convert. Default: NULL (required, class name) class coerce x . Either \"Date\", \"POSIXct\", \"integer\" \"numeric\". Default: \"POSIXct\"","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"time vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_coerce_time_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerces Vector to a Given Time Class — utils_coerce_time_class","text":"","code":"x <- utils_coerce_time_class(   x = c(\"2024-01-01\", \"2024-02-01\"),   to = \"Date\" )  x #> [1] \"2024-01-01\" \"2024-02-01\" class(x) #> [1] \"Date\"  x <- utils_coerce_time_class(   x = c(\"2024-01-01\", \"2024-02-01\"),   to = \"POSIXct\" )  x #> [1] \"2024-01-01 UTC\" \"2024-02-01 UTC\" class(x) #> [1] \"POSIXct\" \"POSIXt\"   x <- utils_coerce_time_class(   x = c(\"2024-01-01\", \"2024-02-01\"),   to = \"numeric\" )  x #> [1] 19723 19754 class(x) #> [1] \"numeric\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"Auto Breaks Matrix Plotting Functions","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"","code":"utils_color_breaks(m = NULL, n = 100)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"m (required, numeric matrix) distance cost matrix generated psi_distance_matrix() psi_cost_matrix(), numeric matrix work. Default: NULL n (required, integer) number colors compute breaks . Default: 100","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_color_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auto Breaks for Matrix Plotting Functions — utils_color_breaks","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Decimal Places — utils_digits","title":"Number of Decimal Places — utils_digits","text":"Number Decimal Places","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Decimal Places — utils_digits","text":"","code":"utils_digits(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Decimal Places — utils_digits","text":"x (required, numeric) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Decimal Places — utils_digits","text":"integer","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_digits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Decimal Places — utils_digits","text":"","code":"utils_digits(x = 0.234) #> [1] 3"},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"Internal function split distantia data frame groups arguments 'distance', 'diagonal', 'lock_step'.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"","code":"utils_distantia_df_split(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"df (required, data frame) Output distantia() distantia_aggregate(). Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_distantia_df_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Dissimilarity Analysis Data Frames by Combinations of Arguments — utils_distantia_df_split","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  #dissimilarity analysis with four combinations of parameters df <- distantia(   tsl = tsl,   distance = c(     \"euclidean\",     \"manhattan\"     ),   lock_step = c(     TRUE,     FALSE   ) )  #split by combinations of parameters df_split <- utils_distantia_df_split(   df = df )  #print output df_split #> $`1` #>    distance diagonal lock_step       x      y bandwidth       psi group #> 1 euclidean     TRUE     FALSE Germany Sweden         1 0.7285701     1 #> 2 euclidean     TRUE     FALSE Germany  Spain         1 1.0360268     1 #> 3 euclidean     TRUE     FALSE   Spain Sweden         1 1.0237508     1 #>  #> $`2` #>    distance diagonal lock_step       x      y bandwidth      psi group #> 7 manhattan     TRUE     FALSE Germany  Spain         1 1.134012     2 #> 8 manhattan     TRUE     FALSE   Spain Sweden         1 1.166331     2 #> 9 manhattan     TRUE     FALSE Germany Sweden         1 0.761250     2 #>  #> $`3` #>     distance diagonal lock_step       x      y bandwidth       psi group #> 10 manhattan     TRUE      TRUE Germany Sweden         1 0.8271986     3 #> 11 manhattan     TRUE      TRUE   Spain Sweden         1 1.5755002     3 #> 12 manhattan     TRUE      TRUE Germany  Spain         1 1.3737381     3 #>  #> $`4` #>    distance diagonal lock_step       x      y bandwidth       psi group #> 4 euclidean     TRUE      TRUE Germany  Spain         1 1.3962157     4 #> 5 euclidean     TRUE      TRUE   Spain Sweden         1 1.5703931     4 #> 6 euclidean     TRUE      TRUE Germany Sweden         1 0.8364652     4 #>   #class and length of the output class(df_split) #> [1] \"list\" length(df_split) #> [1] 4"},{"path":"https://blasbenito.github.io/distantia/reference/utils_drop_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes Geometry Column from SF Data Frames — utils_drop_geometry","title":"Removes Geometry Column from SF Data Frames — utils_drop_geometry","text":"Replicates functionality  sf::st_drop_geometry() without depending sf package.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_drop_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes Geometry Column from SF Data Frames — utils_drop_geometry","text":"","code":"utils_drop_geometry(df = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_drop_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes Geometry Column from SF Data Frames — utils_drop_geometry","text":"df (required, data frame) Input data frame. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_drop_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes Geometry Column from SF Data Frames — utils_drop_geometry","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"Internal function compute global scaling parameters (mean standard deviation) time series lists. Used within tsl_transform() scaling function f_scale_global() used input argument f. Warning: function removes exclusive columns data. See function tsl_subset().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"","code":"utils_global_scaling_params(tsl = NULL, f = NULL, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"tsl (required, list) Time series list. Default: NULL f (required, function) function f_scale_global(). Default: NULL ... (optional, arguments f) Optional arguments transformation function.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_global_scaling_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Centering and Scaling Parameters of Time Series Lists — utils_global_scaling_params","text":"list","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — utils_is_time","title":"Title — utils_is_time","text":"Title","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — utils_is_time","text":"","code":"utils_is_time(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — utils_is_time","text":"x (required, vector) Vector test. class vector elements 'numeric', 'POSIXct', 'Date', function returns TRUE. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — utils_is_time","text":"logical","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_is_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — utils_is_time","text":"","code":"utils_is_time(   x = c(\"2024-01-01\", \"2024-02-01\") ) #> [1] FALSE  utils_is_time(   x = utils_as_time(     x = c(\"2024-01-01\", \"2024-02-01\")     ) ) #> [1] TRUE"},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Handles Line Colors for Sequence Plots — utils_line_color","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"internal function, can used better understand line colors handled within plotting functions.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"","code":"utils_line_color(x = NULL, line_color = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"x (required, sequence) zoo object time series list. Default: NULL line_color (optional, character vector) vector colors time series columns. Selected palette depends number columns plot. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handles Line Colors for Sequence Plots — utils_line_color","text":"color vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":null,"dir":"Reference","previous_headings":"","what":"Guide for Time Series Plots — utils_line_guide","title":"Guide for Time Series Plots — utils_line_guide","text":"Guide Time Series Plots","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guide for Time Series Plots — utils_line_guide","text":"","code":"utils_line_guide(   x = NULL,   position = \"topright\",   line_color = NULL,   line_width = 1,   length = 1,   text_cex = 0.7,   guide_columns = 1,   subpanel = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guide for Time Series Plots — utils_line_guide","text":"x (required, sequence) zoo time series time series list. Default: NULL position (optional, vector xy coordinates character string). condensed version x y arguments graphics::legend() function. Coordinates (range 0 1) keyword position legend. Accepted keywords : \"bottomright\", \"bottom\", \"bottomleft\", \"left\", \"topleft\", \"top\", \"topright\", \"right\" \"center\". Default: \"topright\". line_color (optional, character vector) vector colors time series columns. NULL, uses palette \"Zissou 1\" provided function grDevices::hcl.colors(). Default: NULL line_width (optional, numeric vector) Widths time series lines. Default: 1 length (optional, numeric) maps argument seg.len graphics::legend(). Length lines drawn legend. Default: 1 text_cex (optional, numeric) Multiplier text size. Default: 0.7 guide_columns (optional, integer) Number columns set legend items. Default: 1. subpanel (optional, logical) internal argument used generating multipanel plot produced distantia_dtw_plot().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guide for Time Series Plots — utils_line_guide","text":"plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_line_guide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guide for Time Series Plots — utils_line_guide","text":"","code":"x <- zoo_simulate()  if(interactive()){    zoo_plot(x, guide = FALSE)    utils_line_guide(     x = x,     position = \"right\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Guide for Matrix Plot — utils_matrix_guide","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"Plots color legend distance cost matrix multi-panel plots external image editors.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"","code":"utils_matrix_guide(   m = NULL,   matrix_color = NULL,   breaks = NULL,   title = NULL,   text_cex = 1 )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"m (required, numeric matrix) distance cost matrix generated psi_distance_matrix() psi_cost_matrix(), numeric matrix work. Default: NULL matrix_color (optional, character vector) vector colors. Default: NULL breaks (optional, numeric vector) vector breaks color guide. Default: NULL title (optional, character string) guide title. Default: NULL text_cex (optional, numeric) multiplier text size. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"Plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_guide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Guide for Matrix Plot — utils_matrix_guide","text":"","code":"#prepare time series list tsl <- tsl_simulate(   n = 2,   independent = TRUE )  #distance matrix between time series dm <- psi_distance_matrix(   x = tsl[[1]],   y = tsl[[2]] )  if(interactive()){   utils_matrix_guide(m = dm) }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"function simplified version fields::imagePlot(), Douglas Nychka. original version recommended case customization provided needed.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"","code":"utils_matrix_plot(   m = NULL,   matrix_color = NULL,   title = NULL,   subtitle = NULL,   xlab = NULL,   ylab = NULL,   text_cex = 1,   path = NULL,   path_width = 1,   path_color = \"black\",   diagonal_width = 1,   diagonal_color = \"white\",   guide = TRUE,   subpanel = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"m (required, numeric matrix) distance cost matrix generated psi_distance_matrix() psi_cost_matrix(), numeric matrix work. Default: NULL matrix_color (optional, character vector) vector colors. Uses palette \"Zissou 1\" default. Default: NULL title (optional, character string) plot title. default, names sequences used compute matrix m. Default: NULL subtitle (optional, character string) plot subtitle. Default: NULL xlab (optional, character string) title x axis (matrix columns). default, name one sequences used compute matrix m. Default: NULL ylab (optional, character string) title y axis (matrix rows). default, name one sequences used compute matrix m. Default: NULL text_cex (optional, numeric) multiplicator text size plot labels titles. Default: 1 path (optional, data frame) least cost path generated psi_cost_path(). data frame must attribute type == \"cost_path, must computed sequences used compute matrix m. Default: NULL. path_width (optional, numeric) width least cost path. Default: 1 path_color (optional, character string) color least-cost path. Default: \"black\" diagonal_width (optional, numeric) width diagonal. Set 0 remove diagonal line. Default: 0.5 diagonal_color (optional, character string) color diagonal. Default: \"white\" guide (optional, logical) TRUE, color guide matrix m added utils_matrix_guide(). subpanel (optional, logical) internal argument used generating multi-panel plot produced distantia_dtw_plot().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"plot","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_matrix_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Distance or Cost Matrix and Least Cost Path — utils_matrix_plot","text":"","code":"#prepare time series list tsl <- tsl_simulate(   n = 2,   independent = TRUE )  #distance matrix between time series dm <- psi_distance_matrix(   x = tsl[[1]],   y = tsl[[2]] )  #cost matrix cm <- psi_cost_matrix(   dist_matrix = dm   )  #least cost path cp <- psi_cost_path(   dist_matrix = dm,   cost_matrix = cm )  #plot cost matrix and least cost path if(interactive()){   utils_matrix_plot(     m = cm,     path = cp,     guide = TRUE   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":null,"dir":"Reference","previous_headings":"","what":"New Time for Time Series Aggregation — utils_new_time","title":"New Time for Time Series Aggregation — utils_new_time","text":"Internal function called tsl_aggregate() tsl_resample() help transform input argument new_time proper format time series aggregation resampling.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Time for Time Series Aggregation — utils_new_time","text":"","code":"utils_new_time(tsl = NULL, new_time = NULL, keywords = \"aggregate\")  utils_new_time_type(   tsl = NULL,   new_time = NULL,   keywords = c(\"resample\", \"aggregate\") )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New Time for Time Series Aggregation — utils_new_time","text":"tsl (required, list) Time series list. Default: NULL new_time (required, zoo object, numeric, numeric vector, Date vector, POSIXct vector, keyword) breakpoints defining aggregation groups. Options : numeric vector: \"numeric\" time class, defines breakpoints time series aggregation. \"Date\" \"POSIXct\" vector: , time classes \"Date\" \"POSIXct.\" case, input vector coerced time class tsl argument. numeric: defines fixed time intervals time series aggregation. Used time class \"numeric\", coerced integer interpreted days time classes \"Date\" \"POSIXct\". keyword (see utils_time_units() tsl_time_summary()): common options time classes \"Date\" \"POSIXct\" : \"millennia\", \"centuries\", \"decades\", \"years\", \"quarters\", \"months\", \"weeks\". Exclusive keywords \"POSIXct\" time class : \"days\", \"hours\", \"minutes\", \"seconds\". time class \"numeric\" accepts keywords coded scientific numbers, \"1e8\" \"1e-8\". keywords (optional, character string vector) Defines keywords returned. \"aggregate\", returns valid keywords zoo_aggregate(). \"resample\", returns valid keywords zoo_resample(). Default: \"aggregate\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New Time for Time Series Aggregation — utils_new_time","text":"Vector class numeric, Date, POSIXct","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_new_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Time for Time Series Aggregation — utils_new_time","text":"","code":"#three time series #climate and ndvi in Fagus sylvatica stands in Spain, Germany, and Sweden tsl <- tsl_initialize(   x = fagus_dynamics,   name_column = \"name\",   time_column = \"time\" )  # new time for aggregation using keywords #-----------------------------------  #get valid keywords for aggregation tsl_time_summary(   tsl = tsl,   keywords = \"aggregate\" )$keywords #> [1] \"decades\"  \"years\"    \"quarters\"  #if no keyword is used, for aggregation the highest resolution keyword is selected automatically new_time <- utils_new_time(   tsl = tsl,   new_time = NULL,   keywords = \"aggregate\" ) #> distantia::utils_new_time(): aggregating 'tsl' with keyword 'quarters'.  new_time #>  [1] \"2001-01-01\" \"2001-04-01\" \"2001-07-01\" \"2001-10-01\" \"2002-01-01\" #>  [6] \"2002-04-01\" \"2002-07-01\" \"2002-10-01\" \"2003-01-01\" \"2003-04-01\" #> [11] \"2003-07-01\" \"2003-10-01\" \"2004-01-01\" \"2004-04-01\" \"2004-07-01\" #> [16] \"2004-10-01\" \"2005-01-01\" \"2005-04-01\" \"2005-07-01\" \"2005-10-01\" #> [21] \"2006-01-01\" \"2006-04-01\" \"2006-07-01\" \"2006-10-01\" \"2007-01-01\" #> [26] \"2007-04-01\" \"2007-07-01\" \"2007-10-01\" \"2008-01-01\" \"2008-04-01\" #> [31] \"2008-07-01\" \"2008-10-01\" \"2009-01-01\" \"2009-04-01\" \"2009-07-01\" #> [36] \"2009-10-01\" \"2010-01-01\" \"2010-04-01\" \"2010-07-01\" \"2010-10-01\" #> [41] \"2011-01-01\" \"2011-04-01\" \"2011-07-01\" \"2011-10-01\" \"2012-01-01\" #> [46] \"2012-04-01\" \"2012-07-01\" \"2012-10-01\" \"2013-01-01\" \"2013-04-01\" #> [51] \"2013-07-01\" \"2013-10-01\" \"2014-01-01\" \"2014-04-01\" \"2014-07-01\" #> [56] \"2014-10-01\" \"2015-01-01\" \"2015-04-01\" \"2015-07-01\" \"2015-10-01\" #> [61] \"2016-01-01\" \"2016-04-01\" \"2016-07-01\" \"2016-10-01\" \"2017-01-01\" #> [66] \"2017-04-01\" \"2017-07-01\" \"2017-10-01\" \"2018-01-01\" \"2018-04-01\" #> [71] \"2018-07-01\" \"2018-10-01\" \"2019-01-01\"  #if no keyword is used #for resampling a regular version #of the original time based on the #average resolution is used instead new_time <- utils_new_time(   tsl = tsl,   new_time = NULL,   keywords = \"resample\" ) #> distantia::utils_new_time(): resampling 'tsl' to its average resolution.  new_time #>   [1] \"2001-01-01\" \"2001-01-31\" \"2001-03-02\" \"2001-04-02\" \"2001-05-02\" #>   [6] \"2001-06-02\" \"2001-07-02\" \"2001-08-02\" \"2001-09-01\" \"2001-10-01\" #>  [11] \"2001-11-01\" \"2001-12-01\" \"2002-01-01\" \"2002-01-31\" \"2002-03-03\" #>  [16] \"2002-04-02\" \"2002-05-02\" \"2002-06-02\" \"2002-07-02\" \"2002-08-02\" #>  [21] \"2002-09-01\" \"2002-10-02\" \"2002-11-01\" \"2002-12-01\" \"2003-01-01\" #>  [26] \"2003-01-31\" \"2003-03-03\" \"2003-04-02\" \"2003-05-03\" \"2003-06-02\" #>  [31] \"2003-07-02\" \"2003-08-02\" \"2003-09-01\" \"2003-10-02\" \"2003-11-01\" #>  [36] \"2003-12-02\" \"2004-01-01\" \"2004-02-01\" \"2004-03-02\" \"2004-04-01\" #>  [41] \"2004-05-02\" \"2004-06-01\" \"2004-07-02\" \"2004-08-01\" \"2004-09-01\" #>  [46] \"2004-10-01\" \"2004-10-31\" \"2004-12-01\" \"2004-12-31\" \"2005-01-31\" #>  [51] \"2005-03-02\" \"2005-04-02\" \"2005-05-02\" \"2005-06-01\" \"2005-07-02\" #>  [56] \"2005-08-01\" \"2005-09-01\" \"2005-10-01\" \"2005-11-01\" \"2005-12-01\" #>  [61] \"2005-12-31\" \"2006-01-31\" \"2006-03-02\" \"2006-04-02\" \"2006-05-02\" #>  [66] \"2006-06-02\" \"2006-07-02\" \"2006-08-01\" \"2006-09-01\" \"2006-10-01\" #>  [71] \"2006-11-01\" \"2006-12-01\" \"2007-01-01\" \"2007-01-31\" \"2007-03-03\" #>  [76] \"2007-04-02\" \"2007-05-02\" \"2007-06-02\" \"2007-07-02\" \"2007-08-02\" #>  [81] \"2007-09-01\" \"2007-10-02\" \"2007-11-01\" \"2007-12-01\" \"2008-01-01\" #>  [86] \"2008-01-31\" \"2008-03-02\" \"2008-04-01\" \"2008-05-02\" \"2008-06-01\" #>  [91] \"2008-07-01\" \"2008-08-01\" \"2008-08-31\" \"2008-10-01\" \"2008-10-31\" #>  [96] \"2008-12-01\" \"2008-12-31\" \"2009-01-30\" \"2009-03-02\" \"2009-04-01\" #> [101] \"2009-05-02\" \"2009-06-01\" \"2009-07-02\" \"2009-08-01\" \"2009-08-31\" #> [106] \"2009-10-01\" \"2009-10-31\" \"2009-12-01\" \"2009-12-31\" \"2010-01-31\" #> [111] \"2010-03-02\" \"2010-04-02\" \"2010-05-02\" \"2010-06-01\" \"2010-07-02\" #> [116] \"2010-08-01\" \"2010-09-01\" \"2010-10-01\" \"2010-11-01\" \"2010-12-01\" #> [121] \"2010-12-31\" \"2011-01-31\" \"2011-03-02\" \"2011-04-02\" \"2011-05-02\" #> [126] \"2011-06-02\" \"2011-07-02\" \"2011-08-01\" \"2011-09-01\" \"2011-10-01\" #> [131] \"2011-11-01\" \"2011-12-01\" \"2012-01-01\" \"2012-01-31\" \"2012-03-01\" #> [136] \"2012-04-01\" \"2012-05-01\" \"2012-06-01\" \"2012-07-01\" \"2012-08-01\" #> [141] \"2012-08-31\" \"2012-09-30\" \"2012-10-31\" \"2012-11-30\" \"2012-12-31\" #> [146] \"2013-01-30\" \"2013-03-02\" \"2013-04-01\" \"2013-05-02\" \"2013-06-01\" #> [151] \"2013-07-01\" \"2013-08-01\" \"2013-08-31\" \"2013-10-01\" \"2013-10-31\" #> [156] \"2013-12-01\" \"2013-12-31\" \"2014-01-30\" \"2014-03-02\" \"2014-04-01\" #> [161] \"2014-05-02\" \"2014-06-01\" \"2014-07-02\" \"2014-08-01\" \"2014-08-31\" #> [166] \"2014-10-01\" \"2014-10-31\" \"2014-12-01\" \"2014-12-31\" \"2015-01-31\" #> [171] \"2015-03-02\" \"2015-04-01\" \"2015-05-02\" \"2015-06-01\" \"2015-07-02\" #> [176] \"2015-08-01\" \"2015-09-01\" \"2015-10-01\" \"2015-10-31\" \"2015-12-01\" #> [181] \"2015-12-31\" \"2016-01-31\" \"2016-03-01\" \"2016-04-01\" \"2016-05-01\" #> [186] \"2016-06-01\" \"2016-07-01\" \"2016-07-31\" \"2016-08-31\" \"2016-09-30\" #> [191] \"2016-10-31\" \"2016-11-30\" \"2016-12-31\" \"2017-01-30\" \"2017-03-01\" #> [196] \"2017-04-01\" \"2017-05-01\" \"2017-06-01\" \"2017-07-01\" \"2017-08-01\" #> [201] \"2017-08-31\" \"2017-09-30\" \"2017-10-31\" \"2017-11-30\" \"2017-12-31\" #> [206] \"2018-01-30\" \"2018-03-02\" \"2018-04-01\" \"2018-05-01\" \"2018-06-01\" #> [211] \"2018-07-01\" \"2018-08-01\" \"2018-08-31\" \"2018-10-01\" \"2018-10-31\" #> [216] \"2018-12-01\"  #aggregation time vector form keyword \"years\" new_time <- utils_new_time(   tsl = tsl,   new_time = \"years\",   keywords = \"aggregate\" )  new_time #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2005-01-01\" #>  [6] \"2006-01-01\" \"2007-01-01\" \"2008-01-01\" \"2009-01-01\" \"2010-01-01\" #> [11] \"2011-01-01\" \"2012-01-01\" \"2013-01-01\" \"2014-01-01\" \"2015-01-01\" #> [16] \"2016-01-01\" \"2017-01-01\" \"2018-01-01\" \"2019-01-01\"  #same from shortened keyword #see utils_time_keywords_dictionary() utils_new_time(   tsl = tsl,   new_time = \"year\",   keywords = \"aggregate\" ) #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2005-01-01\" #>  [6] \"2006-01-01\" \"2007-01-01\" \"2008-01-01\" \"2009-01-01\" \"2010-01-01\" #> [11] \"2011-01-01\" \"2012-01-01\" \"2013-01-01\" \"2014-01-01\" \"2015-01-01\" #> [16] \"2016-01-01\" \"2017-01-01\" \"2018-01-01\" \"2019-01-01\"  #same for abbreviated keyword utils_new_time(   tsl = tsl,   new_time = \"y\",   keywords = \"aggregate\" ) #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2005-01-01\" #>  [6] \"2006-01-01\" \"2007-01-01\" \"2008-01-01\" \"2009-01-01\" \"2010-01-01\" #> [11] \"2011-01-01\" \"2012-01-01\" \"2013-01-01\" \"2014-01-01\" \"2015-01-01\" #> [16] \"2016-01-01\" \"2017-01-01\" \"2018-01-01\" \"2019-01-01\"  #from a integer defining a time interval in days utils_new_time(   tsl = tsl,   new_time = 365,   keywords = \"aggregate\" ) #>  [1] \"2001-01-01\" \"2002-01-01\" \"2003-01-01\" \"2004-01-01\" \"2004-12-31\" #>  [6] \"2005-12-31\" \"2006-12-31\" \"2007-12-31\" \"2008-12-30\" \"2009-12-30\" #> [11] \"2010-12-30\" \"2011-12-30\" \"2012-12-29\" \"2013-12-29\" \"2014-12-29\" #> [16] \"2015-12-29\" \"2016-12-28\" \"2017-12-28\"  #using this vector as input for aggregation tsl_aggregated <- tsl_aggregate(   tsl = tsl,   new_time = new_time )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"Internal function used zoo_resample(). finds span parameter univariate Loess (Locally Estimated Scatterplot Smoothing.) model y ~ x fitted stats::loess() minimizes root mean squared error (rmse) observations predictions, returns model fitted span.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"","code":"utils_optimize_loess(x = NULL, y = NULL, max_complexity = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"x (required, numeric vector) predictor, time vector coerced numeric. Default: NULL y (required, numeric vector) response, column zoo object. Default: NULL max_complexity (required, logical). TRUE, RMSE optimization ignored, model maximum complexity returned. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"Loess model.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_loess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Loess Models for Time Series Resampling — utils_optimize_loess","text":"","code":"#zoo time series xy <- zoo_simulate(   cols = 1,   rows = 30 )  #optimize loess model m <- utils_optimize_loess(   x = as.numeric(zoo::index(xy)), #predictor   y = xy[, 1] #response )  print(m) #> Call: #> stats::loess(formula = y ~ x, data = model_df, enp.target = complexity_value,  #>     degree = 1, surface = \"direct\") #>  #> Number of Observations: 30  #> Equivalent Number of Parameters: 17.35  #> Residual Standard Error: 0.04493   #plot observation plot(   x = zoo::index(xy),   y = xy[, 1],   col = \"forestgreen\",   type = \"l\",   lwd = 2   )  #plot prediction points(   x = zoo::index(xy),   y = stats::predict(     object = m,     newdata = as.numeric(zoo::index(xy))     ),   col = \"red4\"   )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"Internal function used zoo_resample(). finds optimal df parameter smoothing spline model y ~ x fitted stats::smooth.spline()  minimizes root mean squared error (rmse) observations predictions, returns model fitted df.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"","code":"utils_optimize_spline(x = NULL, y = NULL, max_complexity = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"x (required, numeric vector) predictor, time vector coerced numeric. Default: NULL y (required, numeric vector) response, column zoo object. Default: NULL max_complexity (required, logical). TRUE, RMSE optimization ignored, model maximum complexity returned. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"Object class \"smooth.spline\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_optimize_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Spline Models for Time Series Resampling — utils_optimize_spline","text":"","code":"#zoo time series xy <- zoo_simulate(   cols = 1,   rows = 30 )  #optimize splines model m <- utils_optimize_spline(   x = as.numeric(zoo::index(xy)), #predictor   y = xy[, 1] #response )  print(m) #> Call: #> stats::smooth.spline(x = model_df$x, y = model_df$y, df = complexity_value,  #>     all.knots = TRUE) #>  #> Smoothing Parameter  spar= -1.052603  lambda= 3.214775e-16 (26 iterations) #> Equivalent Degrees of Freedom (Df): 30 #> Penalized Criterion (RSS): 4.500923e-21 #> GCV: 2.202513e-05  #plot observation plot(   x = zoo::index(xy),   y = xy[, 1],   col = \"forestgreen\",   type = \"l\",   lwd = 2   )  #plot prediction points(   x = zoo::index(xy),   y = stats::predict(     object = m,     x = as.numeric(zoo::index(xy))   )$y,   col = \"red\" )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to a List of Data Frames — utils_prepare_df","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"Convert Data Frame List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"","code":"utils_prepare_df(x = NULL, name_column = NULL, time_column = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"x (required, data frame) Input data frame. Default: NULL. name_column (optional, column name) Column name used split x list data frames. omitted, split done column instead. Default: NULL time_column (optional, column name) Name column representing time, . Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to a List of Data Frames — utils_prepare_df","text":"List data frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Matrix to Data Frame — utils_prepare_matrix","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"Convert Matrix Data Frame","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"","code":"utils_prepare_matrix(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"x (required, matrix) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Matrix to Data Frame — utils_prepare_matrix","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"Convert List Matrices List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"","code":"utils_prepare_matrix_list(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"x (required, list matrices) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_matrix_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Matrices to List of Data Frames — utils_prepare_matrix_list","text":"List Data Frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Handles Time Column in a List of Data Frames — utils_prepare_time","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"Handles Time Column List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"","code":"utils_prepare_time(x = NULL, time_column = NULL, lock_step = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"x (required, named list data frames). List named data frames. Default: NULL. time_column (optional lock_step = FALSE, required otherwise, column name) Name numeric column representing time. Default: NULL. lock_step (optional, logical) TRUE, input sequences subset common times according values time_column. Default: FALSE.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handles Time Column in a List of Data Frames — utils_prepare_time","text":"List data frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"Convert List Vectors List Data Frames","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"","code":"utils_prepare_vector_list(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"x (required, list vectors) Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_vector_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Vectors to List of Data Frames — utils_prepare_vector_list","text":"List data frames","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"Convert List Data Frames List Zoo Objects","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"","code":"utils_prepare_zoo_list(x = NULL, time_column = NULL, lock_step = FALSE)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"x (required, list data frames) named list data frames. Default: NULL. time_column (optional lock_step = FALSE, required otherwise, column name) Name column representing time, . Default: NULL. lock_step (optional, logical) TRUE, input sequences subset common times according values time_column.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"named list data frames, matrices, vectors.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_prepare_zoo_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert List of Data Frames to List of Zoo Objects — utils_prepare_zoo_list","text":"","code":"data(mis) #> Warning: data set ‘mis’ not found x <- tsl_initialize(   x = eemian_pollen,   name_column = \"name\" )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"Rescale Numeric Vector New Data Range","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"","code":"utils_rescale_vector(   x = NULL,   new_min = 0,   new_max = 1,   old_min = NULL,   old_max = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"x (required, numeric vector) Numeric vector. Default: NULL new_min (optional, numeric) New minimum value. Default: 0 new_max (optional_numeric) New maximum value. Default: 1 old_min (optional, numeric) Old minimum value. Default: NULL old_max (optional_numeric) Old maximum value. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"numeric vector","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_rescale_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale Numeric Vector to a New Data Range — utils_rescale_vector","text":"","code":"out <- utils_rescale_vector(    x = stats::rnorm(100),    new_min = 0,    new_max = 100,    )   out #>   [1]  43.057562  22.295893  49.748298  35.798530  54.055070  35.296711 #>   [7]  44.436870  29.971887  48.788433  40.435978  50.018771  48.555214 #>  [13]  41.186024  77.286401  65.936435  24.674600  43.101781  59.250885 #>  [19]  55.483124  79.238969  58.589221  14.057236  73.556532  37.527869 #>  [25]  35.894801  77.805990 100.000000  51.480519  65.889335  45.753948 #>  [31]  39.125847  36.783057  54.454843  57.466020  57.962327  36.128424 #>  [37]  37.624463  44.003050  62.063049  43.114801  25.601972  32.623824 #>  [43]  17.532553  51.191202  33.645553  47.095935  60.940587  56.282746 #>  [49]  44.151177  49.700828  25.722573  60.361815  45.726301  15.075173 #>  [55]  51.642627  54.809068  57.871522  63.752507  45.548913  57.121724 #>  [61]  65.985321  46.952943  56.282503   1.376624  63.350329  54.817363 #>  [67]  29.645391  52.335503  70.692523  69.169328  64.627424  54.483228 #>  [73]  68.152353  41.631612  70.828213  24.749327  27.454027  56.420938 #>  [79]  55.620910  54.762591  38.153720  43.781689  36.751236  58.704306 #>  [85]  28.700452  27.048028  73.121004  61.471206  72.591286  53.187395 #>  [91]  34.943828  56.486492  31.589251  59.048665  46.773813  55.898963 #>  [97]   0.000000  44.055563  44.432108  60.620631"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Aggregation Keywords — utils_time_keywords","title":"Valid Aggregation Keywords — utils_time_keywords","text":"Internal function obtain valid aggregation keywords zoo object time series list.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Aggregation Keywords — utils_time_keywords","text":"","code":"utils_time_keywords(tsl = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid Aggregation Keywords — utils_time_keywords","text":"tsl (required, list) Time series list. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid Aggregation Keywords — utils_time_keywords","text":"Character string, aggregation keyword, \"none\".","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valid Aggregation Keywords — utils_time_keywords","text":"","code":"#one minute time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.time() - 60,     Sys.time()   ) )  #valid keywords for aggregation and/or resampling utils_time_keywords(   tsl = tsl ) #> [1] \"seconds\"  #10 minutes time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.time() - 600,     Sys.time()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"minutes\" \"seconds\"  #10 hours time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.time() - 6000,     Sys.time()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"hours\"   \"minutes\" \"seconds\"  #10 days time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.Date() - 10,     Sys.Date()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"weeks\" \"days\"   #10 years time series #----------------------------------- tsl <- tsl_simulate(   time_range = c(     Sys.Date() - 3650,     Sys.Date()   ) )  utils_time_keywords(   tsl = tsl ) #> [1] \"years\"    \"quarters\" \"months\"   \"weeks\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Time Keywords — utils_time_keywords_dictionary","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"Called utils_time_keywords_translate() generate data frame helps translate misnamed abbreviated time keywords, like \"day\", \"daily\", \"d\", correct ones \"days\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"","code":"utils_time_keywords_dictionary()"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of Time Keywords — utils_time_keywords_dictionary","text":"","code":"df <- utils_time_keywords_dictionary()"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"Internal function translate misnamed abbreviated keywords valid ones. Uses utils_time_keywords_dictionary() reference dictionary.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"","code":"utils_time_keywords_translate(keyword = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"keyword (optional, character string) time keyword \"day\". Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"Time keyword.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_keywords_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translates The User's Time Keywords Into Valid Ones — utils_time_keywords_translate","text":"","code":"#millennia utils_time_keywords_translate(   keyword = \"1000 years\" ) #> [1] \"millennia\"  utils_time_keywords_translate(   keyword = \"1000 y\" ) #> [1] \"millennia\"  utils_time_keywords_translate(   keyword = \"thousands\" ) #> [1] \"millennia\"  #years utils_time_keywords_translate(   keyword = \"year\" ) #> [1] \"years\"  utils_time_keywords_translate(   keyword = \"y\" ) #> [1] \"years\"  #days utils_time_keywords_translate(   keyword = \"d\" ) #> [1] \"days\"  utils_time_keywords_translate(   keyword = \"day\" ) #> [1] \"days\"  #seconds utils_time_keywords_translate(   keyword = \"s\" ) #> [1] \"seconds\"  utils_time_keywords_translate(   keyword = \"sec\" ) #> [1] \"seconds\""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame with Supported Time Units — utils_time_units","title":"Data Frame with Supported Time Units — utils_time_units","text":"Returns data frame names supported time units, classes can handle time unit, threshold used identify time units can used aggregating time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame with Supported Time Units — utils_time_units","text":"","code":"utils_time_units(all_columns = FALSE, class = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame with Supported Time Units — utils_time_units","text":"all_columns (optional, logical) TRUE, columns returned. Default: FALSE class (optional, class name). Used filter rows columns. Accepted values \"numeric\", \"Date\", \"POSIXct\". Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame with Supported Time Units — utils_time_units","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/utils_time_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Frame with Supported Time Units — utils_time_units","text":"","code":"df <- utils_time_units() head(df) #>   base_units     units Date POSIXct numeric integer #> 1       days millennia TRUE    TRUE   FALSE   FALSE #> 2       days centuries TRUE    TRUE   FALSE   FALSE #> 3       days   decades TRUE    TRUE   FALSE   FALSE #> 4       days     years TRUE    TRUE   FALSE   FALSE #> 5       days  quarters TRUE    TRUE   FALSE   FALSE #> 6       days    months TRUE    TRUE   FALSE   FALSE"},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"Internal function used distantia() momentum() generate data frame combinations time series function arguments.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"","code":"utils_tsl_pairs(tsl = NULL, args_list = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"tsl (required, list) Time series list. Default: NULL args_list (required, list) arguments combine pairs time series. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/utils_tsl_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame with Pairs of Time Series in Time Series Lists — utils_tsl_pairs","text":"data frame","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Cases in Zoo Time Series — zoo_aggregate","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"Aggregate Cases Zoo Time Series","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"","code":"zoo_aggregate(x = NULL, new_time = NULL, f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"x (required, zoo object) Time series aggregate. Default: NULL new_time (optional, zoo object, keyword, time vector) New time aggregate x . available options : NULL: highest resolution keyword returned zoo_time(x)$keywords used generate new time vector aggregate x. zoo object: index given zoo object used template aggregate x. time vector: vector new times resample x . time x class \"numeric\", vector must numeric well. Otherwise, vectors classes \"Date\" \"POSIXct\" can used indistinctly. keyword: valid keyword returned zoo_time(x)$keywords, used generate time vector relevant units. numeric length 1: interpreted new time interval, highest resolution units returned zoo_time(x)$units. f (optional, quoted unquoted function name) Name standard custom function aggregate numeric vectors. Typical examples mean, max,min, median, quantile. Default: mean. ... (optional, additional arguments) additional arguments f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Cases in Zoo Time Series — zoo_aggregate","text":"","code":"#full range of calendar dates x <- zoo_simulate(   rows = 1000,   time_range = c(     \"0000-01-01\",     as.character(Sys.Date())     ) )  #plot time series if(interactive()){   zoo_plot(x) }   #find valid aggregation keywords x_time <- zoo_time(x) x_time$keywords #> [[1]] #> [1] \"millennia\" \"centuries\" \"decades\"   \"years\"     \"quarters\"  #>   #mean value by millennia (extreme case!!!) x_millennia <- zoo_aggregate(   x = x,   new_time = \"millennia\",   f = mean )  if(interactive()){   zoo_plot(x_millennia) }  #max value by centuries x_centuries <- zoo_aggregate(   x = x,   new_time = \"centuries\",   f = max )  if(interactive()){   zoo_plot(x_centuries) }  #quantile 0.75 value by centuries x_centuries <- zoo_aggregate(   x = x,   new_time = \"centuries\",   f = stats::quantile,   probs = 0.75 #argument of stats::quantile() )  if(interactive()){   zoo_plot(x_centuries) }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Name of a Zoo Time Series — zoo_name_clean","title":"Clean Name of a Zoo Time Series — zoo_name_clean","text":"Combines utils_clean_names() zoo_name_set() help clean, abbreviate, capitalize, add suffix prefix name zoo object.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Name of a Zoo Time Series — zoo_name_clean","text":"","code":"zoo_name_clean(   x = NULL,   lowercase = FALSE,   separator = \"_\",   capitalize_first = FALSE,   capitalize_all = FALSE,   length = NULL,   suffix = NULL,   prefix = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Name of a Zoo Time Series — zoo_name_clean","text":"x (required, zoo object) Zoo time series analyze. Default: NULL. lowercase (optional, logical) TRUE, names coerced lowercase. Default: FALSE separator (optional, character string) Separator replacing spaces dots. Also used separate suffix prefix main word. Default: \"_\". capitalize_first (optional, logical) Indicates whether capitalize first letter name Default: FALSE. capitalize_all (optional, logical) Indicates whether capitalize letters name Default: FALSE. length (optional, integer) Minimum length abbreviated names. Names abbreviated via abbreviate(). Default: NULL. suffix (optional, character string) Suffix clean names. Default: NULL. prefix (optional, character string)  Prefix clean names. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Name of a Zoo Time Series — zoo_name_clean","text":"zoo time series","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Name of a Zoo Time Series — zoo_name_clean","text":"","code":"#simulate zoo time series x <- zoo_simulate()  #get current name zoo_name_get(x = x) #> [1] \"A\"  #change name x <- zoo_name_set(   x = x,   name = \"My.New.name\" )  zoo_name_get(x = x) #> [1] \"My.New.name\"  #clean name x <- zoo_name_clean(   x = x,   lowercase = TRUE )  zoo_name_get(x = x) #> [1] \"my_new_name\""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Name of a Zoo Time Series — zoo_name_get","title":"Get Name of a Zoo Time Series — zoo_name_get","text":"Just convenient wrapper attributes(x)$name.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Name of a Zoo Time Series — zoo_name_get","text":"","code":"zoo_name_get(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Name of a Zoo Time Series — zoo_name_get","text":"x (required, zoo object) Zoo time series analyze. Default: NULL.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Name of a Zoo Time Series — zoo_name_get","text":"character string","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Name of a Zoo Time Series — zoo_name_get","text":"","code":"#simulate zoo time series x <- zoo_simulate()  #get current name zoo_name_get(x = x) #> [1] \"A\"  #change name x <- zoo_name_set(   x = x,   name = \"My.New.name\" )  zoo_name_get(x = x) #> [1] \"My.New.name\"  #clean name x <- zoo_name_clean(   x = x,   lowercase = TRUE )  zoo_name_get(x = x) #> [1] \"my_new_name\""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Name of a Zoo Time Series — zoo_name_set","title":"Set Name of a Zoo Time Series — zoo_name_set","text":"Zoo time series attribute 'name'. However, within distantia,  keep data consistency several plotting analysis operations, attribute 'name' used objects. function convenient wrapper attr(x = x, = \"name\") <- \"xxx\".","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Name of a Zoo Time Series — zoo_name_set","text":"","code":"zoo_name_set(x = NULL, name = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Name of a Zoo Time Series — zoo_name_set","text":"x (required, zoo object) Zoo time series analyze. Default: NULL. name (required, character string) name new name zoo object. NULL, x returned . Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Name of a Zoo Time Series — zoo_name_set","text":"zoo time series","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_name_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Name of a Zoo Time Series — zoo_name_set","text":"","code":"#simulate zoo time series x <- zoo_simulate()  #get current name zoo_name_get(x = x) #> [1] \"A\"  #change name x <- zoo_name_set(   x = x,   name = \"My.New.name\" )  zoo_name_get(x = x) #> [1] \"My.New.name\"  #clean name x <- zoo_name_clean(   x = x,   lowercase = TRUE )  zoo_name_get(x = x) #> [1] \"my_new_name\""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"Fast permutation zoo time series null model testing using fast efficient C++ implementations different restricted free permutation methods. available permutation methods : \"free\" (see permute_free_cpp()): Unrestricted independent re-shuffling individual cases across rows columns. Individual values relocated new row column within dimensions original matrix. \"free_by_row\" (see permute_free_by_row_cpp()): Unrestricted re-shuffling complete rows. individual row given new random row number, data  matrix re-ordered accordingly. \"restricted\" (see permute_restricted_cpp()): Data re-shuffling across rows columns restricted blocks contiguous rows. algorithm divides data matrix set blocks contiguous rows, individual cases assigned new row column within original block. \"restricted_by_row\" (see permute_restricted_by_row_cpp()): Re-shuffling complete rows restricted blocks contiguous rows. algorithm divides data matrix set blocks contiguous rows, individual row given new random row number within original block, block reordered accordingly generate permuted output. function supports parallelization setup via future::plan(), progress bars provided package progressr.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"","code":"zoo_permute(   x = NULL,   repetitions = 1L,   permutation = \"restricted_by_row\",   block_size = NULL,   seed = 1L )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"x (required, zoo object) zoo time series. Default: NULL repetitions (optional, integer) number permutations compute. Large numbers may compromise R session. Default: 1 permutation (optional, character string) permutation method. Valid values listed higher lower induced randomness: \"free\": unrestricted re-shuffling individual cases across rows columns. Ignores block_size. \"free_by_row\": unrestricted re-shuffling complete rows. Ignores block size. \"restricted\": restricted shuffling across rows columns within blocks rows. \"restricted_by_row\": restricted re-shuffling rows within blocks. block_size (optional, integer) Block size number rows restricted permutations. relevant permutation methods \"restricted\" \"restricted_by_row\". block size n indicates original data pre-divided blocks size, given row can permuted within original block. NULL, defaults rounded one tenth number rows x. Default: NULL. seed (optional, integer) initial random seed use permutations. Default: 1","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"Time Series List","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random or Restricted Permutation of Zoo Time Series — zoo_permute","text":"","code":"#simulate zoo time series x <- zoo_simulate(cols = 2)  if(interactive()){   zoo_plot(x) }  #free x_free <- zoo_permute(   x = x,   permutation = \"free\",   repetitions = 2 ) #> distantia::utils_block_size(): argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_free,     guide = FALSE     ) }  #free by row x_free_by_row <- zoo_permute(   x = x,   permutation = \"free_by_row\",   repetitions = 2 ) #> distantia::utils_block_size(): argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_free_by_row,     guide = FALSE   ) }  #restricted x_restricted <- zoo_permute(   x = x,   permutation = \"restricted\",   repetitions = 2 ) #> distantia::utils_block_size(): argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_restricted,     guide = FALSE   ) }  #restricted by row x_restricted_by_row <- zoo_permute(   x = x,   permutation = \"restricted_by_row\",   repetitions = 2 ) #> distantia::utils_block_size(): argument 'block_size' set to 10.  if(interactive()){   tsl_plot(     tsl = x_restricted_by_row,     guide = FALSE   ) }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Zoo Time Series — zoo_plot","title":"Plot Zoo Time Series — zoo_plot","text":"Plot Zoo Time Series","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Zoo Time Series — zoo_plot","text":"","code":"zoo_plot(   x = NULL,   line_color = NULL,   line_width = 1,   xlim = NULL,   ylim = NULL,   title = NULL,   xlab = NULL,   ylab = NULL,   text_cex = 1,   guide = TRUE,   guide_cex = 0.8,   vertical = FALSE,   subpanel = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Zoo Time Series — zoo_plot","text":"x (required, zoo object) zoo time series. Default: NULL line_color (optional, character vector) vector colors distance cost matrix. NULL, uses appropriate palette generated grDevices::palette.colors(). Default: NULL line_width (optional, numeric vector) Width time series lines. Default: 1 xlim (optional, numeric vector) Numeric vector limits x axis. Default: NULL ylim (optional, numeric vector) Numeric vector limits x axis. Default: NULL title (optional, character string) Main title plot. NULL, set name time series. Default: NULL xlab (optional, character string) Title x axis. Disabled subpanel vertical TRUE. NULL, word \"Time\" used. Default: NULL ylab (optional, character string) Title x axis. Disabled subpanel vertical TRUE. NULL, left empty. Default: NULL text_cex (optional, numeric) Multiplicator text size. Default: 1 guide (optional, logical) TRUE, plots legend. Default: TRUE guide_cex (optional, numeric) Size guide's text separation guide's rows. Default: 0.7. vertical (optional, logical) internal use within package multipanel plots. Switches plot axes. Disabled subpanel = FALSE. Default: FALSE subpanel (optional, logical) internal use within package multipanel plots. Strips plot sub-panel. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Zoo Time Series — zoo_plot","text":"plot.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Zoo Time Series — zoo_plot","text":"","code":"#simulate zoo time series x <- zoo_simulate()  if(interactive()){    zoo_plot(     x = x,     xlab = \"Date\",     ylab = \"Value\",     title = \"My time series\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Zoo Objects to a New Time — zoo_resample","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"Objective Time series resampling involves interpolating new values time steps available original time series. operation useful : Transform irregular time series regular. Align time series different temporal resolutions. Increase (upsampling) decrease (downsampling) temporal resolution time series. hand, time series resampling used extrapolate new values outside original time range time series, increase resolution time series factor two . operations known produce non-sensical results. Methods function offers three methods time series interpolation: \"linear\" (default): interpolation via piecewise linear regression implemented zoo::na.approx(). \"spline\": cubic smoothing spline regression implemented stats::smooth.spline(). \"loess\": local polynomial regression fitting implemented stats::loess(). methods used fit models y ~ x y represents values univariate time series x represents numeric version time. functions utils_optimize_spline() utils_optimize_loess() used hood optimize complexity methods \"spline\" \"loess\" finding configuration minimizes root mean squared error (RMSE)  observed predicted y. However, argument max_complexity = TRUE, complexity optimization ignored, maximum complexity model used instead. New time argument new_time offers several alternatives help define new time resulting time series: NULL: target time series (x) resampled regular time within original time range number observations. zoo object: zoo object used template resampling. Useful objective equalizing frequency two separate zoo objects. time vector: time vector class compatible time x. keyword: character string defining resampling keyword, obtained via zoo_time(x, keywords = \"resample\")$keywords.. numeric: single number representing desired interval consecutive samples units x (relevant units can obtained via zoo_time(x)$units). Step Step steps resample time series list : time interpolation range taken index zoo object. step ensures extrapolation occurs resampling. new_time provided, values new_time outside minimum maximum interpolation times removed avoid extrapolation. new_time provided, regular time within interpolation time range zoo object generated. univariate time time series, model y ~ x, y time series x time coerced numeric fitted. max_complexity == FALSE method = \"spline\" method = \"loess\", model complexity minimizes root mean squared error observed predicted y returned. max_complexity == TRUE method = \"spline\" method = \"loess\", first valid model closest maximum complexity returned. fitted model predicted new_time generate resampled time series. Details Please use operation care, limits amount resampling can done without distorting data. safest option keep distance new time points within magnitude distance old time points.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"","code":"zoo_resample(   x = NULL,   new_time = NULL,   method = \"linear\",   max_complexity = FALSE )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"x (required, zoo object) Time series resample. Default: NULL new_time (optional, zoo object, keyword, time vector) New time resample x . available options : NULL: regular version time x generated used resampling. zoo object: index given zoo object used template resample x. time vector: vector new times resample x . time x class \"numeric\", vector must numeric well. Otherwise, vectors classes \"Date\" \"POSIXct\" can used indistinctly. keyword: valid keyword returned zoo_time(x)$keywords, used generate time vector relevant units. numeric length 1: interpreted new time interval, highest resolution units returned zoo_time(x)$units. method (optional, character string) Name method resample time series. One \"linear\", \"spline\" \"loess\". Default: \"linear\". max_complexity (required, logical). relevant methods \"spline\" \"loess\". TRUE, model optimization ignored, model maximum complexity (overfitted model) used resampling. Default: FALSE","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample Zoo Objects to a New Time — zoo_resample","text":"","code":"#simulate irregular time series x <- zoo_simulate(   cols = 2,   rows = 50,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   irregular = TRUE   )  #plot time series if(interactive()){   zoo_plot(x) }  #intervals between samples x_intervals <- diff(zoo::index(x)) x_intervals #> Time differences in days #>  [1]  36.88889  73.77778  36.88889  36.88889 184.44444  36.88889 110.66667 #>  [8]  36.88889  36.88889  73.77778  36.88889  36.88889  36.88889  36.88889 #> [15]  36.88889  36.88889  36.88889 110.66667  73.77778  36.88889  36.88889 #> [22]  73.77778  73.77778  73.77778  36.88889 147.55556 110.66667  73.77778 #> [29]  36.88889  36.88889  73.77778  73.77778 147.55556 110.66667 110.66667 #> [36] 110.66667  73.77778  36.88889  73.77778  36.88889  73.77778 110.66667 #> [43]  36.88889  36.88889  73.77778  73.77778  36.88889 295.11111  73.77778  #create regular time from the minimum of the observed intervals new_time <- seq.Date(   from = min(zoo::index(x)),   to = max(zoo::index(x)),   by = floor(min(x_intervals)) )  new_time #>  [1] \"2010-03-15\" \"2010-04-20\" \"2010-05-26\" \"2010-07-01\" \"2010-08-06\" #>  [6] \"2010-09-11\" \"2010-10-17\" \"2010-11-22\" \"2010-12-28\" \"2011-02-02\" #> [11] \"2011-03-10\" \"2011-04-15\" \"2011-05-21\" \"2011-06-26\" \"2011-08-01\" #> [16] \"2011-09-06\" \"2011-10-12\" \"2011-11-17\" \"2011-12-23\" \"2012-01-28\" #> [21] \"2012-03-04\" \"2012-04-09\" \"2012-05-15\" \"2012-06-20\" \"2012-07-26\" #> [26] \"2012-08-31\" \"2012-10-06\" \"2012-11-11\" \"2012-12-17\" \"2013-01-22\" #> [31] \"2013-02-27\" \"2013-04-04\" \"2013-05-10\" \"2013-06-15\" \"2013-07-21\" #> [36] \"2013-08-26\" \"2013-10-01\" \"2013-11-06\" \"2013-12-12\" \"2014-01-17\" #> [41] \"2014-02-22\" \"2014-03-30\" \"2014-05-05\" \"2014-06-10\" \"2014-07-16\" #> [46] \"2014-08-21\" \"2014-09-26\" \"2014-11-01\" \"2014-12-07\" \"2015-01-12\" #> [51] \"2015-02-17\" \"2015-03-25\" \"2015-04-30\" \"2015-06-05\" \"2015-07-11\" #> [56] \"2015-08-16\" \"2015-09-21\" \"2015-10-27\" \"2015-12-02\" \"2016-01-07\" #> [61] \"2016-02-12\" \"2016-03-19\" \"2016-04-24\" \"2016-05-30\" \"2016-07-05\" #> [66] \"2016-08-10\" \"2016-09-15\" \"2016-10-21\" \"2016-11-26\" \"2017-01-01\" #> [71] \"2017-02-06\" \"2017-03-14\" \"2017-04-19\" \"2017-05-25\" \"2017-06-30\" #> [76] \"2017-08-05\" \"2017-09-10\" \"2017-10-16\" \"2017-11-21\" \"2017-12-27\" #> [81] \"2018-02-01\" \"2018-03-09\" \"2018-04-14\" \"2018-05-20\" \"2018-06-25\" #> [86] \"2018-07-31\" \"2018-09-05\" \"2018-10-11\" \"2018-11-16\" \"2018-12-22\" #> [91] \"2019-01-27\" \"2019-03-04\" \"2019-04-09\" \"2019-05-15\" \"2019-06-20\" #> [96] \"2019-07-26\" \"2019-08-31\" \"2019-10-06\" diff(new_time) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  #resample using piecewise linear regression x_linear <- zoo_resample(   x = x,   new_time = new_time,   method = \"linear\" )  #resample using max complexity splines x_spline <- zoo_resample(   x = x,   new_time = new_time,   method = \"spline\",   max_complexity = TRUE )  #resample using max complexity loess x_loess <- zoo_resample(   x = x,   new_time = new_time,   method = \"loess\",   max_complexity = TRUE )   #intervals between new samples diff(zoo::index(x_linear)) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 diff(zoo::index(x_spline)) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 diff(zoo::index(x_loess)) #> Time differences in days #>  [1] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [26] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [51] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 #> [76] 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  #plotting results if(interactive()){    par(mfrow = c(4, 1), mar = c(3,3,2,2))    zoo_plot(     x,     guide = FALSE,     title = \"Original\"     )    zoo_plot(     x_linear,     guide = FALSE,     title = \"Method: linear\"   )    zoo_plot(     x_spline,     guide = FALSE,     title = \"Method: spline\"     )    zoo_plot(     x_loess,     guide = FALSE,     title = \"Method: loess\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Zoo Time Series — zoo_simulate","title":"Simulate a Zoo Time Series — zoo_simulate","text":"Generates simulated zoo time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Zoo Time Series — zoo_simulate","text":"","code":"zoo_simulate(   name = \"A\",   cols = 5,   rows = 100,   time_range = c(\"2010-01-01\", \"2020-01-01\"),   data_range = c(0, 1),   seasons = 0,   na_fraction = 0,   independent = FALSE,   irregular = TRUE,   seed = NULL )"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Zoo Time Series — zoo_simulate","text":"name (optional, character string) Name zoo object, stored attribute \"name\". Default: \"\" cols (optional, integer) Number time series. Default: 5 rows (optional, integer) Length time series. Minimum 10, maximum limited. large numbers might crash R session. Default: 100 time_range (optional character numeric vector) Interval time series. Either character vector dates format YYYY-MM-DD numeric vector. mismatch time_range rows (example, number days time_range smaller rows), upper value time_range adapted rows. Default: c(\"2010-01-01\", \"2020-01-01\") data_range (optional, numeric vector length 2) Extremes simulated time series values. simulated time series independently adjusted random values within provided range. Default: c(0, 1) seasons (optional, integer) Number seasons resulting time series. maximum number seasons computed floor(rows/3). Default: 0 na_fraction (optional, numeric) Value 0 0.5 indicating approximate fraction NA data simulated time series. Default: 0. independent (optional, logical) TRUE, new column simulated time series averaged previous column. Irrelevant cols <= 2, hard perceive output seasons > 0. Default: FALSE irregular (optional, logical) TRUE, time series created 20 percent rows, random 20 percent rows removed random. Default: TRUE seed (optional, integer) Random seed used simulate zoo object. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Zoo Time Series — zoo_simulate","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Zoo Time Series — zoo_simulate","text":"","code":"#generates a different time series on each execution when 'seed = NULL' x <- zoo_simulate()  #returns a zoo object class(x) #> [1] \"zoo\"  #time series names are uppercase letters #this attribute is not defined in the zoo class and might be lost during data transformations attributes(x)$name #> [1] \"A\"  #column names are lowercase letters names(x) #> [1] \"a\" \"b\" \"c\" \"d\" \"e\"  #plotting methods if(interactive()){    #plot time series with default zoo method   plot(x)    #plot time series with distantia   zoo_plot(     x = x,     xlab = \"Date\",     ylab = \"Value\",     title = \"My time series\"   )  }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Smoothing of Zoo Time Series — zoo_smooth_exponential","title":"Exponential Smoothing of Zoo Time Series — zoo_smooth_exponential","text":"Applies exponential smoothing zoo time series object, value weighted average current value past smoothed values. method useful reducing noise time series data preserving general trend.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Smoothing of Zoo Time Series — zoo_smooth_exponential","text":"","code":"zoo_smooth_exponential(x = NULL, alpha = 0.2)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Smoothing of Zoo Time Series — zoo_smooth_exponential","text":"x (required, zoo object) time series smooth Default: NULL alpha (required, numeric) Smoothing factor range (0, 1]. Determines weight current value relative past values. higher value gives weight recent observations, lower value gives weight past observations. Default: 0.2","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Smoothing of Zoo Time Series — zoo_smooth_exponential","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential Smoothing of Zoo Time Series — zoo_smooth_exponential","text":"","code":"x <- zoo_simulate()  x_smooth <- zoo_smooth_exponential(   x = x,   alpha = 0.2 )  if(interactive()){   zoo_plot(x)   zoo_plot(x_smooth) }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling Window Smoothing of Zoo Time Series — zoo_smooth_window","title":"Rolling Window Smoothing of Zoo Time Series — zoo_smooth_window","text":"Just fancy wrapper zoo::rollapply().","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling Window Smoothing of Zoo Time Series — zoo_smooth_window","text":"","code":"zoo_smooth_window(x = NULL, window = 3, f = mean, ...)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling Window Smoothing of Zoo Time Series — zoo_smooth_window","text":"x (required, zoo object) Time series smooth Default: NULL window (optional, integer) Smoothing window width, number cases. Default: 3 f (optional, quoted unquoted function name) Name standard custom function aggregate numeric vectors. Typical examples mean, max,min, median, quantile. Default: mean. ... (optional, additional arguments) additional arguments f.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling Window Smoothing of Zoo Time Series — zoo_smooth_window","text":"zoo object","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_smooth_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling Window Smoothing of Zoo Time Series — zoo_smooth_window","text":"","code":"x <- zoo_simulate()  x_smooth <- zoo_smooth_window(   x = x,   window = 5,   f = mean )  if(interactive()){   zoo_plot(x)   zoo_plot(x_smooth) }"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Time Features from Zoo Objects — zoo_time","title":"Get Time Features from Zoo Objects — zoo_time","text":"function generates data frame summarizing time features (class, length, resolution, others) zoo time series.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Time Features from Zoo Objects — zoo_time","text":"","code":"zoo_time(x = NULL, keywords = c(\"resample\", \"aggregate\"))"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Time Features from Zoo Objects — zoo_time","text":"x (required, zoo object) Zoo time series analyze. Default: NULL. keywords (optional, character string vector) Defines keywords returned. \"aggregate\", returns valid keywords zoo_aggregate(). \"resample\", returns valid keywords zoo_resample(). , returns valid keywords. Default: c(\"aggregate\", \"resample\").","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Time Features from Zoo Objects — zoo_time","text":"Data frame following columns: name (string): time series name. rows (integer): number observations. class (string): time class, one \"Date\", \"POSIXct\", \"numeric.\" units (string): units time series. length (numeric): total length time series expressed units. resolution (numeric): average interval observations expressed units. begin (date numeric): begin time time series. end (date numeric): end time time series. keywords (character vector): valid keywords tsl_aggregate() tsl_resample(), depending value argument keywords.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Time Features from Zoo Objects — zoo_time","text":"","code":"#simulate a zoo time series x <- zoo_simulate(   rows = 150,   time_range = c(     Sys.Date() - 365,     Sys.Date()   ),   irregular = TRUE )  #time data frame zoo_time(   x = x ) #>   name rows class units   length resolution      begin        end     keywords #> 1    A  150  Date  days 360.1171   2.416893 2023-12-28 2024-12-22 quarters...."},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"Internal function wrap zoo object time series list.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"","code":"zoo_to_tsl(x = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"x (required, zoo object) Time series. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"time series list length one.","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_to_tsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Individual Zoo Objects to Time Series List — zoo_to_tsl","text":"","code":"#create zoo object x <- zoo_simulate() class(x) #> [1] \"zoo\"  #to time series list tsl <- zoo_to_tsl(   x = x )  class(tsl) #> [1] \"list\" class(tsl[[1]]) #> [1] \"zoo\" names(tsl) #> [1] \"A\" attributes(tsl[[1]])$name #> [1] \"A\""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_vector_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce Coredata of Univariate Zoo Time Series to Matrix — zoo_vector_to_matrix","title":"Coerce Coredata of Univariate Zoo Time Series to Matrix — zoo_vector_to_matrix","text":"Transforms vector coredata univariate zoo time series class matrix. input zoo time series attribute \"name\", output inherits value attribute. Multivariate zoo objects returned without changes.","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_vector_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce Coredata of Univariate Zoo Time Series to Matrix — zoo_vector_to_matrix","text":"","code":"zoo_vector_to_matrix(x = NULL, name = NULL)"},{"path":"https://blasbenito.github.io/distantia/reference/zoo_vector_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce Coredata of Univariate Zoo Time Series to Matrix — zoo_vector_to_matrix","text":"x (required, zoo object) zoo time series. Default: NULL name (required, character string) name matrix column. Default: NULL","code":""},{"path":"https://blasbenito.github.io/distantia/reference/zoo_vector_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce Coredata of Univariate Zoo Time Series to Matrix — zoo_vector_to_matrix","text":"zoo time series","code":""},{"path":[]},{"path":"https://blasbenito.github.io/distantia/reference/zoo_vector_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce Coredata of Univariate Zoo Time Series to Matrix — zoo_vector_to_matrix","text":"","code":"#create zoo object from vector x <- zoo::zoo(   x = runif(100) )  #coredata is not a matrix is.matrix(zoo::coredata(x)) #> [1] FALSE  #convert to matrix y <- zoo_vector_to_matrix(   x = x )  #coredata is now a matrix is.matrix(zoo::coredata(y)) #> [1] TRUE"},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-200","dir":"Changelog","previous_headings":"","what":"Version 2.0.0","title":"Version 2.0.0","text":"new version involves massive rewrite break previous code based package. install previous version (1.0.2): Version 2.0.0 complete package rewrite ground : core functions rewritten C++ increased speed memory efficiency, proper R wrappers functions provided. functions arguments follow modern naming conventions, simplified interfaces improve user experience. time series operations use zoo library underneath, ensuring data consistency, computational speed, memory efficiency. Lists zoo objects, named “time series lists” (“tsl” short) throughout package documentation, used organize time series data. complete toolset manage time series lists provided. functions belonging named using prefix tsl_...(). tools generate, aggregate, resample, transform, plot, map, analyze univariate multivariate regular irregular time series. functions taking time series lists inputs parallelized using future package, progress bars parallelized operations available well via progressr package. New example datasets different disciplines functions generate simulated time series shipped package improve learning experience.","code":"#install from CRAN archive remotes::install_version(   package = \"distantia\",    version = \"1.0.2\"   )  #install from archive branch in GitHub remotes::install_github(   repo = \"https://github.com/BlasBenito/distantia\",   ref = \"v1.0.2\"   )"},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-103","dir":"Changelog","previous_headings":"","what":"Version 1.0.3","title":"Version 1.0.3","text":"Fixed bug Hellinger distances reworked distance() function make slightly faster.","code":""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-102","dir":"Changelog","previous_headings":"","what":"Version 1.0.2","title":"Version 1.0.2","text":"CRAN release: 2019-10-28 Fixed issue parallelization tasks Windows platform. Now parallelized functions modify cluster settings depending user’s platform.","code":""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-101","dir":"Changelog","previous_headings":"","what":"Version 1.0.1","title":"Version 1.0.1","text":"CRAN release: 2019-08-06 Fixed bug function workflowImportance. argument ‘exclude.columns’ ignored. Fixed documentation functions workflowImportance workflowSlotting. outputs well documented. Fixed error workflowTransfer. Changed psi computed. ’s now respectful original formulation, handles similar sequences better. Fixed function workflowPsi add +1 least cost produced options paired.samples = TRUE diagonal = TRUE Added function workflowPsiHP, High Performance version workflowPsi. less options, much faster, much lower memory footprint.","code":""},{"path":"https://blasbenito.github.io/distantia/news/index.html","id":"version-100-is-ready","dir":"Changelog","previous_headings":"","what":"Version 1.0.0 is ready!","title":"Version 1.0.0 is ready!","text":"CRAN release: 2019-07-04","code":""}]
